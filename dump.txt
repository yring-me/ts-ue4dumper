Class: Package.Object, Addr: 0x75a5272e00
Class: Class.Struct.Field.Object, Addr: 0x75a5272680
Class: Object, Addr: 0x75e4810b00
	Void ExecuteUbergraph(int EntryPoint); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x759aee4700
Class: ScriptStruct.Struct.Field.Object, Addr: 0x7690268080
Class: Field.Object, Addr: 0x75a5272b80
Class: Struct.Field.Object, Addr: 0x75a5272900
Class: Enum.Field.Object, Addr: 0x7690267180
Class: Function.Struct.Field.Object, Addr: 0x7690267e00
Class: AndroidDeviceProfileMatchingRules.Object, Addr: 0x76903dd300
	structProfileMatch[] MatchProfile; //[Offset: 0x0, Size: 16]
Class: AndroidJavaSurfaceViewDevices.Object, Addr: 0x76903dd080
	structJavaSurfaceViewDevice[] SurfaceViewDevices; //[Offset: 0x0, Size: 16]
Class: DelegateFunction.Function.Struct.Field.Object, Addr: 0x7690267b80
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object, Addr: 0x7690267900
Class: AndroidCvarOverrideMatchingRules.Object, Addr: 0x7690256a00
	structCvarOverrideMatch[] MatchLine; //[Offset: 0x0, Size: 16]
	structTextureGroupOverrideMatch[] MatchTexGroupLine; //[Offset: 0x0, Size: 16]
	structTextureGroupOverrideMatchInput[] TexGroupMatchItems; //[Offset: 0x0, Size: 16]
	structTextureGroupOverrideInput[] TexGroupOverrides; //[Offset: 0x0, Size: 16]
Class: GCObjectReferencer.Object, Addr: 0x7690268580
Class: AssetRegistryImpl.Object, Addr: 0x76902b0600
Class: TextBuffer.Object, Addr: 0x7690268300
Class: DynamicClass.Class.Struct.Field.Object, Addr: 0x7690267680
Class: PackageMap.Object, Addr: 0x7690267400
Class: Interface.Object, Addr: 0x76901dc180
Class: LinkerPlaceholderClass.Class.Struct.Field.Object, Addr: 0x7690266f00
Class: LinkerPlaceholderExportObject.Object, Addr: 0x7690266c80
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object, Addr: 0x7690266a00
Class: MetaData.Object, Addr: 0x7690266780
Class: ObjectRedirector.Object, Addr: 0x7690266500
Class: Property.Field.Object, Addr: 0x7690266280
Class: EnumProperty.Property.Field.Object, Addr: 0x7690266000
Class: ArrayProperty.Property.Field.Object, Addr: 0x7690265d80
Class: ObjectPropertyBase.Property.Field.Object, Addr: 0x7690265b00
Class: BoolProperty.Property.Field.Object, Addr: 0x7690265880
Class: NumericProperty.Property.Field.Object, Addr: 0x7690265380
Class: ByteProperty.NumericProperty.Property.Field.Object, Addr: 0x7690265600
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026f380
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026f600
Class: DelegateProperty.Property.Field.Object, Addr: 0x769026f100
Class: DoubleProperty.NumericProperty.Property.Field.Object, Addr: 0x769026ee80
Class: FloatProperty.NumericProperty.Property.Field.Object, Addr: 0x769026ec00
Class: IntProperty.NumericProperty.Property.Field.Object, Addr: 0x769026e980
Class: Int8Property.NumericProperty.Property.Field.Object, Addr: 0x769026e700
Class: Int16Property.NumericProperty.Property.Field.Object, Addr: 0x769026e480
Class: Int64Property.NumericProperty.Property.Field.Object, Addr: 0x769026e200
Class: InterfaceProperty.Property.Field.Object, Addr: 0x769026df80
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026dd00
Class: MapProperty.Property.Field.Object, Addr: 0x769026da80
Class: MulticastDelegateProperty.Property.Field.Object, Addr: 0x769026d800
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object, Addr: 0x769026d580
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object, Addr: 0x769026d300
Class: NameProperty.Property.Field.Object, Addr: 0x769026d080
Class: SetProperty.Property.Field.Object, Addr: 0x769026ce00
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026c900
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026cb80
Class: StrProperty.Property.Field.Object, Addr: 0x769026c680
Class: StructProperty.Property.Field.Object, Addr: 0x769026c400
Class: UInt16Property.NumericProperty.Property.Field.Object, Addr: 0x769026c180
Class: UInt32Property.NumericProperty.Property.Field.Object, Addr: 0x769026bf00
Class: UInt64Property.NumericProperty.Property.Field.Object, Addr: 0x769026bc80
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object, Addr: 0x769026ba00
Class: TextProperty.Property.Field.Object, Addr: 0x769026b780
Class: PropertyWrapper.Object, Addr: 0x769026b500
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object, Addr: 0x769026b280
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object, Addr: 0x769026b000
Class: Model.Object, Addr: 0x76902bab00
Class: Actor.Object, Addr: 0x75a5279e80
	ActorTickFunction StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bNetTemporary; 	//[Offset: 0x0, Size: 1]
	bool bNetStartup; 	//[Offset: 0x0, Size: 1]
	bool bOnlyRelevantToOwner; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysRelevant; 	//[Offset: 0x0, Size: 1]
	bool bReplicateMovement; 	//[Offset: 0x32f40, Size: 1]
	bool bHidden; 	//[Offset: 0x0, Size: 1]
	bool bTearOff; 	//[Offset: 0x0, Size: 1]
	bool bExchangedRoles; 	//[Offset: 0x0, Size: 1]
	bool bNetLoadOnClient; 	//[Offset: 0x0, Size: 1]
	bool bNetUseOwnerRelevancy; 	//[Offset: 0x0, Size: 1]
	bool bRelevantForNetworkReplays; 	//[Offset: 0x0, Size: 1]
	bool bRelevantForLevelBounds; 	//[Offset: 0x0, Size: 1]
	bool bReplayRewindable; 	//[Offset: 0x0, Size: 1]
	bool bAllowTickBeforeBeginPlay; 	//[Offset: 0x0, Size: 1]
	bool bAutoDestroyWhenFinished; 	//[Offset: 0x0, Size: 1]
	bool bCanBeDamaged; 	//[Offset: 0x0, Size: 1]
	bool bBlockInput; 	//[Offset: 0x0, Size: 1]
	bool bCollideWhenPlacing; 	//[Offset: 0x0, Size: 1]
	bool bFindCameraComponentWhenViewTarget; 	//[Offset: 0x0, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming; 	//[Offset: 0x0, Size: 1]
	bool bIgnoresOriginShifting; 	//[Offset: 0x0, Size: 1]
	bool bEnableAutoLODGeneration; 	//[Offset: 0x0, Size: 1]
	bool bIsEditorOnlyActor; 	//[Offset: 0x0, Size: 1]
	bool bActorSeamlessTraveled; 	//[Offset: 0x0, Size: 1]
	bool bReplicates; 	//[Offset: 0x0, Size: 1]
	bool bCanBeInCluster; 	//[Offset: 0x0, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	bool bActorEnableCollision; 	//[Offset: 0x0, Size: 1]
	bool bActorIsBeingDestroyed; 	//[Offset: 0x0, Size: 1]
	enum EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming { //[Offset: 0x0, Size: 1]
		UseConfigDefault = 0
		AlwaysUpdate = 6f007400000000
		OnlyUpdateMovable = 6c007200000000
		NeverUpdate = 69000000000000
		EActorUpdateOverlapsMethod_MAX = 0
	};
	enum EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming { //[Offset: 0x0, Size: 1]
		UseConfigDefault = 0
		AlwaysUpdate = 6f007400000000
		OnlyUpdateMovable = 6c007200000000
		NeverUpdate = 69000000000000
		EActorUpdateOverlapsMethod_MAX = 0
	};
	enum ENetRole RemoteRole { //[Offset: 0x0, Size: 1]
		ROLE_None = 0
		ROLE_SimulatedProxy = 52006500000000
		ROLE_AutonomousProxy = 6c006100000000
		ROLE_Authority = 62006100000000
		ROLE_MAX = 58004100000000
	};
	RepMovement StructProperty; 	//[Offset: 0x32f38, Size: 52]
	float InitialLifeSpan; 	//[Offset: 0x0, Size: 4]
	float CustomTimeDilation; 	//[Offset: 0x0, Size: 4]
	RepAttachment StructProperty; 	//[Offset: 0x32f24, Size: 64]
	Actor* Owner; 	//[Offset: 0x32f33, Size: 8]
	FName NetDriverName; 	//[Offset: 0x0, Size: 12]
	enum ENetRole Role { //[Offset: 0x0, Size: 1]
		ROLE_None = 0
		ROLE_SimulatedProxy = 52006500000000
		ROLE_AutonomousProxy = 6c006100000000
		ROLE_Authority = 62006100000000
		ROLE_MAX = 58004100000000
	};
	enum ENetDormancy NetDormancy { //[Offset: 0x0, Size: 1]
		DORM_Never = 0
		DORM_Awake = 6e006f00000000
		DORM_DormantAll = 68007400000000
		DORM_DormantPartial = 63004100000000
		DORM_Initial = 6e006f00000000
		DORM_MAX = 68007400000000
	};
	enum ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod { //[Offset: 0x0, Size: 1]
		Undefined = 0
		AlwaysSpawn = 52006500000000
		AdjustIfPossibleButAlwaysSpawn = 6c006100000000
		AdjustIfPossibleButDontSpawnIfColliding = 62006100000000
		DontSpawnIfColliding = 58004100000000
		ESpawnActorCollisionHandlingMethod_MAX = 0
	};
	enum EAutoReceiveInput AutoReceiveInput { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Player0 = 0
		Player1 = 0
		Player2 = 0
		Player3 = 0
		Player4 = 0
		Player5 = 0
		Player6 = 0
		Player7 = 0
		EAutoReceiveInput_MAX = 0
	};
	int InputPriority; 	//[Offset: 0x0, Size: 4]
	InputComponent* InputComponent; 	//[Offset: 0x0, Size: 8]
	float NetCullDistanceSquared; 	//[Offset: 0x0, Size: 4]
	int NetTag; 	//[Offset: 0x0, Size: 4]
	float NetUpdateFrequency; 	//[Offset: 0x0, Size: 4]
	float MinNetUpdateFrequency; 	//[Offset: 0x0, Size: 4]
	float NetPriority; 	//[Offset: 0x0, Size: 4]
	Pawn* Instigator; 	//[Offset: 0x32f2d, Size: 8]
	Actor*[] Children; //[Offset: 0x0, Size: 16]
	SceneComponent* RootComponent; 	//[Offset: 0x0, Size: 8]
	MatineeActor*[] ControllingMatineeActors; //[Offset: 0x0, Size: 16]
	FName[] Layers; //[Offset: 0x0, Size: 16]
	ChildActorComponent* ParentComponent; 	//[Offset: 0x0, Size: 8]
	FName[] Tags; //[Offset: 0x0, Size: 16]
	delegate OnTakeAnyDamage; 	//[Offset: 0x0, Size: 1]
	delegate OnTakePointDamage; 	//[Offset: 0x0, Size: 1]
	delegate OnTakeRadialDamage; 	//[Offset: 0x0, Size: 1]
	delegate OnActorBeginOverlap; 	//[Offset: 0x0, Size: 1]
	delegate OnActorEndOverlap; 	//[Offset: 0x0, Size: 1]
	delegate OnBeginCursorOver; 	//[Offset: 0x0, Size: 1]
	delegate OnEndCursorOver; 	//[Offset: 0x0, Size: 1]
	delegate OnClicked; 	//[Offset: 0x0, Size: 1]
	delegate OnReleased; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchBegin; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchEnd; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchEnter; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchLeave; 	//[Offset: 0x0, Size: 1]
	delegate OnActorHit; 	//[Offset: 0x0, Size: 1]
	delegate OnDestroyed; 	//[Offset: 0x0, Size: 1]
	delegate OnEndPlay; 	//[Offset: 0x0, Size: 1]
	ActorComponent*[] InstanceComponents; //[Offset: 0x0, Size: 16]
	ActorComponent*[] BlueprintCreatedComponents; //[Offset: 0x0, Size: 16]
	bool WasRecentlyRendered(float Tolerance); //Addr 0x75edf85ad0 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75b0ea2500
Class: Channel.Object, Addr: 0x76902ba600
	NetConnection* Connection; 	//[Offset: 0x0, Size: 8]
Class: ActorChannel.Channel.Object, Addr: 0x76902ba880
	Actor* Actor; 	//[Offset: 0x0, Size: 8]
	Object*[] CreateSubObjects; //[Offset: 0x0, Size: 16]
Class: ActorComponent.Object, Addr: 0x75a5278800
	ActorComponentTickFunction StructProperty; 	//[Offset: 0x0, Size: 48]
	FName[] ComponentTags; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	int UCSSerializationIndex; 	//[Offset: 0x0, Size: 4]
	bool bNetAddressable; 	//[Offset: 0x0, Size: 1]
	bool bReplicates; 	//[Offset: 0x0, Size: 1]
	bool bAutoActivate; 	//[Offset: 0x0, Size: 1]
	bool bIsActive; 	//[Offset: 0x33d25, Size: 1]
	bool bEditableWhenInherited; 	//[Offset: 0x0, Size: 1]
	bool bCanEverAffectNavigation; 	//[Offset: 0x0, Size: 1]
	bool bIsEditorOnly; 	//[Offset: 0x0, Size: 1]
	enum EComponentCreationMethod CreationMethod { //[Offset: 0x0, Size: 1]
		Native = 0
		SimpleConstructionScript = 3a006500000000
		UserConstructionScript = 75006700000000
		Instance = 58004100000000
		EComponentCreationMethod_MAX = 53003d00000000
	};
	delegate OnComponentActivated; 	//[Offset: 0x0, Size: 1]
	delegate OnComponentDeactivated; 	//[Offset: 0x0, Size: 1]
	structSimpleMemberReference[] UCSModifiedProperties; //[Offset: 0x0, Size: 16]
	Void UnregisterComponent(); //Addr 0x75edf8f728 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x759aeec500
Class: EditorActor.Actor.Object, Addr: 0x76902bfd80
	bool bTickInViewPortOnly; 	//[Offset: 0x0, Size: 1]
Class: AnimationAsset.Object, Addr: 0x76902d4e80
	Skeleton* Skeleton; 	//[Offset: 0x0, Size: 8]
	AnimMetaData*[] MetaData; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
Class: BlendSpaceBase.AnimationAsset.Object, Addr: 0x76902d5100
	bool bRotationBlendInMeshSpace; 	//[Offset: 0x0, Size: 1]
	float AnimLength; 	//[Offset: 0x0, Size: 4]
	InterpolationParameter StructProperty; 	//[Offset: 0x0, Size: 8]
	float TargetWeightInterpolationSpeedPerSec; 	//[Offset: 0x0, Size: 4]
	enum ENotifyTriggerMode NotifyTriggerMode { //[Offset: 0x0, Size: 1]
		AllAnimations = 0
		HighestWeightedAnimation = 69007400000000
		None = 64006f00000000
		ENotifyTriggerMode_MAX = 0
	};
	structPerBoneInterpolation[] PerBoneBlend; //[Offset: 0x0, Size: 16]
	int SampleIndexWithMarkers; 	//[Offset: 0x0, Size: 4]
	structBlendSample[] SampleData; //[Offset: 0x0, Size: 16]
	structEditorElement[] GridSamples; //[Offset: 0x0, Size: 16]
	BlendParameter StructProperty; 	//[Offset: 0x0, Size: 32]
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object, Addr: 0x76902bf880
	enum EBlendSpaceAxis AxisToScaleAnimation { //[Offset: 0x0, Size: 1]
		BSA_None = 0
		BSA_X = 3a003a00000000
		BSA_Y = 67006700000000
		BSA_Max = 6e000000000000
		BSA_Max = 0
	};
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object, Addr: 0x76902bfb00
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object, Addr: 0x76902d4980
	bool bScaleAnimation; 	//[Offset: 0x0, Size: 1]
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object, Addr: 0x76902d4c00
Class: AISystemBase.Object, Addr: 0x76902d4700
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	FName AISystemModuleName; 	//[Offset: 0x0, Size: 12]
	bool bInstantiateAISystemOnClient; 	//[Offset: 0x0, Size: 1]
Class: AmbientSound.Actor.Object, Addr: 0x76902d4480
	AudioComponent* AudioComponent; 	//[Offset: 0x0, Size: 8]
	Void Stop(); //Addr 0x75edf916e8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac114700
Class: SceneComponent.ActorComponent.Object, Addr: 0x75a5277180
	PhysicsVolume* PhysicsVolume; 	//[Offset: 0x0, Size: 8]
	SceneComponent* AttachParent; 	//[Offset: 0x34043, Size: 8]
	FName AttachSocketName; 	//[Offset: 0x34049, Size: 12]
	SceneComponent*[] AttachChildren; //[Offset: 0x3403c, Size: 16]
	SceneComponent*[] ClientAttachedChildren; //[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x34050, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x34050, Size: 12]
	Vector StructProperty; 	//[Offset: 0x34050, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bComponentToWorldUpdated; 	//[Offset: 0x0, Size: 1]
	bool bAbsoluteLocation; 	//[Offset: 0x34050, Size: 1]
	bool bAbsoluteRotation; 	//[Offset: 0x34050, Size: 1]
	bool bAbsoluteScale; 	//[Offset: 0x34050, Size: 1]
	bool bVisible; 	//[Offset: 0x34056, Size: 1]
	bool bShouldBeAttached; 	//[Offset: 0x0, Size: 1]
	bool bShouldSnapLocationWhenAttached; 	//[Offset: 0x0, Size: 1]
	bool bShouldSnapRotationWhenAttached; 	//[Offset: 0x0, Size: 1]
	bool bShouldUpdatePhysicsVolume; 	//[Offset: 0x0, Size: 1]
	bool bHiddenInGame; 	//[Offset: 0x0, Size: 1]
	bool bOnlyShownInCaptures; 	//[Offset: 0x0, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild; 	//[Offset: 0x0, Size: 1]
	bool bUseAttachParentBound; 	//[Offset: 0x0, Size: 1]
	bool bWantsOnUpdateTransform; 	//[Offset: 0x0, Size: 1]
	enum EComponentMobility Mobility { //[Offset: 0x0, Size: 1]
		Static = 0
		Stationary = 65004400000000
		Movable = 65006c00000000
		EComponentMobility_MAX = 7600000000
	};
	enum EDetailMode DetailMode { //[Offset: 0x0, Size: 1]
		DM_Low = 0
		DM_Medium = 3a003a00000000
		DM_High = 6f004d00000000
		DM_MAX = 6e000000000000
	};
	delegate PhysicsVolumeChangedDelegate; 	//[Offset: 0x0, Size: 1]
	Void ToggleVisibility(bool bPropagateToChildren); //Addr 0x75ee1c28b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b9e700
Class: AudioComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024f880
	SoundBase* Sound; 	//[Offset: 0x0, Size: 8]
	structAudioComponentParam[] InstanceParameters; //[Offset: 0x0, Size: 16]
	SoundClass* SoundClassOverride; 	//[Offset: 0x0, Size: 8]
	bool bAutoDestroy; 	//[Offset: 0x0, Size: 1]
	bool bStopWhenOwnerDestroyed; 	//[Offset: 0x0, Size: 1]
	bool bShouldRemainActiveIfDropped; 	//[Offset: 0x0, Size: 1]
	bool bAllowSpatialization; 	//[Offset: 0x0, Size: 1]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
	bool bOverrideSubtitlePriority; 	//[Offset: 0x0, Size: 1]
	bool bIsUISound; 	//[Offset: 0x0, Size: 1]
	bool bEnableLowPassFilter; 	//[Offset: 0x0, Size: 1]
	bool bOverridePriority; 	//[Offset: 0x0, Size: 1]
	bool bSuppressSubtitles; 	//[Offset: 0x0, Size: 1]
	bool bAutoManageAttachment; 	//[Offset: 0x0, Size: 1]
	FName AudioComponentUserID; 	//[Offset: 0x0, Size: 12]
	float PitchModulationMin; 	//[Offset: 0x0, Size: 4]
	float PitchModulationMax; 	//[Offset: 0x0, Size: 4]
	float VolumeModulationMin; 	//[Offset: 0x0, Size: 4]
	float VolumeModulationMax; 	//[Offset: 0x0, Size: 4]
	float VolumeMultiplier; 	//[Offset: 0x0, Size: 4]
	int EnvelopeFollowerAttackTime; 	//[Offset: 0x0, Size: 4]
	int EnvelopeFollowerReleaseTime; 	//[Offset: 0x0, Size: 4]
	float Priority; 	//[Offset: 0x0, Size: 4]
	float SubtitlePriority; 	//[Offset: 0x0, Size: 4]
	SoundEffectSourcePresetChain* SourceEffectChain; 	//[Offset: 0x0, Size: 8]
	float PitchMultiplier; 	//[Offset: 0x0, Size: 4]
	float LowPassFilterFrequency; 	//[Offset: 0x0, Size: 4]
	SoundAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	SoundAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 928]
	SoundConcurrency* ConcurrencySettings; 	//[Offset: 0x0, Size: 8]
	SoundConcurrency* ConcurrencySet; //[Offset: 0x0, Size: 80]
	enum EAttachmentRule AutoAttachLocationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachRotationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachScaleRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	SoundModulationDefaultRoutingSettings StructProperty; 	//[Offset: 0x0, Size: 72]
	delegate OnAudioPlayStateChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioVirtualizationChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioPlaybackPercent; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioSingleEnvelopeValue; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioMultiEnvelopeValue; 	//[Offset: 0x0, Size: 16]
	delegate OnQueueSubtitles; 	//[Offset: 0x0, Size: 20]
	SceneComponent* AutoAttachParent; 	//[Offset: 0x0, Size: 8]
	FName AutoAttachSocketName; 	//[Offset: 0x0, Size: 12]
	Void StopDelayed(float DelayTime); //Addr 0x75edfc6858 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfbbd00
Class: DeveloperSettings.Object, Addr: 0x769022c900
Class: AnimationSettings.DeveloperSettings.Object, Addr: 0x76902d4200
	int CompressCommandletVersion; 	//[Offset: 0x0, Size: 4]
	FString[] KeyEndEffectorsMatchNameArray; //[Offset: 0x0, Size: 16]
	bool ForceRecompression; 	//[Offset: 0x0, Size: 1]
	bool bForceBelowThreshold; 	//[Offset: 0x0, Size: 1]
	bool bFirstRecompressUsingCurrentOrDefault; 	//[Offset: 0x0, Size: 1]
	bool bRaiseMaxErrorToExisting; 	//[Offset: 0x0, Size: 1]
	bool bEnablePerformanceLog; 	//[Offset: 0x0, Size: 1]
	bool bStripAnimationDataOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	bool bTickAnimationOnSkeletalMeshInit; 	//[Offset: 0x0, Size: 1]
	structCustomAttributeSetting[] BoneCustomAttributesNames; //[Offset: 0x0, Size: 16]
	FString[] BoneNamesWithCustomAttributes; //[Offset: 0x0, Size: 16]
	<FName, enum ECustomAttributeBlendType> AttributeBlendModes; //[Offset: 0x0, Size: 80]
	enum ECustomAttributeBlendType DefaultAttributeBlendMode { //[Offset: 0x0, Size: 1]
		Override = 0
		Blend = 5800000000
		ECustomAttributeBlendType_MAX = 0
	};
Class: BlueprintCore.Object, Addr: 0x76902be700
	Object* SkeletonGeneratedClass; 	//[Offset: 0x0, Size: 8]
	Object* GeneratedClass; 	//[Offset: 0x0, Size: 8]
	bool bLegacyNeedToPurgeSkelRefs; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: Blueprint.BlueprintCore.Object, Addr: 0x76902be980
	Object* ParentClass; 	//[Offset: 0x0, Size: 8]
	enum EBlueprintType BlueprintType { //[Offset: 0x0, Size: 1]
		BPTYPE_Normal = 0
		BPTYPE_Const = 75006c00000000
		BPTYPE_MacroLibrary = 63006900000000
		BPTYPE_Interface = 3a006400000000
		BPTYPE_LevelScript = 69006e00000000
		BPTYPE_FunctionLibrary = 72007000000000
		BPTYPE_MAX = 69007400000000
	};
	bool bRecompileOnLoad; 	//[Offset: 0x0, Size: 1]
	bool bHasBeenRegenerated; 	//[Offset: 0x0, Size: 1]
	bool bIsRegeneratingOnLoad; 	//[Offset: 0x0, Size: 1]
	int BlueprintSystemVersion; 	//[Offset: 0x0, Size: 4]
	SimpleConstructionScript* SimpleConstructionScript; 	//[Offset: 0x0, Size: 8]
	ActorComponent*[] ComponentTemplates; //[Offset: 0x0, Size: 16]
	TimelineTemplate*[] Timelines; //[Offset: 0x0, Size: 16]
	structBPComponentClassOverride[] ComponentClassOverrides; //[Offset: 0x0, Size: 16]
	InheritableComponentHandler* InheritableComponentHandler; 	//[Offset: 0x0, Size: 8]
Class: AnimBlueprint.Blueprint.BlueprintCore.Object, Addr: 0x76902d3f80
	Skeleton* TargetSkeleton; 	//[Offset: 0x0, Size: 8]
	structAnimGroupInfo[] Groups; //[Offset: 0x0, Size: 16]
	bool bUseMultiThreadedAnimationUpdate; 	//[Offset: 0x0, Size: 1]
	bool bWarnAboutBlueprintUsage; 	//[Offset: 0x0, Size: 1]
Class: BlueprintGeneratedClass.Class.Struct.Field.Object, Addr: 0x769022ee80
	int NumReplicatedProperties; 	//[Offset: 0x0, Size: 4]
	bool bHasNativizedParent; 	//[Offset: 0x0, Size: 1]
	bool bHasCookedComponentInstancingData; 	//[Offset: 0x0, Size: 1]
	DynamicBlueprintBinding*[] DynamicBindingObjects; //[Offset: 0x0, Size: 16]
	ActorComponent*[] ComponentTemplates; //[Offset: 0x0, Size: 16]
	TimelineTemplate*[] Timelines; //[Offset: 0x0, Size: 16]
	structBPComponentClassOverride[] ComponentClassOverrides; //[Offset: 0x0, Size: 16]
	SimpleConstructionScript* SimpleConstructionScript; 	//[Offset: 0x0, Size: 8]
	InheritableComponentHandler* InheritableComponentHandler; 	//[Offset: 0x0, Size: 8]
	StructProperty* UberGraphFramePointerProperty; 	//[Offset: 0x0, Size: 8]
	Function* UberGraphFunction; 	//[Offset: 0x0, Size: 8]
	<FName, structBlueprintCookedComponentInstancingData> CookedComponentInstancingData; //[Offset: 0x0, Size: 80]
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object, Addr: 0x76902d3d00
	structBakedAnimationStateMachine[] BakedStateMachines; //[Offset: 0x0, Size: 16]
	Skeleton* TargetSkeleton; 	//[Offset: 0x0, Size: 8]
	structAnimNotifyEvent[] AnimNotifies; //[Offset: 0x0, Size: 16]
	<FName, structCachedPoseIndices> OrderedSavedPoseIndicesMap; //[Offset: 0x0, Size: 80]
	FName[] SyncGroupNames; //[Offset: 0x0, Size: 16]
	structExposedValueHandler[] EvaluateGraphExposedInputs; //[Offset: 0x0, Size: 16]
	<FName, structGraphAssetPlayerInformation> GraphAssetPlayerInformation; //[Offset: 0x0, Size: 80]
	<FName, structAnimGraphBlendOptions> GraphBlendOptions; //[Offset: 0x0, Size: 80]
	PropertyAccessLibrary StructProperty; 	//[Offset: 0x0, Size: 200]
Class: AnimBoneCompressionCodec.Object, Addr: 0x76902d3a80
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
Class: AnimBoneCompressionSettings.Object, Addr: 0x76902d3800
	AnimBoneCompressionCodec*[] Codecs; //[Offset: 0x0, Size: 16]
Class: AnimClassData.Object, Addr: 0x76902d3580
	structBakedAnimationStateMachine[] BakedStateMachines; //[Offset: 0x0, Size: 16]
	Skeleton* TargetSkeleton; 	//[Offset: 0x0, Size: 8]
	structAnimNotifyEvent[] AnimNotifies; //[Offset: 0x0, Size: 16]
	<FName, structCachedPoseIndices> OrderedSavedPoseIndicesMap; //[Offset: 0x0, Size: 80]
	structAnimBlueprintFunction[] AnimBlueprintFunctions; //[Offset: 0x0, Size: 16]
	structAnimBlueprintFunctionData[] AnimBlueprintFunctionData; //[Offset: 0x0, Size: 16]
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties; //[Offset: 0x0, Size: 16]
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties; //[Offset: 0x0, Size: 16]
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties; //[Offset: 0x0, Size: 16]
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties; //[Offset: 0x0, Size: 16]
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties; //[Offset: 0x0, Size: 16]
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties; //[Offset: 0x0, Size: 16]
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties; //[Offset: 0x0, Size: 16]
	<FName, structGraphAssetPlayerInformation> GraphNameAssetPlayers; //[Offset: 0x0, Size: 80]
	FName[] SyncGroupNames; //[Offset: 0x0, Size: 16]
	structExposedValueHandler[] EvaluateGraphExposedInputs; //[Offset: 0x0, Size: 16]
	<FName, structAnimGraphBlendOptions> GraphBlendOptions; //[Offset: 0x0, Size: 80]
	PropertyAccessLibrary StructProperty; 	//[Offset: 0x0, Size: 200]
Class: AnimClassInterface.Interface.Object, Addr: 0x76902d3300
Class: AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d2b80
	structAnimNotifyEvent[] Notifies; //[Offset: 0x0, Size: 16]
	float SequenceLength; 	//[Offset: 0x0, Size: 4]
	float RateScale; 	//[Offset: 0x0, Size: 4]
	RawCurveTracks StructProperty; 	//[Offset: 0x0, Size: 16]
	float GetPlayLength(); //Addr 0x75edfb4470 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac114600
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d2e00
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d3080
	AnimTrack StructProperty; 	//[Offset: 0x0, Size: 16]
Class: AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d2900
	bool bNeedsSkeleton; 	//[Offset: 0x0, Size: 1]
	enum AnimationCompressionFormat TranslationCompressionFormat { //[Offset: 0x0, Size: 1]
		ACF_None = 0
		ACF_Float96NoW = 75006c00000000
		ACF_Fixed48NoW = 63006900000000
		ACF_IntervalFixed32NoW = 3a006400000000
		ACF_Fixed32NoW = 69006e00000000
		ACF_Float32NoW = 72007000000000
		ACF_Identity = 69007400000000
		ACF_MAX = 58004100000000
	};
	enum AnimationCompressionFormat RotationCompressionFormat { //[Offset: 0x0, Size: 1]
		ACF_None = 0
		ACF_Float96NoW = 75006c00000000
		ACF_Fixed48NoW = 63006900000000
		ACF_IntervalFixed32NoW = 3a006400000000
		ACF_Fixed32NoW = 69006e00000000
		ACF_Float32NoW = 72007000000000
		ACF_Identity = 69007400000000
		ACF_MAX = 58004100000000
	};
	enum AnimationCompressionFormat ScaleCompressionFormat { //[Offset: 0x0, Size: 1]
		ACF_None = 0
		ACF_Float96NoW = 75006c00000000
		ACF_Fixed48NoW = 63006900000000
		ACF_IntervalFixed32NoW = 3a006400000000
		ACF_Fixed32NoW = 69006e00000000
		ACF_Float32NoW = 72007000000000
		ACF_Identity = 69007400000000
		ACF_MAX = 58004100000000
	};
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d2680
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d2400
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d1f00
	float MaxPosDiff; 	//[Offset: 0x0, Size: 4]
	float MaxAngleDiff; 	//[Offset: 0x0, Size: 4]
	float MaxScaleDiff; 	//[Offset: 0x0, Size: 4]
	float MaxEffectorDiff; 	//[Offset: 0x0, Size: 4]
	float MinEffectorDiff; 	//[Offset: 0x0, Size: 4]
	float EffectorDiffSocket; 	//[Offset: 0x0, Size: 4]
	float ParentKeyScale; 	//[Offset: 0x0, Size: 4]
	bool bRetarget; 	//[Offset: 0x0, Size: 1]
	bool bActuallyFilterLinearKeys; 	//[Offset: 0x0, Size: 1]
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d2180
	float MaxZeroingThreshold; 	//[Offset: 0x0, Size: 4]
	float MaxPosDiffBitwise; 	//[Offset: 0x0, Size: 4]
	float MaxAngleDiffBitwise; 	//[Offset: 0x0, Size: 4]
	float MaxScaleDiffBitwise; 	//[Offset: 0x0, Size: 4]
	AllowedRotationFormats(ByteProperty)[] AllowedRotationFormats; //[Offset: 0x0, Size: 16]
	AllowedTranslationFormats(ByteProperty)[] AllowedTranslationFormats; //[Offset: 0x0, Size: 16]
	AllowedScaleFormats(ByteProperty)[] AllowedScaleFormats; //[Offset: 0x0, Size: 16]
	bool bResampleAnimation; 	//[Offset: 0x0, Size: 1]
	float ResampledFramerate; 	//[Offset: 0x0, Size: 4]
	int MinKeysForResampling; 	//[Offset: 0x0, Size: 4]
	bool bUseAdaptiveError; 	//[Offset: 0x0, Size: 1]
	bool bUseOverrideForEndEffectors; 	//[Offset: 0x0, Size: 1]
	int TrackHeightBias; 	//[Offset: 0x0, Size: 4]
	float ParentingDivisor; 	//[Offset: 0x0, Size: 4]
	float ParentingDivisorExponent; 	//[Offset: 0x0, Size: 4]
	bool bUseAdaptiveError2; 	//[Offset: 0x0, Size: 1]
	float RotationErrorSourceRatio; 	//[Offset: 0x0, Size: 4]
	float TranslationErrorSourceRatio; 	//[Offset: 0x0, Size: 4]
	float ScaleErrorSourceRatio; 	//[Offset: 0x0, Size: 4]
	float MaxErrorPerTrackRatio; 	//[Offset: 0x0, Size: 4]
	float PerturbationProbeSize; 	//[Offset: 0x0, Size: 4]
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d1c80
	int MinKeys; 	//[Offset: 0x0, Size: 4]
	bool bStartAtSecondKey; 	//[Offset: 0x0, Size: 1]
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object, Addr: 0x76902d1a00
	float MaxPosDiff; 	//[Offset: 0x0, Size: 4]
	float MaxAngleDiff; 	//[Offset: 0x0, Size: 4]
	float MaxScaleDiff; 	//[Offset: 0x0, Size: 4]
Class: AnimCurveCompressionCodec.Object, Addr: 0x76902d1780
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object, Addr: 0x76902d1500
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object, Addr: 0x76902d1280
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object, Addr: 0x76902d1000
Class: AnimCurveCompressionSettings.Object, Addr: 0x76902d0d80
	AnimCurveCompressionCodec* Codec; 	//[Offset: 0x0, Size: 8]
Class: AnimInstance.Object, Addr: 0x75a5277e00
	Skeleton* CurrentSkeleton; 	//[Offset: 0x0, Size: 8]
	enum ERootMotionMode RootMotionMode { //[Offset: 0x0, Size: 1]
		NoRootMotionExtraction = 0
		IgnoreRootMotion = 61006d00000000
		RootMotionFromEverything = 73007300000000
		RootMotionFromMontagesOnly = 6400000000
		ERootMotionMode_MAX = 0
	};
	bool bUseMultiThreadedAnimationUpdate; 	//[Offset: 0x0, Size: 1]
	bool bUsingCopyPoseFromMesh; 	//[Offset: 0x0, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances; 	//[Offset: 0x0, Size: 1]
	bool bPropagateNotifiesToLinkedInstances; 	//[Offset: 0x0, Size: 1]
	bool bQueueMontageEvents; 	//[Offset: 0x0, Size: 1]
	delegate OnAnimationNotify; 	//[Offset: 0x0, Size: 16]
	delegate OnMontageBlendingOut; 	//[Offset: 0x0, Size: 16]
	delegate OnMontageStarted; 	//[Offset: 0x0, Size: 16]
	delegate OnMontageEnded; 	//[Offset: 0x0, Size: 16]
	delegate OnMontageSectionEnded; 	//[Offset: 0x0, Size: 16]
	delegate OnAllMontageInstancesEnded; 	//[Offset: 0x0, Size: 16]
	AnimNotifyQueue StructProperty; 	//[Offset: 0x0, Size: 112]
	structAnimNotifyEvent[] ActiveAnimNotifyState; //[Offset: 0x0, Size: 16]
	Void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); //Addr 0x75edf9b988 [Final|BlueprintAuthorityOly|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac475800
Class: AnimLayerInterface.Interface.Object, Addr: 0x76902d0b00
Class: AnimMetaData.Object, Addr: 0x76902d0880
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d0600
	AlphaBlend StructProperty; 	//[Offset: 0x0, Size: 48]
	float BlendInTime; 	//[Offset: 0x0, Size: 4]
	AlphaBlend StructProperty; 	//[Offset: 0x0, Size: 48]
	float BlendOutTime; 	//[Offset: 0x0, Size: 4]
	float BlendOutTriggerTime; 	//[Offset: 0x0, Size: 4]
	FName SyncGroup; 	//[Offset: 0x0, Size: 12]
	int SyncSlotIndex; 	//[Offset: 0x0, Size: 4]
	MarkerSyncData StructProperty; 	//[Offset: 0x0, Size: 32]
	structCompositeSection[] CompositeSections; //[Offset: 0x0, Size: 16]
	structSlotAnimationTrack[] SlotAnimTracks; //[Offset: 0x0, Size: 16]
	structBranchingPoint[] BranchingPoints; //[Offset: 0x0, Size: 16]
	bool bEnableRootMotionTranslation; 	//[Offset: 0x0, Size: 1]
	bool bEnableRootMotionRotation; 	//[Offset: 0x0, Size: 1]
	bool bEnableAutoBlendOut; 	//[Offset: 0x0, Size: 1]
	enum ERootMotionRootLock RootMotionRootLock { //[Offset: 0x0, Size: 1]
		RefPose = 0
		AnimFirstFrame = 74006f00000000
		Zero = 6f004c00000000
		ERootMotionRootLock_MAX = 0
	};
	structBranchingPointMarker[] BranchingPointMarkers; //[Offset: 0x0, Size: 16]
	int[] BranchingPointStateNotifyIndices; //[Offset: 0x0, Size: 16]
	TimeStretchCurve StructProperty; 	//[Offset: 0x0, Size: 40]
	FName TimeStretchCurveName; 	//[Offset: 0x0, Size: 12]
	bool IsValidSectionName(FName InSectionName); //Addr 0x75edfa8bbc [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac118000
Class: AnimNotify.Object, Addr: 0x7690244480
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation); //Addr 0x75ec080c04 [Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75ac75ee00
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object, Addr: 0x76902d0380
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object, Addr: 0x76902d0100
	ParticleSystem* PSTemplate; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool Attached; 	//[Offset: 0x0, Size: 1]
	FName SocketName; 	//[Offset: 0x0, Size: 12]
Class: AnimNotify_PlaySound.AnimNotify.Object, Addr: 0x76902da380
	SoundBase* Sound; 	//[Offset: 0x0, Size: 8]
	float VolumeMultiplier; 	//[Offset: 0x0, Size: 4]
	float PitchMultiplier; 	//[Offset: 0x0, Size: 4]
	bool bFollow; 	//[Offset: 0x0, Size: 1]
	FName AttachName; 	//[Offset: 0x0, Size: 12]
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object, Addr: 0x76902da100
Class: AnimNotify_ResetDynamics.AnimNotify.Object, Addr: 0x76902d9e80
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object, Addr: 0x76902d9c00
Class: AnimNotifyState.Object, Addr: 0x7690243f80
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime); //Addr 0x75ec080c04 [Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75ac75e900
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object, Addr: 0x76902d9980
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object, Addr: 0x76902d9700
	ParticleSystem* PSTemplate; 	//[Offset: 0x0, Size: 8]
	FName SocketName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bDestroyAtEnd; 	//[Offset: 0x0, Size: 1]
Class: AnimNotifyState_Trail.AnimNotifyState.Object, Addr: 0x76902d9480
	ParticleSystem* PSTemplate; 	//[Offset: 0x0, Size: 8]
	FName FirstSocketName; 	//[Offset: 0x0, Size: 12]
	FName SecondSocketName; 	//[Offset: 0x0, Size: 12]
	enum ETrailWidthMode WidthScaleMode { //[Offset: 0x0, Size: 1]
		ETrailWidthMode_FromCentre = 0
		ETrailWidthMode_FromFirst = 74007200000000
		ETrailWidthMode_FromSecond = 6f006900000000
		ETrailWidthMode_MAX = 0
	};
	FName WidthScaleCurve; 	//[Offset: 0x0, Size: 12]
	bool bRecycleSpawnedSystems; 	//[Offset: 0x0, Size: 1]
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation); //Addr 0x75ec080c04 [Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75ac117f00
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d9200
	int NumFrames; 	//[Offset: 0x0, Size: 4]
	structTrackToSkeletonMap[] TrackToSkeletonMapTable; //[Offset: 0x0, Size: 16]
	AnimBoneCompressionSettings* BoneCompressionSettings; 	//[Offset: 0x0, Size: 8]
	AnimCurveCompressionSettings* CurveCompressionSettings; 	//[Offset: 0x0, Size: 8]
	enum EAdditiveAnimationType AdditiveAnimType { //[Offset: 0x0, Size: 1]
		AAT_None = 0
		AAT_LocalSpaceBase = 45003a00000000
		AAT_RotationOffsetMeshSpace = 70004f00000000
		AAT_MAX = 4d000000000000
	};
	enum EAdditiveBasePoseType RefPoseType { //[Offset: 0x0, Size: 1]
		ABPT_None = 0
		ABPT_RefPose = 76006500000000
		ABPT_AnimScaled = 6e006f00000000
		ABPT_AnimFrame = 70007000000000
		ABPT_MAX = 68007400000000
	};
	AnimSequence* RefPoseSeq; 	//[Offset: 0x0, Size: 8]
	int RefFrameIndex; 	//[Offset: 0x0, Size: 4]
	FName RetargetSource; 	//[Offset: 0x0, Size: 12]
	enum EAnimInterpolationType Interpolation { //[Offset: 0x0, Size: 1]
		Linear = 0
		Step = 5800000000
		EAnimInterpolationType_MAX = 0
	};
	bool bEnableRootMotion; 	//[Offset: 0x0, Size: 1]
	enum ERootMotionRootLock RootMotionRootLock { //[Offset: 0x0, Size: 1]
		RefPose = 0
		AnimFirstFrame = 74006f00000000
		Zero = 6f004c00000000
		ERootMotionRootLock_MAX = 0
	};
	bool bForceRootLock; 	//[Offset: 0x0, Size: 1]
	bool bUseNormalizedRootMotionScale; 	//[Offset: 0x0, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage; 	//[Offset: 0x0, Size: 1]
	structAnimSyncMarker[] AuthoredSyncMarkers; //[Offset: 0x0, Size: 16]
	structBakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData; //[Offset: 0x0, Size: 16]
Class: AnimSet.Object, Addr: 0x76902d8f80
	bool bAnimRotationOnly; 	//[Offset: 0x0, Size: 1]
	FName[] TrackBoneNames; //[Offset: 0x0, Size: 16]
	structAnimSetMeshLinkup[] LinkupCache; //[Offset: 0x0, Size: 16]
	BoneUseAnimTranslation(ByteProperty)[] BoneUseAnimTranslation; //[Offset: 0x0, Size: 16]
	ForceUseMeshTranslation(ByteProperty)[] ForceUseMeshTranslation; //[Offset: 0x0, Size: 16]
	FName[] UseTranslationBoneNames; //[Offset: 0x0, Size: 16]
	FName[] ForceMeshTranslationBoneNames; //[Offset: 0x0, Size: 16]
	FName PreviewSkelMeshName; 	//[Offset: 0x0, Size: 12]
	FName BestRatioSkelMeshName; 	//[Offset: 0x0, Size: 12]
Class: AnimSingleNodeInstance.AnimInstance.Object, Addr: 0x76902d8d00
	AnimationAsset* CurrentAsset; 	//[Offset: 0x0, Size: 8]
	delegate PostEvaluateAnimEvent; 	//[Offset: 0x0, Size: 20]
	Void StopAnim(); //Addr 0x75edfb4c64 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac117200
Class: AnimStateMachineTypes.Object, Addr: 0x76902d8a80
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object, Addr: 0x76902d8800
	int NumFrames; 	//[Offset: 0x0, Size: 4]
	enum EAnimInterpolationType Interpolation { //[Offset: 0x0, Size: 1]
		Linear = 0
		Step = 5800000000
		EAnimInterpolationType_MAX = 0
	};
	FName RetargetSource; 	//[Offset: 0x0, Size: 12]
	AnimBoneCompressionSettings* BoneCompressionSettings; 	//[Offset: 0x0, Size: 8]
	AnimCurveCompressionSettings* CurveCompressionSettings; 	//[Offset: 0x0, Size: 8]
	bool bEnableRootMotion; 	//[Offset: 0x0, Size: 1]
	enum ERootMotionRootLock RootMotionRootLock { //[Offset: 0x0, Size: 1]
		RefPose = 0
		AnimFirstFrame = 74006f00000000
		Zero = 6f004c00000000
		ERootMotionRootLock_MAX = 0
	};
	bool bForceRootLock; 	//[Offset: 0x0, Size: 1]
	bool bUseNormalizedRootMotionScale; 	//[Offset: 0x0, Size: 1]
Class: ApplicationLifecycleComponent.ActorComponent.Object, Addr: 0x76902d8580
	delegate ApplicationWillDeactivateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationHasReactivatedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationWillEnterBackgroundDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationHasEnteredForegroundDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationWillTerminateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationShouldUnloadResourcesDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationReceivedStartupArgumentsDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnTemperatureChangeDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnLowPowerModeDelegate; 	//[Offset: 0x0, Size: 16]
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a5277400
	float MinDrawDistance; 	//[Offset: 0x0, Size: 4]
	float LDMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
	float CachedMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
	enum ESceneDepthPriorityGroup DepthPriorityGroup { //[Offset: 0x0, Size: 1]
		SDPG_World = 0
		SDPG_Foreground = 6e006500000000
		SDPG_MAX = 69007200000000
	};
	enum ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup { //[Offset: 0x0, Size: 1]
		SDPG_World = 0
		SDPG_Foreground = 6e006500000000
		SDPG_MAX = 69007200000000
	};
	enum EIndirectLightingCacheQuality IndirectLightingCacheQuality { //[Offset: 0x0, Size: 1]
		ILCQ_Off = 0
		ILCQ_Point = 6c006300000000
		ILCQ_Volume = 65006e00000000
		ILCQ_MAX = 0
	};
	enum ELightmapType LightmapType { //[Offset: 0x0, Size: 1]
		Default = 0
		ForceSurface = 6c006300000000
		ForceVolumetric = 65006e00000000
		ELightmapType_MAX = 0
	};
	bool bUseMaxLODAsImposter; 	//[Offset: 0x0, Size: 1]
	bool bBatchImpostersAsInstances; 	//[Offset: 0x0, Size: 1]
	bool bNeverDistanceCull; 	//[Offset: 0x0, Size: 1]
	int MobileCSMFirstCascadeReduceLOD; 	//[Offset: 0x0, Size: 4]
	int MobileCSMSecondCascadeReduceLOD; 	//[Offset: 0x0, Size: 4]
	int MobileCSMThirdCascadeReduceLOD; 	//[Offset: 0x0, Size: 4]
	int ParaboloidCaptureForceLOD; 	//[Offset: 0x0, Size: 4]
	bool bAlwaysCreatePhysicsState; 	//[Offset: 0x0, Size: 1]
	bool bGenerateOverlapEvents; 	//[Offset: 0x0, Size: 1]
	bool bMultiBodyOverlap; 	//[Offset: 0x0, Size: 1]
	bool bTraceComplexOnMove; 	//[Offset: 0x0, Size: 1]
	bool bReturnMaterialOnMove; 	//[Offset: 0x0, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup; 	//[Offset: 0x0, Size: 1]
	bool bAllowCullDistanceVolume; 	//[Offset: 0x0, Size: 1]
	bool bHasMobileVelocityMeshes; 	//[Offset: 0x0, Size: 1]
	bool bIsForeground; 	//[Offset: 0x0, Size: 1]
	bool bCastMobileSSR; 	//[Offset: 0x0, Size: 1]
	bool bVisibleInReflectionCaptures; 	//[Offset: 0x0, Size: 1]
	bool bVisibleInRealTimeSkyCaptures; 	//[Offset: 0x0, Size: 1]
	bool bVisibleInRayTracing; 	//[Offset: 0x0, Size: 1]
	bool bRenderInMainPass; 	//[Offset: 0x0, Size: 1]
	bool bRenderInWidget3DPass; 	//[Offset: 0x0, Size: 1]
	bool bRenderInDepthPass; 	//[Offset: 0x0, Size: 1]
	bool bReceivesDecals; 	//[Offset: 0x0, Size: 1]
	bool bOwnerNoSee; 	//[Offset: 0x0, Size: 1]
	bool bOnlyOwnerSee; 	//[Offset: 0x0, Size: 1]
	bool bTreatAsBackgroundForOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bUseAsOccluder; 	//[Offset: 0x0, Size: 1]
	bool bSelectable; 	//[Offset: 0x0, Size: 1]
	bool bForceMipStreaming; 	//[Offset: 0x0, Size: 1]
	bool bHasPerInstanceHitProxies; 	//[Offset: 0x0, Size: 1]
	bool CastShadow; 	//[Offset: 0x0, Size: 1]
	bool bAffectDynamicIndirectLighting; 	//[Offset: 0x0, Size: 1]
	bool bAffectDistanceFieldLighting; 	//[Offset: 0x0, Size: 1]
	bool bCastDynamicShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastMixedShadowMobile; 	//[Offset: 0x0, Size: 1]
	bool bCastStaticShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastVolumetricTranslucentShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastContactShadow; 	//[Offset: 0x0, Size: 1]
	bool bSelfShadowOnly; 	//[Offset: 0x0, Size: 1]
	bool bCastFarShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastInsetShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastCinematicShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastHiddenShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowAsTwoSided; 	//[Offset: 0x0, Size: 1]
	enum EPerObjectShadowChannel PerObjectShadowChannel { //[Offset: 0x0, Size: 1]
		EPOSC_None = 0
		EPOSC_First = 52006500000000
		EPOSC_Second = 6c006100000000
		EPOSC_Third = 62006100000000
		EPOSC_MAX = 58004100000000
	};
	enum EPerObjectShadowChannel PerObjectShadowReceiverChannel { //[Offset: 0x0, Size: 1]
		EPOSC_None = 0
		EPOSC_First = 52006500000000
		EPOSC_Second = 6c006100000000
		EPOSC_Third = 62006100000000
		EPOSC_MAX = 58004100000000
	};
	bool bLightAsIfStatic; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysComputeGI; 	//[Offset: 0x0, Size: 1]
	bool bLightAttachmentsAsGroup; 	//[Offset: 0x0, Size: 1]
	bool bExcludeFromLightAttachmentGroup; 	//[Offset: 0x0, Size: 1]
	bool bReceiveMobileCSMShadows; 	//[Offset: 0x0, Size: 1]
	bool bSingleSampleShadowFromStationaryLights; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreRadialImpulse; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreRadialForce; 	//[Offset: 0x0, Size: 1]
	bool bApplyImpulseOnDamage; 	//[Offset: 0x0, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy; 	//[Offset: 0x0, Size: 1]
	bool bFillCollisionUnderneathForNavmesh; 	//[Offset: 0x0, Size: 1]
	bool AlwaysLoadOnClient; 	//[Offset: 0x0, Size: 1]
	bool AlwaysLoadOnServer; 	//[Offset: 0x0, Size: 1]
	bool bUseEditorCompositing; 	//[Offset: 0x0, Size: 1]
	bool bRenderCustomDepth; 	//[Offset: 0x0, Size: 1]
	bool bNotCulledByPVS; 	//[Offset: 0x0, Size: 1]
	bool bRenderSpinMotionBlur; 	//[Offset: 0x0, Size: 1]
	bool bRenderAsGhost; 	//[Offset: 0x0, Size: 1]
	float SpinMotionBlurAngularSpeed; 	//[Offset: 0x0, Size: 4]
	float GhostAlpha; 	//[Offset: 0x0, Size: 4]
	int SceneCaptureHiddenChannelFlag; 	//[Offset: 0x0, Size: 4]
	enum EHasCustomNavigableGeometry bHasCustomNavigableGeometry { //[Offset: 0x0, Size: 1]
		No = 0
		Yes = 43007300000000
		EvenIfNotCollidable = 62006100000000
		DontExport = 58000000000000
		EHasCustomNavigableGeometry_MAX = 0
	};
	enum ECanBeCharacterBase CanCharacterStepUpOn { //[Offset: 0x0, Size: 1]
		ECB_No = 0
		ECB_Yes = 43007300000000
		ECB_Owner = 62006100000000
		ECB_MAX = 58000000000000
	};
	LightingChannels StructProperty; 	//[Offset: 0x0, Size: 1]
	enum ERendererStencilMask CustomDepthStencilWriteMask { //[Offset: 0x0, Size: 1]
		ERSM_Default = 0
		ERSM = 100
		ERSM = 2
		ERSM = 3
		ERSM = 5
		ERSM = 9
		ERSM = 11
		ERSM = 21
		ERSM = 41
		ERSM = 81
		ERSM_MAX = 0
	};
	int CustomDepthStencilValue; 	//[Offset: 0x0, Size: 4]
	float[] OverrideScreenSize; //[Offset: 0x0, Size: 16]
	CustomPrimitiveData StructProperty; 	//[Offset: 0x0, Size: 16]
	CustomPrimitiveData StructProperty; 	//[Offset: 0x0, Size: 16]
	int TranslucencySortPriority; 	//[Offset: 0x0, Size: 4]
	int VisibilityId; 	//[Offset: 0x0, Size: 4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures; //[Offset: 0x0, Size: 16]
	int8 VirtualTextureLodBias; 	//[Offset: 0x0, Size: 1]
	int8 VirtualTextureCullMips; 	//[Offset: 0x0, Size: 1]
	int8 VirtualTextureMinCoverage; 	//[Offset: 0x0, Size: 1]
	enum ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType { //[Offset: 0x0, Size: 1]
		Never = 0
		Exclusive = 74006100000000
		Always = 72007200000000
		ERuntimeVirtualTextureMainPassType_MAX = 0
	};
	float LpvBiasMultiplier; 	//[Offset: 0x0, Size: 4]
	float BoundsScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Actor*[] MoveIgnoreActors; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] MoveIgnoreComponents; //[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	delegate OnComponentHit; 	//[Offset: 0x0, Size: 1]
	delegate OnComponentBeginOverlap; 	//[Offset: 0x0, Size: 1]
	delegate OnComponentEndOverlap; 	//[Offset: 0x0, Size: 1]
	delegate OnComponentWake; 	//[Offset: 0x0, Size: 1]
	delegate OnComponentSleep; 	//[Offset: 0x0, Size: 1]
	delegate OnBeginCursorOver; 	//[Offset: 0x0, Size: 1]
	delegate OnEndCursorOver; 	//[Offset: 0x0, Size: 1]
	delegate OnClicked; 	//[Offset: 0x0, Size: 1]
	delegate OnReleased; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchBegin; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchEnd; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchEnter; 	//[Offset: 0x0, Size: 1]
	delegate OnInputTouchLeave; 	//[Offset: 0x0, Size: 1]
	PrimitiveComponent* LODParentPrimitive; 	//[Offset: 0x0, Size: 8]
	bool WasRecentlyRendered(float Tolerance); //Addr 0x75ee1a90e8 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75b0ca9100
Class: PhysicsSettingsCore.DeveloperSettings.Object, Addr: 0x7690270b00
	float DefaultGravityZ; 	//[Offset: 0x0, Size: 4]
	float DefaultTerminalVelocity; 	//[Offset: 0x0, Size: 4]
	float DefaultFluidFriction; 	//[Offset: 0x0, Size: 4]
	int SimulateScratchMemorySize; 	//[Offset: 0x0, Size: 4]
	int RagdollAggregateThreshold; 	//[Offset: 0x0, Size: 4]
	float TriangleMeshTriangleMinAreaThreshold; 	//[Offset: 0x0, Size: 4]
	bool bEnableShapeSharing; 	//[Offset: 0x0, Size: 1]
	bool bEnablePCM; 	//[Offset: 0x0, Size: 1]
	bool bEnableStabilization; 	//[Offset: 0x0, Size: 1]
	bool bWarnMissingLocks; 	//[Offset: 0x0, Size: 1]
	bool bEnable2DPhysics; 	//[Offset: 0x0, Size: 1]
	bool bDefaultHasComplexCollision; 	//[Offset: 0x0, Size: 1]
	float BounceThresholdVelocity; 	//[Offset: 0x0, Size: 4]
	enum EFrictionCombineMode FrictionCombineMode { //[Offset: 0x0, Size: 1]
		Average = 0
		Min = 2f006500000000
		Multiply = 6d006f00000000
		Max = 6e006f00000000
		EFrictionCombineMode_MAX = 0
	};
	enum EFrictionCombineMode RestitutionCombineMode { //[Offset: 0x0, Size: 1]
		Average = 0
		Min = 2f006500000000
		Multiply = 6d006f00000000
		Max = 6e006f00000000
		EFrictionCombineMode_MAX = 0
	};
	float MaxAngularVelocity; 	//[Offset: 0x0, Size: 4]
	float MaxDepenetrationVelocity; 	//[Offset: 0x0, Size: 4]
	float ContactOffsetMultiplier; 	//[Offset: 0x0, Size: 4]
	float MinContactOffset; 	//[Offset: 0x0, Size: 4]
	float MaxContactOffset; 	//[Offset: 0x0, Size: 4]
	bool bSimulateSkeletalMeshOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	enum ECollisionTraceFlag DefaultShapeComplexity { //[Offset: 0x0, Size: 1]
		CTF_UseDefault = 0
		CTF_UseSimpleAndComplex = 43006e00000000
		CTF_UseSimpleAsComplex = 47004500000000
		CTF_UseComplexAsSimple = 65006c00000000
		CTF_MAX = 79005400000000
	};
	ChaosSolverConfiguration StructProperty; 	//[Offset: 0x0, Size: 104]
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object, Addr: 0x7690380b00
	RigidBodyErrorCorrection StructProperty; 	//[Offset: 0x0, Size: 52]
	enum ESettingsLockedAxis LockedAxis { //[Offset: 0x0, Size: 1]
		None = 0
		X = 65005200000000
		Y = 72006100000000
		Z = 69007300000000
		Invalid = 4d005f00000000
		ESettingsLockedAxis_MAX = 0
	};
	enum ESettingsDOF DefaultDegreesOfFreedom { //[Offset: 0x0, Size: 1]
		Full3D = 0
		YZPlane = 3a007300000000
		XZPlane = 6f004c00000000
		XYPlane = 58004100000000
		ESettingsDOF_MAX = 0
	};
	bool bSuppressFaceRemapTable; 	//[Offset: 0x0, Size: 1]
	bool bSupportUVFromHitResults; 	//[Offset: 0x0, Size: 1]
	bool bDisableActiveActors; 	//[Offset: 0x0, Size: 1]
	bool bDisableKinematicStaticPairs; 	//[Offset: 0x0, Size: 1]
	bool bDisableKinematicKinematicPairs; 	//[Offset: 0x0, Size: 1]
	bool bDisableCCD; 	//[Offset: 0x0, Size: 1]
	bool bEnableEnhancedDeterminism; 	//[Offset: 0x0, Size: 1]
	float AnimPhysicsMinDeltaTime; 	//[Offset: 0x0, Size: 4]
	bool bSimulateAnimPhysicsAfterReset; 	//[Offset: 0x0, Size: 1]
	float MaxPhysicsDeltaTime; 	//[Offset: 0x0, Size: 4]
	bool bSubstepping; 	//[Offset: 0x0, Size: 1]
	bool bSubsteppingAsync; 	//[Offset: 0x0, Size: 1]
	float MaxSubstepDeltaTime; 	//[Offset: 0x0, Size: 4]
	int MaxSubsteps; 	//[Offset: 0x0, Size: 4]
	float SyncSceneSmoothingFactor; 	//[Offset: 0x0, Size: 4]
	float InitialAverageFrameRate; 	//[Offset: 0x0, Size: 4]
	int PhysXTreeRebuildRate; 	//[Offset: 0x0, Size: 4]
	structPhysicalSurfaceName[] PhysicalSurfaces; //[Offset: 0x0, Size: 16]
	BroadphaseSettings StructProperty; 	//[Offset: 0x0, Size: 64]
	float MinDeltaVelocityForHitEvents; 	//[Offset: 0x0, Size: 4]
	ChaosPhysicsSettings StructProperty; 	//[Offset: 0x0, Size: 3]
Class: CollisionProfile.DeveloperSettings.Object, Addr: 0x76902e3300
	structCollisionResponseTemplate[] Profiles; //[Offset: 0x0, Size: 16]
	structCustomChannelSetup[] DefaultChannelResponses; //[Offset: 0x0, Size: 16]
	structCustomProfile[] EditProfiles; //[Offset: 0x0, Size: 16]
	structRedirector[] ProfileRedirects; //[Offset: 0x0, Size: 16]
	structRedirector[] CollisionChannelRedirects; //[Offset: 0x0, Size: 16]
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902d8300
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float ArrowSize; 	//[Offset: 0x0, Size: 4]
	float ArrowLength; 	//[Offset: 0x0, Size: 4]
	float ScreenSize; 	//[Offset: 0x0, Size: 4]
	bool bIsScreenSizeScaled; 	//[Offset: 0x0, Size: 1]
	bool bTreatAsASprite; 	//[Offset: 0x0, Size: 1]
	Void SetArrowColor(structLinearColor NewColor); //Addr 0x75edfbb098 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac117100
Class: AssetExportTask.Object, Addr: 0x76902d8080
	Object* Object; 	//[Offset: 0x0, Size: 8]
	Exporter* Exporter; 	//[Offset: 0x0, Size: 8]
	StrProperty Filename; 	//[Offset: 0x0, Size: 16]
	bool bSelected; 	//[Offset: 0x0, Size: 1]
	bool bReplaceIdentical; 	//[Offset: 0x0, Size: 1]
	bool bPrompt; 	//[Offset: 0x0, Size: 1]
	bool bAutomated; 	//[Offset: 0x0, Size: 1]
	bool bUseFileArchive; 	//[Offset: 0x0, Size: 1]
	bool bWriteEmptyFiles; 	//[Offset: 0x0, Size: 1]
	Object*[] IgnoreObjectList; //[Offset: 0x0, Size: 16]
	Object* Options; 	//[Offset: 0x0, Size: 8]
	FString[] Errors; //[Offset: 0x0, Size: 16]
Class: AssetImportData.Object, Addr: 0x769021b000
Class: AssetManager.Object, Addr: 0x76901f4c00
	Object*[] ObjectReferenceList; //[Offset: 0x0, Size: 16]
	bool bIsGlobalAsyncScanEnvironment; 	//[Offset: 0x0, Size: 1]
	bool bShouldGuessTypeAndName; 	//[Offset: 0x0, Size: 1]
	bool bShouldUseSynchronousLoad; 	//[Offset: 0x0, Size: 1]
	bool bIsLoadingFromPakFiles; 	//[Offset: 0x0, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad; 	//[Offset: 0x0, Size: 1]
	bool bOnlyCookProductionAssets; 	//[Offset: 0x0, Size: 1]
	bool bIsBulkScanning; 	//[Offset: 0x0, Size: 1]
	bool bIsPrimaryAssetDirectoryCurrent; 	//[Offset: 0x0, Size: 1]
	bool bIsManagementDatabaseCurrent; 	//[Offset: 0x0, Size: 1]
	bool bUpdateManagementDatabaseAfterScan; 	//[Offset: 0x0, Size: 1]
	bool bIncludeOnlyOnDiskAssets; 	//[Offset: 0x0, Size: 1]
	bool bHasCompletedInitialScan; 	//[Offset: 0x0, Size: 1]
	int NumberOfSpawnedNotifications; 	//[Offset: 0x0, Size: 4]
Class: AssetManagerSettings.DeveloperSettings.Object, Addr: 0x76902d7e00
	structPrimaryAssetTypeInfo[] PrimaryAssetTypesToScan; //[Offset: 0x0, Size: 16]
	structDirectoryPath[] DirectoriesToExclude; //[Offset: 0x0, Size: 16]
	structPrimaryAssetRulesOverride[] PrimaryAssetRules; //[Offset: 0x0, Size: 16]
	structPrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules; //[Offset: 0x0, Size: 16]
	bool bOnlyCookProductionAssets; 	//[Offset: 0x0, Size: 1]
	bool bShouldManagerDetermineTypeAndName; 	//[Offset: 0x0, Size: 1]
	bool bShouldGuessTypeAndNameInEditor; 	//[Offset: 0x0, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad; 	//[Offset: 0x0, Size: 1]
	structAssetManagerRedirect[] PrimaryAssetIdRedirects; //[Offset: 0x0, Size: 16]
	structAssetManagerRedirect[] PrimaryAssetTypeRedirects; //[Offset: 0x0, Size: 16]
	structAssetManagerRedirect[] AssetPathRedirects; //[Offset: 0x0, Size: 16]
	FName MetaDataTagsForAssetRegistry; //[Offset: 0x0, Size: 80]
Class: AssetMappingTable.Object, Addr: 0x76902d7b80
	structAssetMapping[] MappedAssets; //[Offset: 0x0, Size: 16]
Class: AssetUserData.Object, Addr: 0x7690223a80
Class: BlueprintAsyncActionBase.Object, Addr: 0x76901e0880
	Void Activate(); //Addr 0x75edfd3fa0 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b9df00
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object, Addr: 0x76902d7900
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	SaveGame* SaveGameObject; 	//[Offset: 0x0, Size: 8]
	AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, constint UserIndex); //Addr 0x75edfc1078 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116f00
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d7680
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d7400
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, structPrimaryAssetId PrimaryAsset, constoutrefFName[] LoadBundles); //Addr 0x75edfc18fc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116e00
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d7180
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, structPrimaryAssetId PrimaryAsset, constoutrefFName[] LoadBundles); //Addr 0x75edfc1e30 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116d00
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d6f00
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, constoutrefstructPrimaryAssetId[] PrimaryAssetList, constoutrefFName[] LoadBundles); //Addr 0x75edfc2364 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116c00
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d6c80
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, constoutrefstructPrimaryAssetId[] PrimaryAssetList, constoutrefFName[] LoadBundles); //Addr 0x75edfc28a0 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116b00
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object, Addr: 0x76902d6a00
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, constoutrefstructPrimaryAssetId[] PrimaryAssetList, constoutrefFName[] AddBundles, constoutrefFName[] RemoveBundles); //Addr 0x75edfc2ddc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac116900
Class: Info.Actor.Object, Addr: 0x75a5271500
Class: AtmosphericFog.Info.Actor.Object, Addr: 0x76902d6780
	AtmosphericFogComponent* AtmosphericFogComponent; 	//[Offset: 0x0, Size: 8]
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902d6500
	float SunMultiplier; 	//[Offset: 0x0, Size: 4]
	float FogMultiplier; 	//[Offset: 0x0, Size: 4]
	float DensityMultiplier; 	//[Offset: 0x0, Size: 4]
	float DensityOffset; 	//[Offset: 0x0, Size: 4]
	float DistanceScale; 	//[Offset: 0x0, Size: 4]
	float AltitudeScale; 	//[Offset: 0x0, Size: 4]
	float DistanceOffset; 	//[Offset: 0x0, Size: 4]
	float GroundOffset; 	//[Offset: 0x0, Size: 4]
	float startDistance; 	//[Offset: 0x0, Size: 4]
	float SunDiscScale; 	//[Offset: 0x0, Size: 4]
	float DefaultBrightness; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bDisableSunDisk; 	//[Offset: 0x0, Size: 1]
	bool bAtmosphereAffectsSunIlluminance; 	//[Offset: 0x0, Size: 1]
	bool bDisableGroundScattering; 	//[Offset: 0x0, Size: 1]
	AtmospherePrecomputeParameters StructProperty; 	//[Offset: 0x0, Size: 44]
	Texture2D* TransmittanceTexture; 	//[Offset: 0x0, Size: 8]
	Texture2D* IrradianceTexture; 	//[Offset: 0x0, Size: 8]
	Void StartPrecompute(); //Addr 0x75edfc3988 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac119d00
Class: AudioBus.Object, Addr: 0x76902d6280
	enum EAudioBusChannels AudioBusChannels { //[Offset: 0x0, Size: 1]
		Mono = 0
		Stereo = 4d003a00000000
		EAudioBusChannels_MAX = 0
	};
	bool bIsAutomatic; 	//[Offset: 0x0, Size: 1]
Class: AudioSettings.DeveloperSettings.Object, Addr: 0x76902d6000
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	enum EVoiceSampleRate VoiPSampleRate { //[Offset: 0x0, Size: 4]
		Low16000Hz = 0
		Normal24000Hz = 3a000000000000
		EVoiceSampleRate_MAX = 0
	};
	float DefaultReverbSendLevel; 	//[Offset: 0x0, Size: 4]
	int MaximumConcurrentStreams; 	//[Offset: 0x0, Size: 4]
	float GlobalMinPitchScale; 	//[Offset: 0x0, Size: 4]
	float GlobalMaxPitchScale; 	//[Offset: 0x0, Size: 4]
	structAudioQualitySettings[] QualityLevels; //[Offset: 0x0, Size: 16]
	bool bAllowPlayWhenSilent; 	//[Offset: 0x0, Size: 1]
	bool bDisableMasterEQ; 	//[Offset: 0x0, Size: 1]
	bool bAllowCenterChannel3DPanning; 	//[Offset: 0x0, Size: 1]
	uint32 NumStoppingSources; 	//[Offset: 0x0, Size: 4]
	enum EPanningMethod PanningMethod { //[Offset: 0x0, Size: 1]
		Linear = 0
		EqualPower = 3a000000000000
		EPanningMethod_MAX = 0
	};
	enum EMonoChannelUpmixMethod MonoChannelUpmixMethod { //[Offset: 0x0, Size: 1]
		Linear = 0
		EqualPower = 6f006e00000000
		FullVolume = 78006900000000
		EMonoChannelUpmixMethod_MAX = 0
	};
	StrProperty DialogueFilenameFormat; 	//[Offset: 0x0, Size: 16]
Class: Brush.Actor.Object, Addr: 0x76901d0b00
	enum EBrushType BrushType { //[Offset: 0x0, Size: 1]
		Brush_Default = 0
		Brush_Add = 65007500000000
		Brush_Subtract = 7a006900000000
		Brush_MAX = 65006c00000000
	};
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	int PolyFlags; 	//[Offset: 0x0, Size: 4]
	bool bColored; 	//[Offset: 0x0, Size: 1]
	bool bSolidWhenSelected; 	//[Offset: 0x0, Size: 1]
	bool bPlaceableFromClassBrowser; 	//[Offset: 0x0, Size: 1]
	bool bNotForClientOrServer; 	//[Offset: 0x0, Size: 1]
	Model* Brush; 	//[Offset: 0x0, Size: 8]
	BrushComponent* BrushComponent; 	//[Offset: 0x0, Size: 8]
	bool bInManipulation; 	//[Offset: 0x0, Size: 1]
	structGeomSelection[] SavedSelections; //[Offset: 0x0, Size: 16]
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902dbc80
	Model* Brush; 	//[Offset: 0x0, Size: 8]
	BodySetup* BrushBodySetup; 	//[Offset: 0x0, Size: 8]
Class: Volume.Brush.Actor.Object, Addr: 0x76901d0d80
Class: AudioVolume.Volume.Brush.Actor.Object, Addr: 0x76902d5d80
	float Priority; 	//[Offset: 0x0, Size: 4]
	bool bEnabled; 	//[Offset: 0x3c74b, Size: 1]
	ReverbSettings StructProperty; 	//[Offset: 0x0, Size: 32]
	InteriorSettings StructProperty; 	//[Offset: 0x0, Size: 36]
	structAudioVolumeSubmixSendSettings[] SubmixSendSettings; //[Offset: 0x0, Size: 16]
	structAudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings; //[Offset: 0x0, Size: 16]
	Void SetSubmixSendSettings(constoutrefstructAudioVolumeSubmixSendSettings[] NewSubmixSendSettings); //Addr 0x75edfcab54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac119600
Class: Subsystem.Object, Addr: 0x76901f6c80
Class: WorldSubsystem.Subsystem.Object, Addr: 0x76901f6f00
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x76902d5b00
	Actor*[] ActorsToPoll; //[Offset: 0x0, Size: 16]
	Void OnActorEndPlay(Actor* Actor, EndPlayReason(ByteProperty) EndPlayReason); //Addr 0x75edfcb4ac [Final|Native] // UFieldProperty addr: 0x75ac119500
Class: AutomationTestSettings.Object, Addr: 0x76902d5880
	FString[] EngineTestModules; //[Offset: 0x0, Size: 16]
	FString[] EditorTestModules; //[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	structEditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps; //[Offset: 0x0, Size: 16]
	structSoftObjectPath[] AssetsToOpen; //[Offset: 0x0, Size: 16]
	FString[] MapsToPIETest; //[Offset: 0x0, Size: 16]
	BuildPromotionTestSettings StructProperty; 	//[Offset: 0x0, Size: 496]
	MaterialEditorPromotionSettings StructProperty; 	//[Offset: 0x0, Size: 48]
	ParticleEditorPromotionSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	BlueprintEditorPromotionSettings StructProperty; 	//[Offset: 0x0, Size: 48]
	FString[] TestLevelFolders; //[Offset: 0x0, Size: 16]
	structExternalToolDefinition[] ExternalTools; //[Offset: 0x0, Size: 16]
	structEditorImportExportTestDefinition[] ImportExportTestDefinitions; //[Offset: 0x0, Size: 16]
	structLaunchOnTestSettings[] LaunchOnSettings; //[Offset: 0x0, Size: 16]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	float PIETestDuration; 	//[Offset: 0x0, Size: 4]
Class: AvoidanceManager.Object, Addr: 0x76902d5600
	float DefaultTimeToLive; 	//[Offset: 0x0, Size: 4]
	float LockTimeAfterAvoid; 	//[Offset: 0x0, Size: 4]
	float LockTimeAfterClean; 	//[Offset: 0x0, Size: 4]
	float DeltaTimeToPredict; 	//[Offset: 0x0, Size: 4]
	float ArtificialRadiusExpansion; 	//[Offset: 0x0, Size: 4]
	float TestHeightDifference; 	//[Offset: 0x0, Size: 4]
	float HeightCheckMargin; 	//[Offset: 0x0, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight); //Addr 0x75edfcc71c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac119100
Class: BandwidthTestActor.Actor.Object, Addr: 0x76902d5380
	BandwidthTestGenerator StructProperty; 	//[Offset: 0x0, Size: 32]
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902df600
	Texture2D* Sprite; 	//[Offset: 0x0, Size: 8]
	bool bIsScreenSizeScaled; 	//[Offset: 0x0, Size: 1]
	float ScreenSize; 	//[Offset: 0x0, Size: 4]
	float U; 	//[Offset: 0x0, Size: 4]
	float UL; 	//[Offset: 0x0, Size: 4]
	float V; 	//[Offset: 0x0, Size: 4]
	float VL; 	//[Offset: 0x0, Size: 4]
	Void SetUV(int NewU, int NewUL, int NewV, int NewVL); //Addr 0x75edfcd2c4 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac118e00
Class: BlendableInterface.Interface.Object, Addr: 0x76902df380
Class: BlendProfile.Object, Addr: 0x76902df100
	Skeleton* OwningSkeleton; 	//[Offset: 0x0, Size: 8]
	structBlendProfileBoneEntry[] ProfileEntries; //[Offset: 0x0, Size: 16]
Class: BlockingVolume.Volume.Brush.Actor.Object, Addr: 0x76902dec00
Class: BlueprintExtension.Object, Addr: 0x76902de980
Class: BlueprintFunctionLibrary.Object, Addr: 0x75a5279980
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902de700
	Void SetMapPropertyByName(Object* Object, FName PropertyName, constoutref<int, int> Value); //Addr 0x75edfd5be8 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac118500
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902de480
	FString VideoCaptureDir(); //Addr 0x75edfdd5a0 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac11ee00
Class: GameInstance.Object, Addr: 0x75a5270d80
	LocalPlayer*[] LocalPlayers; //[Offset: 0x0, Size: 16]
	OnlineSession* OnlineSession; 	//[Offset: 0x0, Size: 8]
	Object*[] ReferencedObjects; //[Offset: 0x0, Size: 16]
	delegate OnPawnControllerChangedDelegates; 	//[Offset: 0x0, Size: 16]
	Void ReceiveShutdown(); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x7616ea1a00
Class: PlatformGameInstance.GameInstance.Object, Addr: 0x76902de200
	delegate ApplicationWillDeactivateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationHasReactivatedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationWillEnterBackgroundDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationHasEnteredForegroundDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationWillTerminateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationShouldUnloadResourcesDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationReceivedStartupArgumentsDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationRegisteredForUserNotificationsDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationReceivedRemoteNotificationDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationReceivedLocalNotificationDelegate; 	//[Offset: 0x0, Size: 16]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; 	//[Offset: 0x0, Size: 16]
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902ddf80
	int ScheduleLocalNotificationFromNow(int inSecondsFromNow, constoutrefFText Title, constoutrefFText Body, constoutrefFText Action, FString ActivationEvent); //Addr 0x75edfe111c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac161f00
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902ddd00
	Void SetSetPropertyByName(Object* Object, FName PropertyName, constoutref<int> Value); //Addr 0x75edfe3248 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac161300
Class: BodySetupCore.Object, Addr: 0x7690271500
	FName BoneName; 	//[Offset: 0x0, Size: 12]
	enum EPhysicsType PhysicsType { //[Offset: 0x0, Size: 1]
		PhysType_Default = 0
		PhysType_Kinematic = 2f006500000000
		PhysType_Simulated = 65007000000000
		PhysType_MAX = 7600000000
	};
	enum ECollisionTraceFlag CollisionTraceFlag { //[Offset: 0x0, Size: 1]
		CTF_UseDefault = 0
		CTF_UseSimpleAndComplex = 43006e00000000
		CTF_UseSimpleAsComplex = 47004500000000
		CTF_UseComplexAsSimple = 65006c00000000
		CTF_MAX = 79005400000000
	};
	enum EBodyCollisionResponse CollisionReponse { //[Offset: 0x0, Size: 1]
		BodyCollision_Enabled = 0
		BodyCollision_Disabled = 6500000000
		BodyCollision_MAX = 800000000
	};
Class: BodySetup.BodySetupCore.Object, Addr: 0x76902dda80
	KAggregateGeom StructProperty; 	//[Offset: 0x0, Size: 88]
	bool bAlwaysFullAnimWeight; 	//[Offset: 0x0, Size: 1]
	bool bConsiderForBounds; 	//[Offset: 0x0, Size: 1]
	bool bMeshCollideAll; 	//[Offset: 0x0, Size: 1]
	bool bDoubleSidedGeometry; 	//[Offset: 0x0, Size: 1]
	bool bGenerateNonMirroredCollision; 	//[Offset: 0x0, Size: 1]
	bool bSharedCookedData; 	//[Offset: 0x0, Size: 1]
	bool bGenerateMirroredCollision; 	//[Offset: 0x0, Size: 1]
	bool bSupportUVsAndFaceRemap; 	//[Offset: 0x0, Size: 1]
	PhysicalMaterial* PhysMaterial; 	//[Offset: 0x0, Size: 8]
	WalkableSlopeOverride StructProperty; 	//[Offset: 0x0, Size: 16]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: BoneMaskFilter.Object, Addr: 0x76902dd800
	structInputBlendPose[] BlendPoses; //[Offset: 0x0, Size: 16]
Class: BookmarkBase.Object, Addr: 0x76902dd300
Class: BookMark.BookmarkBase.Object, Addr: 0x76902dd580
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	FString[] HiddenLevels; //[Offset: 0x0, Size: 16]
Class: BookMark2D.BookmarkBase.Object, Addr: 0x76902dd080
	float Zoom2D; 	//[Offset: 0x0, Size: 4]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
Class: BoundsCopyComponent.ActorComponent.Object, Addr: 0x76902dce00
	Actor* BoundsSourceActor; 	//[Offset: 0x0, Size: 48]
	bool bUseCollidingComponentsForSourceBounds; 	//[Offset: 0x0, Size: 1]
	bool bKeepOwnBoundsScale; 	//[Offset: 0x0, Size: 1]
	bool bUseCollidingComponentsForOwnBounds; 	//[Offset: 0x0, Size: 1]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bCopyXBounds; 	//[Offset: 0x0, Size: 1]
	bool bCopyYBounds; 	//[Offset: 0x0, Size: 1]
	bool bCopyZBounds; 	//[Offset: 0x0, Size: 1]
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024dd00
	BodySetup* ShapeBodySetup; 	//[Offset: 0x0, Size: 8]
	NavAreaBase* AreaClass; 	//[Offset: 0x0, Size: 8]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bDrawOnlyIfSelected; 	//[Offset: 0x0, Size: 1]
	bool bShouldCollideWhenPlacing; 	//[Offset: 0x0, Size: 1]
	bool bDynamicObstacle; 	//[Offset: 0x0, Size: 1]
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024df80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	Void SetBoxExtent(structVector InBoxExtent, bool bUpdateOverlaps); //Addr 0x75edfe4e98 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb7800
Class: ReflectionCapture.Actor.Object, Addr: 0x76902dc900
	ReflectionCaptureComponent* CaptureComponent; 	//[Offset: 0x0, Size: 8]
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object, Addr: 0x76902dcb80
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902dc400
	BillboardComponent* CaptureOffsetComponent; 	//[Offset: 0x0, Size: 8]
	enum EReflectionSourceType ReflectionSourceType { //[Offset: 0x0, Size: 1]
		CapturedScene = 0
		SpecifiedCubemap = 6500000000
		EReflectionSourceType_MAX = 0
	};
	enum EMobileReflectionCompression MobileReflectionCompression { //[Offset: 0x0, Size: 1]
		Default = 0
		On = 68006300000000
		Off = 4d007000000000
		EMobileReflectionCompression_MAX = 0
	};
	TextureCube* Cubemap; 	//[Offset: 0x0, Size: 8]
	float SourceCubemapAngle; 	//[Offset: 0x0, Size: 4]
	float Brightness; 	//[Offset: 0x0, Size: 4]
	bool bModifyMaxValueRGBM; 	//[Offset: 0x0, Size: 1]
	float MaxValueRGBM; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	TextureCube* CachedEncodedHDRCubemap; 	//[Offset: 0x0, Size: 8]
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902dc680
	float BoxTransitionDistance; 	//[Offset: 0x0, Size: 4]
	BoxComponent* PreviewInfluenceBox; 	//[Offset: 0x0, Size: 8]
	BoxComponent* PreviewCaptureBox; 	//[Offset: 0x0, Size: 8]
Class: Breakpoint.Object, Addr: 0x76902dc180
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	EdGraphNode* Node; 	//[Offset: 0x0, Size: 8]
	bool bStepOnce; 	//[Offset: 0x0, Size: 1]
	bool bStepOnce_WasPreviouslyDisabled; 	//[Offset: 0x0, Size: 1]
	bool bStepOnce_RemoveAfterHit; 	//[Offset: 0x0, Size: 1]
Class: BrushBuilder.Object, Addr: 0x76902dbf00
	StrProperty BitmapFilename; 	//[Offset: 0x0, Size: 16]
	StrProperty Tooltip; 	//[Offset: 0x0, Size: 16]
	bool NotifyBadParams; 	//[Offset: 0x0, Size: 1]
	structVector[] Vertices; //[Offset: 0x0, Size: 16]
	structBuilderPoly[] Polys; //[Offset: 0x0, Size: 16]
	FName Layer; 	//[Offset: 0x0, Size: 12]
	bool MergeCoplanars; 	//[Offset: 0x0, Size: 1]
Class: BrushShape.Brush.Actor.Object, Addr: 0x76902dba00
Class: ButtonStyleAsset.Object, Addr: 0x76902db780
	ButtonStyle StructProperty; 	//[Offset: 0x0, Size: 680]
Class: CameraActor.Actor.Object, Addr: 0x75a527dd00
	enum EAutoReceiveInput AutoActivateForPlayer { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Player0 = 0
		Player1 = 0
		Player2 = 0
		Player3 = 0
		Player4 = 0
		Player5 = 0
		Player6 = 0
		Player7 = 0
		EAutoReceiveInput_MAX = 0
	};
	CameraComponent* CameraComponent; 	//[Offset: 0x0, Size: 8]
	SceneComponent* SceneComponent; 	//[Offset: 0x0, Size: 8]
	bool bConstrainAspectRatio; 	//[Offset: 0x0, Size: 1]
	float AspectRatio; 	//[Offset: 0x0, Size: 4]
	float FOVAngle; 	//[Offset: 0x0, Size: 4]
	float PostProcessBlendWeight; 	//[Offset: 0x0, Size: 4]
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	int GetAutoActivatePlayerIndex(); //Addr 0x75edfea540 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac477800
Class: CameraComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902b0b00
	float FieldOfView; 	//[Offset: 0x0, Size: 4]
	float OrthoWidth; 	//[Offset: 0x0, Size: 4]
	float OrthoNearClipPlane; 	//[Offset: 0x0, Size: 4]
	float OrthoFarClipPlane; 	//[Offset: 0x0, Size: 4]
	float AspectRatio; 	//[Offset: 0x0, Size: 4]
	bool bConstrainAspectRatio; 	//[Offset: 0x0, Size: 1]
	bool bUseFieldOfViewForLOD; 	//[Offset: 0x0, Size: 1]
	bool bLockToHmd; 	//[Offset: 0x0, Size: 1]
	bool bUsePawnControlRotation; 	//[Offset: 0x0, Size: 1]
	enum ECameraProjectionMode ProjectionMode { //[Offset: 0x0, Size: 1]
		Perspective = 0
		Orthographic = 4f006700000000
		ECameraProjectionMode_MAX = 0
	};
	float PostProcessBlendWeight; 	//[Offset: 0x0, Size: 4]
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	Void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); //Addr 0x75edfeb9ac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f6600
Class: CameraAnim.Object, Addr: 0x76902db500
	InterpGroup* CameraInterpGroup; 	//[Offset: 0x0, Size: 8]
	float AnimLength; 	//[Offset: 0x0, Size: 4]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	bool bRelativeToInitialTransform; 	//[Offset: 0x0, Size: 1]
	bool bRelativeToInitialFOV; 	//[Offset: 0x0, Size: 1]
	float BaseFOV; 	//[Offset: 0x0, Size: 4]
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	float BasePostProcessBlendWeight; 	//[Offset: 0x0, Size: 4]
Class: CameraAnimInst.Object, Addr: 0x76902db280
	CameraAnim* CamAnim; 	//[Offset: 0x0, Size: 8]
	InterpGroupInst* InterpGroupInst; 	//[Offset: 0x0, Size: 8]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	InterpTrackMove* MoveTrack; 	//[Offset: 0x0, Size: 8]
	InterpTrackInstMove* MoveInst; 	//[Offset: 0x0, Size: 8]
	enum ECameraShakePlaySpace PlaySpace { //[Offset: 0x0, Size: 1]
		CameraLocal = 0
		World = 65006d00000000
		UserDefined = 53007900000000
		ECameraShakePlaySpace_MAX = 0
	};
	Void Stop(bool bImmediate); //Addr 0x75edfead28 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac161000
Class: InterpGroupInst.Object, Addr: 0x76902f7900
	InterpGroup* Group; 	//[Offset: 0x0, Size: 8]
	Actor* GroupActor; 	//[Offset: 0x0, Size: 8]
	InterpTrackInst*[] TrackInst; //[Offset: 0x0, Size: 16]
Class: CameraBlockingVolume.Volume.Brush.Actor.Object, Addr: 0x76902db000
Class: CameraModifier.Object, Addr: 0x76902dad80
	bool bDebug; 	//[Offset: 0x0, Size: 1]
	bool bExclusive; 	//[Offset: 0x0, Size: 1]
	byte Priority; //[Offset: 0x0, Size: 1]
	PlayerCameraManager* CameraOwner; 	//[Offset: 0x0, Size: 8]
	float AlphaInTime; 	//[Offset: 0x0, Size: 4]
	float AlphaOutTime; 	//[Offset: 0x0, Size: 4]
	float Alpha; 	//[Offset: 0x0, Size: 4]
	bool IsDisabled(); //Addr 0x75edfec614 [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac160a00
Class: CameraModifier_CameraShake.CameraModifier.Object, Addr: 0x76902dab00
	structActiveCameraShakeInfo[] ActiveShakes; //[Offset: 0x0, Size: 16]
	<classCameraShakeBase, structPooledCameraShakes> ExpiredPooledShakesMap; //[Offset: 0x0, Size: 80]
	float SplitScreenShakeScale; 	//[Offset: 0x0, Size: 4]
Class: CameraShakeBase.Object, Addr: 0x7690258300
	bool bSingleInstance; 	//[Offset: 0x0, Size: 1]
	float ShakeScale; 	//[Offset: 0x0, Size: 4]
	PlayerCameraManager* CameraManager; 	//[Offset: 0x0, Size: 8]
Class: MatineeCameraShake.CameraShakeBase.Object, Addr: 0x76902da880
	float OscillationDuration; 	//[Offset: 0x0, Size: 4]
	float OscillationBlendInTime; 	//[Offset: 0x0, Size: 4]
	float OscillationBlendOutTime; 	//[Offset: 0x0, Size: 4]
	ROscillator StructProperty; 	//[Offset: 0x0, Size: 36]
	VOscillator StructProperty; 	//[Offset: 0x0, Size: 36]
	FOscillator StructProperty; 	//[Offset: 0x0, Size: 12]
	float AnimPlayRate; 	//[Offset: 0x0, Size: 4]
	float AnimScale; 	//[Offset: 0x0, Size: 4]
	float AnimBlendInTime; 	//[Offset: 0x0, Size: 4]
	float AnimBlendOutTime; 	//[Offset: 0x0, Size: 4]
	float RandomAnimSegmentDuration; 	//[Offset: 0x0, Size: 4]
	CameraAnim* Anim; 	//[Offset: 0x0, Size: 8]
	bool bRandomAnimSegment; 	//[Offset: 0x0, Size: 1]
	float OscillatorTimeRemaining; 	//[Offset: 0x0, Size: 4]
	CameraAnimInst* AnimInst; 	//[Offset: 0x0, Size: 8]
	Void ReceiveStopShake(bool bImmediately); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac160600
Class: CameraShakeSourceActor.Actor.Object, Addr: 0x76902da600
	CameraShakeSourceComponent* CameraShakeSourceComponent; 	//[Offset: 0x0, Size: 8]
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902dfd80
	enum ECameraShakeAttenuation Attenuation { //[Offset: 0x0, Size: 1]
		Linear = 0
		Quadratic = 4f006700000000
		ECameraShakeAttenuation_MAX = 0
	};
	float InnerAttenuationRadius; 	//[Offset: 0x0, Size: 4]
	float OuterAttenuationRadius; 	//[Offset: 0x0, Size: 4]
	CameraShakeBase* CameraShake; 	//[Offset: 0x0, Size: 8]
	bool bAutoStart; 	//[Offset: 0x0, Size: 1]
	Void StopAllCameraShakesOfType(classCameraShakeBase InCameraShake, bool bImmediately); //Addr 0x75edfeeb5c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac160100
Class: Canvas.Object, Addr: 0x76902dfb00
	float OrgX; 	//[Offset: 0x0, Size: 4]
	float OrgY; 	//[Offset: 0x0, Size: 4]
	float ClipX; 	//[Offset: 0x0, Size: 4]
	float ClipY; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bCenterX; 	//[Offset: 0x0, Size: 1]
	bool bCenterY; 	//[Offset: 0x0, Size: 1]
	bool bNoSmooth; 	//[Offset: 0x0, Size: 1]
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	Plane StructProperty; 	//[Offset: 0x0, Size: 16]
	Texture2D* DefaultTexture; 	//[Offset: 0x0, Size: 8]
	Texture2D* GradientTexture0; 	//[Offset: 0x0, Size: 8]
	ReporterGraph* ReporterGraph; 	//[Offset: 0x0, Size: 8]
	structVector2D K2_TextSize(Font* RenderFont, FString RenderText, structVector2D Scale); //Addr 0x75edfef5c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac163600
Class: StreamableRenderAsset.Object, Addr: 0x769027f100
	double ForceMipLevelsToBeResidentTimestamp; 	//[Offset: 0x0, Size: 8]
	int NumCinematicMipLevels; 	//[Offset: 0x0, Size: 4]
	int StreamingIndex; 	//[Offset: 0x0, Size: 4]
	int CachedCombinedLODBias; 	//[Offset: 0x0, Size: 4]
	bool NeverStream; 	//[Offset: 0x0, Size: 1]
	bool bGlobalForceMipLevelsToBeResident; 	//[Offset: 0x0, Size: 1]
	bool bHasStreamingUpdatePending; 	//[Offset: 0x0, Size: 1]
	bool bForceMiplevelsToBeResident; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreStreamingMipBias; 	//[Offset: 0x0, Size: 1]
	bool bUseCinematicMipLevels; 	//[Offset: 0x0, Size: 1]
Class: Texture.StreamableRenderAsset.Object, Addr: 0x769027f380
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	int LODBias; 	//[Offset: 0x0, Size: 4]
	enum TextureCompressionSettings CompressionSettings { //[Offset: 0x0, Size: 1]
		TC_Default = 0
		TC_Normalmap = 0
		TC_Masks = 0
		TC_Grayscale = 0
		TC_Displacementmap = 0
		TC_VectorDisplacementmap = 0
		TC_HDR = 0
		TC_EditorIcon = 700000000
		TC_Alpha = 100000000
		TC_DistanceFieldFont = 0
		TC_HDR_Compressed = 0
		TC_BC7 = 0
		TC_HalfFloat = 0
		TC_ReflectionCapture = 0
		TC_MAX = 0
	};
	enum TextureFilter Filter { //[Offset: 0x0, Size: 1]
		TF_Nearest = 0
		TF_Bilinear = 68006500000000
		TF_Trilinear = 6e007500000000
		TF_Default = 67006e00000000
		TF_MAX = 58004100000000
	};
	enum ETextureMipLoadOptions MipLoadOptions { //[Offset: 0x0, Size: 1]
		Default = 0
		AllMips = 74007000000000
		OnlyFirstMip = 6c007500000000
		ETextureMipLoadOptions_MAX = 1a00000000
	};
	enum TextureGroup LODGroup { //[Offset: 0x0, Size: 1]
		TEXTUREGROUP_World = 0
		TEXTUREGROUP_WorldNormalMap = 7500000000
		TEXTUREGROUP_WorldSpecular = 7500000000
		TEXTUREGROUP_Character = 7500000000
		TEXTUREGROUP_CharacterNormalMap = 7500000000
		TEXTUREGROUP_CharacterSpecular = 7500000000
		TEXTUREGROUP_Weapon = 7500000000
		TEXTUREGROUP_WeaponNormalMap = 7500000000
		TEXTUREGROUP_WeaponSpecular = 7500000000
		TEXTUREGROUP_Vehicle = 7500000000
		TEXTUREGROUP_VehicleNormalMap = 7500000000
		TEXTUREGROUP_VehicleSpecular = 7500000000
		TEXTUREGROUP_Cinematic = 7500000000
		TEXTUREGROUP_Effects = 7500000000
		TEXTUREGROUP_EffectsNotFiltered = 7500000000
		TEXTUREGROUP_Skybox = 7500000000
		TEXTUREGROUP_UI = 7500000000
		TEXTUREGROUP_Lightmap = 7500000000
		TEXTUREGROUP_RenderTarget = 7500000000
		TEXTUREGROUP_MobileFlattened = 7500000000
		TEXTUREGROUP_ProcBuilding_Face = 7500000000
		TEXTUREGROUP_ProcBuilding_LightMap = 7500000000
		TEXTUREGROUP_Shadowmap = 7500000000
		TEXTUREGROUP_ColorLookupTable = 7500000000
		TEXTUREGROUP_Terrain_Heightmap = 7500000000
		TEXTUREGROUP_Terrain_Weightmap = 7500000000
		TEXTUREGROUP_Bokeh = 7500000000
		TEXTUREGROUP_IESLightProfile = 7500000000
		TEXTUREGROUP_Pixels2D = 7500000000
		TEXTUREGROUP_HierarchicalLOD = 7500000000
		TEXTUREGROUP_Impostor = 7500000000
		TEXTUREGROUP_ImpostorNormalDepth = 7500000000
		TEXTUREGROUP_8BitData = 7500000000
		TEXTUREGROUP_16BitData = 7500000000
		TEXTUREGROUP_Project01 = 7500000000
		TEXTUREGROUP_Project02 = 7500000000
		TEXTUREGROUP_Project03 = 7500000000
		TEXTUREGROUP_Project04 = 7500000000
		TEXTUREGROUP_Project05 = 7500000000
		TEXTUREGROUP_Project06 = 7500000000
		TEXTUREGROUP_Project07 = 7500000000
		TEXTUREGROUP_Project08 = 7500000000
		TEXTUREGROUP_Project09 = 7500000000
		TEXTUREGROUP_Project10 = 7500000000
		TEXTUREGROUP_Project11 = 7500000000
		TEXTUREGROUP_Project12 = 7500000000
		TEXTUREGROUP_Project13 = 7500000000
		TEXTUREGROUP_Project14 = 7500000000
		TEXTUREGROUP_Project15 = 7500000000
		TEXTUREGROUP_MAX = 7500000000
	};
	PerPlatformFloat StructProperty; 	//[Offset: 0x0, Size: 4]
	enum ETextureDownscaleOptions DownscaleOptions { //[Offset: 0x0, Size: 1]
		Default = 0
		Unfiltered = 7600000000
		SimpleAverage = 1700000000
		Sharpen0 = 7600000000
		Sharpen1 = 0
		Sharpen2 = 7600000000
		Sharpen3 = 1700000000
		Sharpen4 = 7600000000
		Sharpen5 = 600000000
		Sharpen6 = 7600000000
		Sharpen7 = 1800000000
		Sharpen8 = 7600000000
		Sharpen9 = 1c00000000
		Sharpen10 = 7600000000
		ETextureDownscaleOptions_MAX = 0
	};
	bool SRGB; 	//[Offset: 0x0, Size: 1]
	int RGBMMaxValue; 	//[Offset: 0x0, Size: 4]
	bool bNoTiling; 	//[Offset: 0x0, Size: 1]
	bool VirtualTextureStreaming; 	//[Offset: 0x0, Size: 1]
	bool CompressionYCoCg; 	//[Offset: 0x0, Size: 1]
	bool bNotOfflineProcessed; 	//[Offset: 0x0, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted; 	//[Offset: 0x0, Size: 1]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
Class: Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x76902ea380
	int LevelIndex; 	//[Offset: 0x0, Size: 4]
	int FirstResourceMemMip; 	//[Offset: 0x0, Size: 4]
	bool bTemporarilyDisableStreaming; 	//[Offset: 0x0, Size: 1]
	bool bUITextureStreamOutted; 	//[Offset: 0x0, Size: 1]
	enum TextureAddress AddressX { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressY { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	bool bDisableUIStreaming; 	//[Offset: 0x0, Size: 1]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	int Blueprint_GetSizeY(); //Addr 0x75ee218768 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac16bf00
Class: DeviceProfileManager.Object, Addr: 0x76902e6780
	Object*[] Profiles; //[Offset: 0x0, Size: 16]
Class: DeviceProfile.TextureLODSettings.Object, Addr: 0x76902e6f00
	StrProperty DeviceType; 	//[Offset: 0x0, Size: 16]
	StrProperty BaseProfileName; 	//[Offset: 0x0, Size: 16]
	Object* Parent; 	//[Offset: 0x0, Size: 8]
	FString[] CVars; //[Offset: 0x0, Size: 16]
Class: TextureLODSettings.Object, Addr: 0x76902e6c80
	structTextureLODGroup[] TextureLODGroups; //[Offset: 0x0, Size: 16]
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x76902e4e80
	float TargetGamma; 	//[Offset: 0x0, Size: 4]
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x76902e5100
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum TextureAddress AddressX { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressY { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	int NumMips; 	//[Offset: 0x0, Size: 4]
	bool bForceLinearGamma; 	//[Offset: 0x0, Size: 1]
	bool bHDR; 	//[Offset: 0x0, Size: 1]
	bool bGPUSharedFlag; 	//[Offset: 0x0, Size: 1]
	bool bClearBeforeRender; 	//[Offset: 0x0, Size: 1]
	bool bAutoGenerateMips; 	//[Offset: 0x0, Size: 1]
	bool bIsSphereMap; 	//[Offset: 0x0, Size: 1]
	bool bNeedLimitedBrightness; 	//[Offset: 0x0, Size: 1]
	float MaxLimitedBrightness; 	//[Offset: 0x0, Size: 4]
	enum ETextureRenderTargetFormat RenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	enum TextureFilter MipsSamplerFilter { //[Offset: 0x0, Size: 1]
		TF_Nearest = 0
		TF_Bilinear = 68006500000000
		TF_Trilinear = 6e007500000000
		TF_Default = 67006e00000000
		TF_MAX = 58004100000000
	};
	enum TextureAddress MipsAddressU { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress MipsAddressV { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum EPixelFormat OverrideFormat { //[Offset: 0x0, Size: 1]
		PF_Unknown = 0
		PF_A32B32G32R32F = 0
		PF_B8G8R8A8 = 0
		PF_G8 = 0
		PF_G16 = 0
		PF_DXT1 = 0
		PF_DXT3 = 0
		PF_DXT5 = 0
		PF_UYVY = 0
		PF_FloatRGB = 0
		PF_FloatRGBA = 0
		PF_DepthStencil = 0
		PF_ShadowDepth = 0
		PF_R32_FLOAT = 0
		PF_G16R16 = 0
		PF_G16R16F = 0
		PF_G16R16F_FILTER = 0
		PF_G32R32F = 0
		PF_A2B10G10R10 = 0
		PF_A16B16G16R16 = 0
		PF_D24 = 0
		PF_R16F = 0
		PF_R16F_FILTER = 0
		PF_BC5 = 0
		PF_V8U8 = 0
		PF_A1 = 0
		PF_FloatR11G11B10 = 0
		PF_A8 = 0
		PF_R32_UINT = 0
		PF_R32_SINT = 0
		PF_PVRTC2 = 0
		PF_PVRTC4 = 0
		PF_R16_UINT = 0
		PF_R16_SINT = 0
		PF_R16G16B16A16_UINT = 0
		PF_R16G16B16A16_SINT = 0
		PF_R5G6B5_UNORM = 0
		PF_R8G8B8A8 = 0
		PF_A8R8G8B8 = 0
		PF_BC4 = 0
		PF_R8G8 = 0
		PF_ATC_RGB = 0
		PF_ATC_RGBA_E = 0
		PF_ATC_RGBA_I = 0
		PF_X24_G8 = 0
		PF_ETC1 = 0
		PF_ETC2_RGB = 0
		PF_ETC2_RGBA = 0
		PF_R32G32B32A32_UINT = 0
		PF_R16G16_UINT = 0
		PF_ASTC_4x4 = 0
		PF_ASTC_6x6 = 0
		PF_ASTC_8x8 = 0
		PF_ASTC_10x10 = 0
		PF_ASTC_12x12 = 0
		PF_BC6H = 0
		PF_BC7 = 0
		PF_R8_UINT = 0
		PF_L8 = 0
		PF_XGXR8 = 0
		PF_R8G8B8A8_UINT = 0
		PF_R8G8B8A8_SNORM = 0
		PF_R16G16B16A16_UNORM = 0
		PF_R16G16B16A16_SNORM = 0
		PF_PLATFORM_HDR = 1
		PF_PLATFORM_HDR = 2
		PF_PLATFORM_HDR = 3
		PF_NV12 = 0
		PF_R32G32_UINT = 0
		PF_ETC2_R11_EAC = 0
		PF_ETC2_RG11_EAC = 0
		PF_MAX = 0
	};
	Void UpdateResourceImmediate(bool bClearRenderTarget); //Addr 0x75ee21c7c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac163500
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x76902df880
	delegate OnCanvasRenderTargetUpdate; 	//[Offset: 0x0, Size: 16]
	World* World; 	//[Offset: 0x0, Size: 8]
	bool bShouldClearRenderTargetOnReceiveUpdate; 	//[Offset: 0x0, Size: 1]
	Void UpdateResource(); //Addr 0x75edff45d4 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac163100
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902e4c00
	float CapsuleHalfHeight; 	//[Offset: 0x0, Size: 4]
	float CapsuleRadius; 	//[Offset: 0x0, Size: 4]
	Void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); //Addr 0x75edff5458 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac162300
Class: Pawn.Actor.Object, Addr: 0x75a527a380
	bool bUseControllerRotationPitch; 	//[Offset: 0x0, Size: 1]
	bool bUseControllerRotationYaw; 	//[Offset: 0x0, Size: 1]
	bool bUseControllerRotationRoll; 	//[Offset: 0x0, Size: 1]
	bool bCanAffectNavigationGeneration; 	//[Offset: 0x0, Size: 1]
	float BaseEyeHeight; 	//[Offset: 0x0, Size: 4]
	enum EAutoReceiveInput AutoPossessPlayer { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Player0 = 0
		Player1 = 0
		Player2 = 0
		Player3 = 0
		Player4 = 0
		Player5 = 0
		Player6 = 0
		Player7 = 0
		EAutoReceiveInput_MAX = 0
	};
	enum EAutoPossessAI AutoPossessAI { //[Offset: 0x0, Size: 1]
		Disabled = 0
		PlacedInWorld = 3a006e00000000
		Spawned = 6e006100000000
		PlacedInWorldOrSpawned = 58004100000000
		EAutoPossessAI_MAX = 0
	};
	byte RemoteViewPitch; //[Offset: 0x0, Size: 1]
	Controller* AIControllerClass; 	//[Offset: 0x0, Size: 8]
	PlayerState* PlayerState; 	//[Offset: 0x33097, Size: 8]
	Controller* LastHitBy; 	//[Offset: 0x0, Size: 8]
	Controller* Controller; 	//[Offset: 0x33091, Size: 8]
	<FString, Object*> CustomData; //[Offset: 0x0, Size: 80]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SpawnDefaultController(); //Addr 0x75ee1741f4 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0eab500
Class: Engine.Object, Addr: 0x76902e1a00
	Font* TinyFont; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Font* SmallFont; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Font* MediumFont; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Font* LargeFont; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Font* SubtitleFont; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Font*[] AdditionalFonts; //[Offset: 0x0, Size: 16]
	FString[] AdditionalFontNames; //[Offset: 0x0, Size: 16]
	Console* ConsoleClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	GameViewportClient* GameViewportClientClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	LocalPlayer* LocalPlayerClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	WorldSettings* WorldSettingsClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	NavigationSystemBase* NavigationSystemClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	NavigationSystemConfig* NavigationSystemConfigClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	AvoidanceManager* AvoidanceManagerClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	PhysicsCollisionHandler* PhysicsCollisionHandlerClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	GameUserSettings* GameUserSettingsClass; 	//[Offset: 0x0, Size: 8]
	GameUserSettings* GameUserSettings; 	//[Offset: 0x0, Size: 8]
	LevelScriptActor* LevelScriptActorClass; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Object* GameSingleton; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	AssetManager* AssetManager; 	//[Offset: 0x0, Size: 8]
	Texture2D* DefaultTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture* DefaultDiffuseTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* DefaultBSPVertexTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* HighFrequencyNoiseTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* DefaultBokehTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* DefaultBloomKernelTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* WireframeMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty WireframeMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* DebugMeshMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* EmissiveMeshMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* LevelColorationLitMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty LevelColorationLitMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* LevelColorationUnlitMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty LevelColorationUnlitMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* LightingTexelDensityMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty LightingTexelDensityName; 	//[Offset: 0x0, Size: 16]
	Material* ShadedLevelColorationLitMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty ShadedLevelColorationLitMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* ShadedLevelColorationUnlitMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty ShadedLevelColorationUnlitMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* RemoveSurfaceMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* VertexColorMaterial; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorMaterialName; 	//[Offset: 0x0, Size: 16]
	Material* VertexColorViewModeMaterial_ColorOnly; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorViewModeMaterialName_ColorOnly; 	//[Offset: 0x0, Size: 16]
	Material* VertexColorViewModeMaterial_AlphaAsColor; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorViewModeMaterialName_AlphaAsColor; 	//[Offset: 0x0, Size: 16]
	Material* VertexColorViewModeMaterial_RedOnly; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorViewModeMaterialName_RedOnly; 	//[Offset: 0x0, Size: 16]
	Material* VertexColorViewModeMaterial_GreenOnly; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorViewModeMaterialName_GreenOnly; 	//[Offset: 0x0, Size: 16]
	Material* VertexColorViewModeMaterial_BlueOnly; 	//[Offset: 0x0, Size: 8]
	StrProperty VertexColorViewModeMaterialName_BlueOnly; 	//[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* ConstraintLimitMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; 	//[Offset: 0x0, Size: 8]
	Material* InvalidLightmapSettingsMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* PreviewShadowsIndicatorMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Material* ArrowMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ArrowMaterialYellow; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	structLinearColor[] ShaderComplexityColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] QuadComplexityColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] LightComplexityColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] StationaryLightOverlapColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] LODColorationColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] HLODColorationColors; //[Offset: 0x0, Size: 16]
	structLinearColor[] StreamingAccuracyColors; //[Offset: 0x0, Size: 16]
	float MaxPixelShaderAdditiveComplexityCount; 	//[Offset: 0x0, Size: 4]
	float MaxES3PixelShaderAdditiveComplexityCount; 	//[Offset: 0x0, Size: 4]
	float MinLightMapDensity; 	//[Offset: 0x0, Size: 4]
	float IdealLightMapDensity; 	//[Offset: 0x0, Size: 4]
	float MaxLightMapDensity; 	//[Offset: 0x0, Size: 4]
	bool bRenderLightMapDensityGrayscale; 	//[Offset: 0x0, Size: 1]
	float RenderLightMapDensityGrayscaleScale; 	//[Offset: 0x0, Size: 4]
	float RenderLightMapDensityColorScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	structStatColorMapping[] StatColorMappings; //[Offset: 0x0, Size: 16]
	PhysicalMaterial* DefaultPhysMaterial; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	structGameNameRedirect[] ActiveGameNameRedirects; //[Offset: 0x0, Size: 16]
	structClassRedirect[] ActiveClassRedirects; //[Offset: 0x0, Size: 16]
	structPluginRedirect[] ActivePluginRedirects; //[Offset: 0x0, Size: 16]
	structStructRedirect[] ActiveStructRedirects; //[Offset: 0x0, Size: 16]
	Texture2D* PreIntegratedSkinBRDFTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* BlueNoiseTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* MiniFontTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture* WeightMapPlaceholderTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Texture2D* LightMapDensityTexture; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	GameViewportClient* GameViewport; 	//[Offset: 0x0, Size: 8]
	FString[] DeferredCommands; //[Offset: 0x0, Size: 16]
	float NearClipPlane; 	//[Offset: 0x0, Size: 4]
	bool bSubtitlesEnabled; 	//[Offset: 0x0, Size: 1]
	bool bSubtitlesForcedOff; 	//[Offset: 0x0, Size: 1]
	int MaximumLoopIterationCount; 	//[Offset: 0x0, Size: 4]
	bool bCanBlueprintsTickByDefault; 	//[Offset: 0x0, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess; 	//[Offset: 0x0, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate; 	//[Offset: 0x0, Size: 1]
	bool bEnableEditorPSysRealtimeLOD; 	//[Offset: 0x0, Size: 1]
	bool bSmoothFrameRate; 	//[Offset: 0x0, Size: 1]
	bool bUseFixedFrameRate; 	//[Offset: 0x0, Size: 1]
	float FixedFrameRate; 	//[Offset: 0x0, Size: 4]
	FloatRange StructProperty; 	//[Offset: 0x0, Size: 16]
	EngineCustomTimeStep* CustomTimeStep; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	TimecodeProvider* TimecodeProvider; 	//[Offset: 0x0, Size: 8]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	bool bGenerateDefaultTimecode; 	//[Offset: 0x0, Size: 1]
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	float GenerateDefaultTimecodeFrameDelay; 	//[Offset: 0x0, Size: 4]
	bool bCheckForMultiplePawnsSpawnedInAFrame; 	//[Offset: 0x0, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame; 	//[Offset: 0x0, Size: 4]
	bool bShouldGenerateLowQualityLightmaps; 	//[Offset: 0x0, Size: 1]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float StreamingDistanceFactor; 	//[Offset: 0x0, Size: 4]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	enum ETransitionType TransitionType { //[Offset: 0x0, Size: 1]
		None = 0
		Paused = 75006c00000000
		Loading = 63006900000000
		Saving = 3a006400000000
		Connecting = 69006e00000000
		Precaching = 72007000000000
		WaitingToConnect = 69007400000000
		MAX = 58004100000000
	};
	StrProperty TransitionDescription; 	//[Offset: 0x0, Size: 16]
	StrProperty TransitionGameMode; 	//[Offset: 0x0, Size: 16]
	bool bAllowMatureLanguage; 	//[Offset: 0x0, Size: 1]
	float CameraRotationThreshold; 	//[Offset: 0x0, Size: 4]
	float CameraTranslationThreshold; 	//[Offset: 0x0, Size: 4]
	float PrimitiveProbablyVisibleTime; 	//[Offset: 0x0, Size: 4]
	float MaxOcclusionPixelsFraction; 	//[Offset: 0x0, Size: 4]
	bool bPauseOnLossOfFocus; 	//[Offset: 0x0, Size: 1]
	int MaxParticleResize; 	//[Offset: 0x0, Size: 4]
	int MaxParticleResizeWarn; 	//[Offset: 0x0, Size: 4]
	structDropNoteInfo[] PendingDroppedNotes; //[Offset: 0x0, Size: 16]
	float NetClientTicksPerSecond; 	//[Offset: 0x0, Size: 4]
	float DisplayGamma; 	//[Offset: 0x0, Size: 4]
	float MinDesiredFrameRate; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bIsOverridingSelectedColor; 	//[Offset: 0x0, Size: 1]
	bool bEnableOnScreenDebugMessages; 	//[Offset: 0x0, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay; 	//[Offset: 0x0, Size: 1]
	bool bSuppressMapWarnings; 	//[Offset: 0x0, Size: 1]
	bool bDisableAILogging; 	//[Offset: 0x0, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart; 	//[Offset: 0x0, Size: 4]
	int ScreenSaverInhibitorSemaphore; 	//[Offset: 0x0, Size: 4]
	bool bLockReadOnlyLevels; 	//[Offset: 0x0, Size: 1]
	StrProperty ParticleEventManagerClassPath; 	//[Offset: 0x0, Size: 16]
	float SelectionHighlightIntensity; 	//[Offset: 0x0, Size: 4]
	float BSPSelectionHighlightIntensity; 	//[Offset: 0x0, Size: 4]
	float SelectionHighlightIntensityBillboards; 	//[Offset: 0x0, Size: 4]
	structNetDriverDefinition[] NetDriverDefinitions; //[Offset: 0x0, Size: 16]
	FString[] ServerActors; //[Offset: 0x0, Size: 16]
	FString[] RuntimeServerActors; //[Offset: 0x0, Size: 16]
	float NetErrorLogInterval; 	//[Offset: 0x0, Size: 4]
	bool bStartedLoadMapMovie; 	//[Offset: 0x0, Size: 1]
	int NextWorldContextHandle; 	//[Offset: 0x0, Size: 4]
Class: Character.Pawn.Actor.Object, Addr: 0x76901eda80
	SkeletalMeshComponent* Mesh; 	//[Offset: 0x0, Size: 8]
	CharacterMovementComponent* CharacterMovement; 	//[Offset: 0x0, Size: 8]
	CapsuleComponent* CapsuleComponent; 	//[Offset: 0x0, Size: 8]
	BasedMovementInfo StructProperty; 	//[Offset: 0x0, Size: 48]
	BasedMovementInfo StructProperty; 	//[Offset: 0x37e80, Size: 48]
	float AnimRootMotionTranslationScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Quat StructProperty; 	//[Offset: 0x0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp; 	//[Offset: 0x0, Size: 4]
	float ReplayLastTransformUpdateTimeStamp; 	//[Offset: 0x37e74, Size: 4]
	byte ReplicatedMovementMode; //[Offset: 0x0, Size: 1]
	bool bInBaseReplication; 	//[Offset: 0x0, Size: 1]
	float CrouchedEyeHeight; 	//[Offset: 0x0, Size: 4]
	bool bIsCrouched; 	//[Offset: 0x37e6e, Size: 1]
	bool bProxyIsJumpForceApplied; 	//[Offset: 0x0, Size: 1]
	bool bPressedJump; 	//[Offset: 0x0, Size: 1]
	bool bClientUpdating; 	//[Offset: 0x0, Size: 1]
	bool bClientWasFalling; 	//[Offset: 0x0, Size: 1]
	bool bClientResimulateRootMotion; 	//[Offset: 0x0, Size: 1]
	bool bClientResimulateRootMotionSources; 	//[Offset: 0x0, Size: 1]
	bool bSimGravityDisabled; 	//[Offset: 0x0, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate; 	//[Offset: 0x0, Size: 1]
	bool bServerMoveIgnoreRootMotion; 	//[Offset: 0x0, Size: 1]
	bool bWasJumping; 	//[Offset: 0x0, Size: 1]
	float JumpKeyHoldTime; 	//[Offset: 0x0, Size: 4]
	float JumpForceTimeRemaining; 	//[Offset: 0x0, Size: 4]
	float ProxyJumpForceStartedTime; 	//[Offset: 0x0, Size: 4]
	float JumpMaxHoldTime; 	//[Offset: 0x0, Size: 4]
	int JumpMaxCount; 	//[Offset: 0x0, Size: 4]
	int JumpCurrentCount; 	//[Offset: 0x0, Size: 4]
	int JumpCurrentCountPreJump; 	//[Offset: 0x0, Size: 4]
	delegate OnReachedJumpApex; 	//[Offset: 0x0, Size: 16]
	delegate MovementModeChangedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnCharacterMovementUpdated; 	//[Offset: 0x0, Size: 16]
	RootMotionSourceGroup StructProperty; 	//[Offset: 0x0, Size: 56]
	RootMotionMovementParams StructProperty; 	//[Offset: 0x0, Size: 64]
	structSimulatedRootMotionReplicatedMove[] RootMotionRepMoves; //[Offset: 0x0, Size: 16]
	RepRootMotionMontage StructProperty; 	//[Offset: 0x37e89, Size: 152]
	Void UnCrouch(bool bClientSimulation); //Addr 0x75edff6624 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5d4c00
Class: MovementComponent.ActorComponent.Object, Addr: 0x75a5278a80
	SceneComponent* UpdatedComponent; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* UpdatedPrimitive; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUpdateOnlyIfRendered; 	//[Offset: 0x0, Size: 1]
	bool bAutoUpdateTickRegistration; 	//[Offset: 0x0, Size: 1]
	bool bTickBeforeOwner; 	//[Offset: 0x0, Size: 1]
	bool bAutoRegisterUpdatedComponent; 	//[Offset: 0x0, Size: 1]
	bool bConstrainToPlane; 	//[Offset: 0x0, Size: 1]
	bool bSnapToPlaneAtStart; 	//[Offset: 0x0, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates; 	//[Offset: 0x0, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume; 	//[Offset: 0x0, Size: 1]
	enum EPlaneConstraintAxisSetting PlaneConstraintAxisSetting { //[Offset: 0x0, Size: 1]
		Custom = 0
		X = 0
		Y = 0
		Z = 0
		UseGlobalPhysicsSetting = 0
		EPlaneConstraintAxisSetting_MAX = 79006c00000000
	};
	Void StopMovementImmediately(); //Addr 0x75ee141cb8 [Native|BlueprintCallabl] // UFieldProperty addr: 0x759aeeda00
Class: NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x75a5278d00
	NavAgentProperties StructProperty; 	//[Offset: 0x0, Size: 56]
	float FixedPathBrakingDistance; 	//[Offset: 0x0, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision; 	//[Offset: 0x0, Size: 1]
	bool bUseAccelerationForPaths; 	//[Offset: 0x0, Size: 1]
	bool bUseFixedBrakingDistanceForPaths; 	//[Offset: 0x0, Size: 1]
	MovementProperties StructProperty; 	//[Offset: 0x0, Size: 1]
	Object* PathFollowingComp; 	//[Offset: 0x0, Size: 8]
	Void StopMovementKeepPathing(); //Addr 0x75ee1482b4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac43d300
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x75a5278f80
	Pawn* PawnOwner; 	//[Offset: 0x0, Size: 8]
	structVector K2_GetInputVector(); //Addr 0x75ee17567c [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac43cc00
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x76902e4980
	Character* CharacterOwner; 	//[Offset: 0x0, Size: 8]
	float GravityScale; 	//[Offset: 0x0, Size: 4]
	float MaxStepHeight; 	//[Offset: 0x0, Size: 4]
	float JumpZVelocity; 	//[Offset: 0x0, Size: 4]
	float JumpOffJumpZFactor; 	//[Offset: 0x0, Size: 4]
	float WalkableFloorAngle; 	//[Offset: 0x0, Size: 4]
	float WalkableFloorZ; 	//[Offset: 0x0, Size: 4]
	enum EMovementMode MovementMode { //[Offset: 0x0, Size: 1]
		MOVE_None = 0
		MOVE_Walking = 0
		MOVE_NavWalking = 0
		MOVE_Falling = 0
		MOVE_Swimming = 0
		MOVE_Flying = 0
		MOVE_Custom = 0
		MOVE_MAX = 0
	};
	byte CustomMovementMode; //[Offset: 0x0, Size: 1]
	enum ENetworkSmoothingMode NetworkSmoothingMode { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Linear = 45003a00000000
		Exponential = 49006500000000
		Replay = 58004100000000
		ENetworkSmoothingMode_MAX = 0
	};
	float GroundFriction; 	//[Offset: 0x0, Size: 4]
	float MaxWalkSpeed; 	//[Offset: 0x0, Size: 4]
	float MaxWalkSpeedCrouched; 	//[Offset: 0x0, Size: 4]
	float MaxSwimSpeed; 	//[Offset: 0x0, Size: 4]
	float MaxFlySpeed; 	//[Offset: 0x0, Size: 4]
	float MaxCustomMovementSpeed; 	//[Offset: 0x0, Size: 4]
	float MaxAcceleration; 	//[Offset: 0x0, Size: 4]
	float MinAnalogWalkSpeed; 	//[Offset: 0x0, Size: 4]
	float BrakingFrictionFactor; 	//[Offset: 0x0, Size: 4]
	float BrakingFriction; 	//[Offset: 0x0, Size: 4]
	float BrakingSubStepTime; 	//[Offset: 0x0, Size: 4]
	float BrakingDecelerationWalking; 	//[Offset: 0x0, Size: 4]
	float BrakingDecelerationFalling; 	//[Offset: 0x0, Size: 4]
	float BrakingDecelerationSwimming; 	//[Offset: 0x0, Size: 4]
	float BrakingDecelerationFlying; 	//[Offset: 0x0, Size: 4]
	float AirControl; 	//[Offset: 0x0, Size: 4]
	float AirControlBoostMultiplier; 	//[Offset: 0x0, Size: 4]
	float AirControlBoostVelocityThreshold; 	//[Offset: 0x0, Size: 4]
	float FallingLateralFriction; 	//[Offset: 0x0, Size: 4]
	float CrouchedHalfHeight; 	//[Offset: 0x0, Size: 4]
	float Buoyancy; 	//[Offset: 0x0, Size: 4]
	float PerchRadiusThreshold; 	//[Offset: 0x0, Size: 4]
	float PerchAdditionalHeight; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUseSeparateBrakingFriction; 	//[Offset: 0x0, Size: 1]
	bool bApplyGravityWhileJumping; 	//[Offset: 0x0, Size: 1]
	bool bUseControllerDesiredRotation; 	//[Offset: 0x0, Size: 1]
	bool bOrientRotationToMovement; 	//[Offset: 0x0, Size: 1]
	bool bSweepWhileNavWalking; 	//[Offset: 0x0, Size: 1]
	bool bMovementInProgress; 	//[Offset: 0x0, Size: 1]
	bool bEnableScopedMovementUpdates; 	//[Offset: 0x0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates; 	//[Offset: 0x0, Size: 1]
	bool bForceMaxAccel; 	//[Offset: 0x0, Size: 1]
	bool bRunPhysicsWithNoController; 	//[Offset: 0x0, Size: 1]
	bool bForceNextFloorCheck; 	//[Offset: 0x0, Size: 1]
	bool bShrinkProxyCapsule; 	//[Offset: 0x0, Size: 1]
	bool bCanWalkOffLedges; 	//[Offset: 0x0, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching; 	//[Offset: 0x0, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate; 	//[Offset: 0x0, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp; 	//[Offset: 0x0, Size: 1]
	bool bDeferUpdateMoveComponent; 	//[Offset: 0x0, Size: 1]
	bool bEnablePhysicsInteraction; 	//[Offset: 0x0, Size: 1]
	bool bTouchForceScaledToMass; 	//[Offset: 0x0, Size: 1]
	bool bPushForceScaledToMass; 	//[Offset: 0x0, Size: 1]
	bool bPushForceUsingZOffset; 	//[Offset: 0x0, Size: 1]
	bool bScalePushForceToVelocity; 	//[Offset: 0x0, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent; 	//[Offset: 0x0, Size: 8]
	float MaxOutOfWaterStepHeight; 	//[Offset: 0x0, Size: 4]
	float OutofWaterZ; 	//[Offset: 0x0, Size: 4]
	float Mass; 	//[Offset: 0x0, Size: 4]
	float StandingDownwardForceScale; 	//[Offset: 0x0, Size: 4]
	float InitialPushForceFactor; 	//[Offset: 0x0, Size: 4]
	float PushForceFactor; 	//[Offset: 0x0, Size: 4]
	float PushForcePointZOffsetFactor; 	//[Offset: 0x0, Size: 4]
	float TouchForceFactor; 	//[Offset: 0x0, Size: 4]
	float MinTouchForce; 	//[Offset: 0x0, Size: 4]
	float MaxTouchForce; 	//[Offset: 0x0, Size: 4]
	float RepulsionForce; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Quat StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ServerLastTransformUpdateTimeStamp; 	//[Offset: 0x0, Size: 4]
	float ServerLastClientGoodMoveAckTime; 	//[Offset: 0x0, Size: 4]
	float ServerLastClientAdjustmentTime; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float AnalogInputModifier; 	//[Offset: 0x0, Size: 4]
	float MaxSimulationTimeStep; 	//[Offset: 0x0, Size: 4]
	int MaxSimulationIterations; 	//[Offset: 0x0, Size: 4]
	int MaxJumpApexAttemptsPerSimulation; 	//[Offset: 0x0, Size: 4]
	float MaxDepenetrationWithGeometry; 	//[Offset: 0x0, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy; 	//[Offset: 0x0, Size: 4]
	float MaxDepenetrationWithPawn; 	//[Offset: 0x0, Size: 4]
	float MaxDepenetrationWithPawnAsProxy; 	//[Offset: 0x0, Size: 4]
	float NetworkSimulatedSmoothLocationTime; 	//[Offset: 0x0, Size: 4]
	float NetworkSimulatedSmoothRotationTime; 	//[Offset: 0x0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime; 	//[Offset: 0x0, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime; 	//[Offset: 0x0, Size: 4]
	float NetProxyShrinkRadius; 	//[Offset: 0x0, Size: 4]
	float NetProxyShrinkHalfHeight; 	//[Offset: 0x0, Size: 4]
	float NetworkMaxSmoothUpdateDistance; 	//[Offset: 0x0, Size: 4]
	float NetworkNoSmoothUpdateDistance; 	//[Offset: 0x0, Size: 4]
	float NetworkMinTimeBetweenClientAckGoodMoves; 	//[Offset: 0x0, Size: 4]
	float NetworkMinTimeBetweenClientAdjustments; 	//[Offset: 0x0, Size: 4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; 	//[Offset: 0x0, Size: 4]
	float NetworkLargeClientCorrectionDistance; 	//[Offset: 0x0, Size: 4]
	float LedgeCheckThreshold; 	//[Offset: 0x0, Size: 4]
	float JumpOutOfWaterPitch; 	//[Offset: 0x0, Size: 4]
	FindFloorResult StructProperty; 	//[Offset: 0x0, Size: 172]
	enum EMovementMode DefaultLandMovementMode { //[Offset: 0x0, Size: 1]
		MOVE_None = 0
		MOVE_Walking = 0
		MOVE_NavWalking = 0
		MOVE_Falling = 0
		MOVE_Swimming = 0
		MOVE_Flying = 0
		MOVE_Custom = 0
		MOVE_MAX = 0
	};
	enum EMovementMode DefaultWaterMovementMode { //[Offset: 0x0, Size: 1]
		MOVE_None = 0
		MOVE_Walking = 0
		MOVE_NavWalking = 0
		MOVE_Falling = 0
		MOVE_Swimming = 0
		MOVE_Flying = 0
		MOVE_Custom = 0
		MOVE_MAX = 0
	};
	enum EMovementMode GroundMovementMode { //[Offset: 0x0, Size: 1]
		MOVE_None = 0
		MOVE_Walking = 0
		MOVE_NavWalking = 0
		MOVE_Falling = 0
		MOVE_Swimming = 0
		MOVE_Flying = 0
		MOVE_Custom = 0
		MOVE_MAX = 0
	};
	bool bMaintainHorizontalGroundVelocity; 	//[Offset: 0x0, Size: 1]
	bool bImpartBaseVelocityX; 	//[Offset: 0x0, Size: 1]
	bool bImpartBaseVelocityY; 	//[Offset: 0x0, Size: 1]
	bool bImpartBaseVelocityZ; 	//[Offset: 0x0, Size: 1]
	bool bImpartBaseAngularVelocity; 	//[Offset: 0x0, Size: 1]
	bool bJustTeleported; 	//[Offset: 0x0, Size: 1]
	bool bNetworkUpdateReceived; 	//[Offset: 0x0, Size: 1]
	bool bNetworkMovementModeChanged; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection; 	//[Offset: 0x0, Size: 1]
	bool bServerAcceptClientAuthoritativePosition; 	//[Offset: 0x0, Size: 1]
	bool bNotifyApex; 	//[Offset: 0x0, Size: 1]
	bool bCheatFlying; 	//[Offset: 0x0, Size: 1]
	bool bWantsToCrouch; 	//[Offset: 0x0, Size: 1]
	bool bCrouchMaintainsBaseLocation; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreBaseRotation; 	//[Offset: 0x0, Size: 1]
	bool bFastAttachedMove; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysCheckFloor; 	//[Offset: 0x0, Size: 1]
	bool bUseFlatBaseForFloorChecks; 	//[Offset: 0x0, Size: 1]
	bool bPerformingJumpOff; 	//[Offset: 0x0, Size: 1]
	bool bWantsToLeaveNavWalking; 	//[Offset: 0x0, Size: 1]
	bool bUseRVOAvoidance; 	//[Offset: 0x0, Size: 1]
	bool bRequestedMoveUseAcceleration; 	//[Offset: 0x0, Size: 1]
	bool bWasSimulatingRootMotion; 	//[Offset: 0x0, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion; 	//[Offset: 0x0, Size: 1]
	bool bHasRequestedVelocity; 	//[Offset: 0x0, Size: 1]
	bool bRequestedMoveWithMaxSpeed; 	//[Offset: 0x0, Size: 1]
	bool bWasAvoidanceUpdated; 	//[Offset: 0x0, Size: 1]
	bool bProjectNavMeshWalking; 	//[Offset: 0x0, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels; 	//[Offset: 0x0, Size: 1]
	float AvoidanceConsiderationRadius; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	int AvoidanceUID; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	float AvoidanceWeight; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float NavMeshProjectionInterval; 	//[Offset: 0x0, Size: 4]
	float NavMeshProjectionTimer; 	//[Offset: 0x0, Size: 4]
	float NavMeshProjectionInterpSpeed; 	//[Offset: 0x0, Size: 4]
	float NavMeshProjectionHeightScaleUp; 	//[Offset: 0x0, Size: 4]
	float NavMeshProjectionHeightScaleDown; 	//[Offset: 0x0, Size: 4]
	float NavWalkingFloorDistTolerance; 	//[Offset: 0x0, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction StructProperty; 	//[Offset: 0x0, Size: 48]
	float MinTimeBetweenTimeStampResets; 	//[Offset: 0x0, Size: 4]
	RootMotionSourceGroup StructProperty; 	//[Offset: 0x0, Size: 56]
	RootMotionSourceGroup StructProperty; 	//[Offset: 0x0, Size: 56]
	RootMotionMovementParams StructProperty; 	//[Offset: 0x0, Size: 64]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetWalkableFloorZ(float InWalkableFloorZ); //Addr 0x75edffd5e0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac168100
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a5277680
	MaterialInterface*[] OverrideMaterials; //[Offset: 0x0, Size: 16]
	bool bEnableMaterialParameterCaching; 	//[Offset: 0x0, Size: 1]
	Void SetVectorParameterValueOnMaterials(constFName ParameterName, conststructVector ParameterValue); //Addr 0x75ee13e0c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0ca8600
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a5277900
	SkeletalMesh* SkeletalMesh; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* MasterPoseComponent; 	//[Offset: 0x0, Size: 8]
	enum ESkinCacheUsage[] SkinCacheUsage; //[Offset: 0x0, Size: 16]
	structVertexOffsetUsage[] VertexOffsetUsage; //[Offset: 0x0, Size: 16]
	PhysicsAsset* PhysicsAssetOverride; 	//[Offset: 0x0, Size: 8]
	int ForcedLodModel; 	//[Offset: 0x0, Size: 4]
	int MinLodModel; 	//[Offset: 0x0, Size: 4]
	float StreamingDistanceMultiplier; 	//[Offset: 0x0, Size: 4]
	structSkelMeshComponentLODInfo[] LODInfo; //[Offset: 0x0, Size: 16]
	enum EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption { //[Offset: 0x0, Size: 1]
		AlwaysTickPoseAndRefreshBones = 0
		AlwaysTickPose = 69007300000000
		OnlyTickMontagesWhenNotRendered = 41006400000000
		OnlyTickPoseWhenRendered = 6f006900000000
		EVisibilityBasedAnimTickOption_MAX = 0
	};
	bool bOverrideMinLOD; 	//[Offset: 0x0, Size: 1]
	bool bUseBoundsFromMasterPoseComponent; 	//[Offset: 0x0, Size: 1]
	bool bForceWireframe; 	//[Offset: 0x0, Size: 1]
	bool bDisplayBones; 	//[Offset: 0x0, Size: 1]
	bool bDisableMorphTarget; 	//[Offset: 0x0, Size: 1]
	bool bHideSkin; 	//[Offset: 0x0, Size: 1]
	bool bPerBoneMotionBlur; 	//[Offset: 0x0, Size: 1]
	bool bComponentUseFixedSkelBounds; 	//[Offset: 0x0, Size: 1]
	bool bConsiderAllBodiesForBounds; 	//[Offset: 0x0, Size: 1]
	bool bSyncAttachParentLOD; 	//[Offset: 0x0, Size: 1]
	bool bCanHighlightSelectedSections; 	//[Offset: 0x0, Size: 1]
	bool bRecentlyRendered; 	//[Offset: 0x0, Size: 1]
	bool bCastCapsuleDirectShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastCapsuleIndirectShadow; 	//[Offset: 0x0, Size: 1]
	bool bCPUSkinning; 	//[Offset: 0x0, Size: 1]
	bool bEnableUpdateRateOptimizations; 	//[Offset: 0x0, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations; 	//[Offset: 0x0, Size: 1]
	bool bRenderStatic; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreMasterPoseComponentLOD; 	//[Offset: 0x0, Size: 1]
	bool bForceNotOcclued; 	//[Offset: 0x0, Size: 1]
	bool bCachedLocalBoundsUpToDate; 	//[Offset: 0x0, Size: 1]
	bool bForceMeshObjectUpdate; 	//[Offset: 0x0, Size: 1]
	float CapsuleIndirectShadowMinVisibility; 	//[Offset: 0x0, Size: 4]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	Matrix StructProperty; 	//[Offset: 0x0, Size: 64]
	Void UnloadSkinWeightProfile(FName InProfileName); //Addr 0x75ee1ddc40 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35e700
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a5277b80
	bool bOverrideGlobalNumReduceLODs; 	//[Offset: 0x0, Size: 1]
	int NumReduceLODs_UltraLow; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Low; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Mid; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_High; 	//[Offset: 0x0, Size: 4]
	Object* AnimBlueprintGeneratedClass; 	//[Offset: 0x0, Size: 8]
	AnimInstance* AnimClass; 	//[Offset: 0x0, Size: 8]
	bool bIgnoreSkeletonCompatible; 	//[Offset: 0x0, Size: 1]
	FName PelvisBoneName; 	//[Offset: 0x0, Size: 12]
	AnimInstance* AnimScriptInstance; 	//[Offset: 0x0, Size: 8]
	AnimInstance* PostProcessAnimInstance; 	//[Offset: 0x0, Size: 8]
	SingleAnimationPlayData StructProperty; 	//[Offset: 0x0, Size: 24]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	AnimInstance*[] LinkedInstances; //[Offset: 0x0, Size: 16]
	structTransform[] CachedBoneSpaceTransforms; //[Offset: 0x0, Size: 16]
	structTransform[] CachedComponentSpaceTransforms; //[Offset: 0x0, Size: 16]
	float GlobalAnimRateScale; 	//[Offset: 0x0, Size: 4]
	enum EKinematicBonesUpdateToPhysics KinematicBonesUpdateType { //[Offset: 0x0, Size: 1]
		SkipSimulatingBones = 0
		SkipAllBones = 5800000000
		EKinematicBonesUpdateToPhysics_MAX = 0
	};
	enum EPhysicsTransformUpdateMode PhysicsTransformUpdateMode { //[Offset: 0x0, Size: 1]
		SimulationUpatesComponentTransform = 0
		ComponentTransformIsKinematic = 5800000000
		EPhysicsTransformUpdateMode_MAX = 0
	};
	enum EAnimationMode AnimationMode { //[Offset: 0x0, Size: 1]
		AnimationBlueprint = 0
		AnimationSingleNode = 64007000000000
		AnimationCustomMode = 58004100000000
		EAnimationMode_MAX = 0
	};
	bool bDisablePostProcessBlueprint; 	//[Offset: 0x0, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize; 	//[Offset: 0x0, Size: 1]
	bool bHasValidBodies; 	//[Offset: 0x0, Size: 1]
	bool bBlendPhysics; 	//[Offset: 0x0, Size: 1]
	bool bEnablePhysicsOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	bool bUpdateJointsFromAnimation; 	//[Offset: 0x0, Size: 1]
	bool bDisableClothSimulation; 	//[Offset: 0x0, Size: 1]
	bool bDisableRigidBodyAnimNode; 	//[Offset: 0x0, Size: 1]
	bool bAllowAnimCurveEvaluation; 	//[Offset: 0x0, Size: 1]
	bool bDisableAnimCurves; 	//[Offset: 0x0, Size: 1]
	bool bCollideWithEnvironment; 	//[Offset: 0x0, Size: 1]
	bool bCollideWithAttachedChildren; 	//[Offset: 0x0, Size: 1]
	bool bLocalSpaceSimulation; 	//[Offset: 0x0, Size: 1]
	bool bResetAfterTeleport; 	//[Offset: 0x0, Size: 1]
	bool bDeferKinematicBoneUpdate; 	//[Offset: 0x0, Size: 1]
	bool bNoSkeletonUpdate; 	//[Offset: 0x0, Size: 1]
	bool bPauseAnims; 	//[Offset: 0x0, Size: 1]
	bool bUseRefPoseOnInitAnim; 	//[Offset: 0x0, Size: 1]
	bool bEnablePerPolyCollision; 	//[Offset: 0x0, Size: 1]
	bool bForceRefpose; 	//[Offset: 0x0, Size: 1]
	bool bOnlyAllowAutonomousTickPose; 	//[Offset: 0x0, Size: 1]
	bool bIsAutonomousTickPose; 	//[Offset: 0x0, Size: 1]
	bool bOldForceRefPose; 	//[Offset: 0x0, Size: 1]
	bool bShowPrePhysBones; 	//[Offset: 0x0, Size: 1]
	bool bRequiredBonesUpToDate; 	//[Offset: 0x0, Size: 1]
	bool bAnimTreeInitialised; 	//[Offset: 0x0, Size: 1]
	bool bIncludeComponentLocationIntoBounds; 	//[Offset: 0x0, Size: 1]
	bool bEnableLineCheckWithBounds; 	//[Offset: 0x0, Size: 1]
	bool bUseBendingElements; 	//[Offset: 0x0, Size: 1]
	bool bUseTetrahedralConstraints; 	//[Offset: 0x0, Size: 1]
	bool bUseThinShellVolumeConstraints; 	//[Offset: 0x0, Size: 1]
	bool bUseSelfCollisions; 	//[Offset: 0x0, Size: 1]
	bool bUseContinuousCollisionDetection; 	//[Offset: 0x0, Size: 1]
	bool bPropagateCurvesToSlaves; 	//[Offset: 0x0, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating; 	//[Offset: 0x0, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating; 	//[Offset: 0x0, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched; 	//[Offset: 0x0, Size: 1]
	uint16 CachedAnimCurveUidVersion; 	//[Offset: 0x0, Size: 2]
	enum EClothMassMode MassMode { //[Offset: 0x0, Size: 1]
		UniformMass = 0
		TotalMass = 74007300000000
		Density = 62006900000000
		MaxClothMassMode = 7900000000
		EClothMassMode_MAX = 0
	};
	float UniformMass; 	//[Offset: 0x0, Size: 4]
	float TotalMass; 	//[Offset: 0x0, Size: 4]
	float Density; 	//[Offset: 0x0, Size: 4]
	float MinPerParticleMass; 	//[Offset: 0x0, Size: 4]
	float ClothBlendWeight; 	//[Offset: 0x0, Size: 4]
	float EdgeStiffness; 	//[Offset: 0x0, Size: 4]
	float BendingStiffness; 	//[Offset: 0x0, Size: 4]
	float AreaStiffness; 	//[Offset: 0x0, Size: 4]
	float VolumeStiffness; 	//[Offset: 0x0, Size: 4]
	float StrainLimitingStiffness; 	//[Offset: 0x0, Size: 4]
	float ShapeTargetStiffness; 	//[Offset: 0x0, Size: 4]
	bool bWaitForParallelClothTask; 	//[Offset: 0x0, Size: 1]
	FName[] DisallowedAnimCurves; //[Offset: 0x0, Size: 16]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	delegate OnConstraintBroken; 	//[Offset: 0x0, Size: 16]
	ClothingSimulationFactory* ClothingSimulationFactory; 	//[Offset: 0x0, Size: 8]
	float TeleportDistanceThreshold; 	//[Offset: 0x0, Size: 4]
	float TeleportRotationThreshold; 	//[Offset: 0x0, Size: 4]
	uint32 LastPoseTickFrame; 	//[Offset: 0x0, Size: 4]
	ClothingSimulationInteractor* ClothingInteractor; 	//[Offset: 0x0, Size: 8]
	delegate OnAnimInitialized; 	//[Offset: 0x0, Size: 16]
	Void UpdateComponentSpaceTransformFixArray(); //Addr 0x75ee1d19b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbb4400
Class: CheatManager.Object, Addr: 0x76902e4700
	DebugCameraController* DebugCameraControllerRef; 	//[Offset: 0x0, Size: 8]
	DebugCameraController* DebugCameraControllerClass; 	//[Offset: 0x0, Size: 8]
	Void Walk(); //Addr 0x75ee00182c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac168a00
Class: CheckBoxStyleAsset.Object, Addr: 0x76902e4480
	CheckBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1504]
Class: ChildActorComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902e4200
	Actor* ChildActorClass; 	//[Offset: 0x0, Size: 8]
	Actor* ChildActor; 	//[Offset: 0x0, Size: 8]
	Actor* ChildActorTemplate; 	//[Offset: 0x0, Size: 8]
	Void SetChildActorClass(classActor InClass); //Addr 0x75ee0031d4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac168900
Class: Player.Object, Addr: 0x76902e3a80
	PlayerController* PlayerController; 	//[Offset: 0x0, Size: 8]
	int CurrentNetSpeed; 	//[Offset: 0x0, Size: 4]
	int ConfiguredInternetSpeed; 	//[Offset: 0x0, Size: 4]
	int ConfiguredLanSpeed; 	//[Offset: 0x0, Size: 4]
Class: NetConnection.Player.Object, Addr: 0x76902e3d00
	ChildConnection*[] Children; //[Offset: 0x0, Size: 16]
	NetDriver* Driver; 	//[Offset: 0x0, Size: 8]
	PackageMap* PackageMapClass; 	//[Offset: 0x0, Size: 8]
	PackageMap* PackageMap; 	//[Offset: 0x0, Size: 8]
	Channel*[] OpenChannels; //[Offset: 0x0, Size: 16]
	Actor*[] SentTemporaries; //[Offset: 0x0, Size: 16]
	Actor* ViewTarget; 	//[Offset: 0x0, Size: 8]
	Actor* OwningActor; 	//[Offset: 0x0, Size: 8]
	int MaxPacket; 	//[Offset: 0x0, Size: 4]
	bool InternalAck; 	//[Offset: 0x0, Size: 1]
	UniqueNetIdRepl StructProperty; 	//[Offset: 0x0, Size: 40]
	double LastReceiveTime; 	//[Offset: 0x0, Size: 8]
	Channel*[] ChannelsToTick; //[Offset: 0x0, Size: 16]
Class: GameMapsSettings.Object, Addr: 0x7690272400
	StrProperty LocalMapOptions; 	//[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	bool bUseSplitscreen; 	//[Offset: 0x0, Size: 1]
	enum ETwoPlayerSplitScreenType TwoPlayerSplitscreenLayout { //[Offset: 0x0, Size: 1]
		Horizontal = 0
		Vertical = 6e006900000000
		ETwoPlayerSplitScreenType_MAX = 0
	};
	enum EThreePlayerSplitScreenType ThreePlayerSplitscreenLayout { //[Offset: 0x0, Size: 1]
		FavorTop = 0
		FavorBottom = 6e006900000000
		Vertical = 6c006500000000
		Horizontal = 0
		EThreePlayerSplitScreenType_MAX = 0
	};
	enum EFourPlayerSplitScreenType FourPlayerSplitscreenLayout { //[Offset: 0x0, Size: 1]
		Grid = 0
		Vertical = 64006100000000
		Horizontal = 74006500000000
		EFourPlayerSplitScreenType_MAX = 7600000000
	};
	bool bOffsetPlayerGamepadIds; 	//[Offset: 0x0, Size: 1]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	structGameModeName[] GameModeMapPrefixes; //[Offset: 0x0, Size: 16]
	structGameModeName[] GameModeClassAliases; //[Offset: 0x0, Size: 16]
	Void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer); //Addr 0x75ec54cfb8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac027700
Class: ChildConnection.NetConnection.Player.Object, Addr: 0x76902e3f80
	NetConnection* Parent; 	//[Offset: 0x0, Size: 8]
Class: PlatformInterfaceBase.Object, Addr: 0x76902e3580
	structDelegateArray[] AllDelegates; //[Offset: 0x0, Size: 16]
Class: CloudStorageBase.PlatformInterfaceBase.Object, Addr: 0x76902e3800
	FString[] LocalCloudFiles; //[Offset: 0x0, Size: 16]
	bool bSuppressDelegateCalls; 	//[Offset: 0x0, Size: 1]
Class: Commandlet.Object, Addr: 0x75a527e700
	StrProperty HelpDescription; 	//[Offset: 0x0, Size: 16]
	StrProperty HelpUsage; 	//[Offset: 0x0, Size: 16]
	StrProperty HelpWebLink; 	//[Offset: 0x0, Size: 16]
	FString[] HelpParamNames; //[Offset: 0x0, Size: 16]
	FString[] HelpParamDescriptions; //[Offset: 0x0, Size: 16]
	bool IsServer; 	//[Offset: 0x0, Size: 1]
	bool IsClient; 	//[Offset: 0x0, Size: 1]
	bool IsEditor; 	//[Offset: 0x0, Size: 1]
	bool LogToConsole; 	//[Offset: 0x0, Size: 1]
	bool ShowErrorCount; 	//[Offset: 0x0, Size: 1]
	bool ShowProgress; 	//[Offset: 0x0, Size: 1]
Class: DynamicBlueprintBinding.Object, Addr: 0x76902b3a80
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902e3080
	structBlueprintComponentDelegateBinding[] ComponentDelegateBindings; //[Offset: 0x0, Size: 16]
Class: ActorComponentInstanceDataTransientOuter.Object, Addr: 0x76902e2e00
Class: CurveTable.Object, Addr: 0x76902e2900
Class: CompositeCurveTable.CurveTable.Object, Addr: 0x76902e2b80
	CurveTable*[] ParentTables; //[Offset: 0x0, Size: 16]
	CurveTable*[] OldParentTables; //[Offset: 0x0, Size: 16]
Class: DataTable.Object, Addr: 0x76902e2400
	ScriptStruct* RowStruct; 	//[Offset: 0x0, Size: 8]
	bool bStripFromClientBuilds; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreExtraFields; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreMissingFields; 	//[Offset: 0x0, Size: 1]
	StrProperty ImportKeyField; 	//[Offset: 0x0, Size: 16]
	structVector GetRowDataVector(constoutrefFName RowName, int DataOffset); //Addr 0x75ee0115ec [Final|Native] // UFieldProperty addr: 0x75ac168500
Class: CompositeDataTable.DataTable.Object, Addr: 0x76902e2680
	DataTable*[] ParentTables; //[Offset: 0x0, Size: 16]
	DataTable*[] OldParentTables; //[Offset: 0x0, Size: 16]
Class: Console.Object, Addr: 0x76902e2180
	LocalPlayer* ConsoleTargetPlayer; 	//[Offset: 0x0, Size: 8]
	Texture2D* DefaultTexture_Black; 	//[Offset: 0x0, Size: 8]
	Texture2D* DefaultTexture_White; 	//[Offset: 0x0, Size: 8]
	FString[] HistoryBuffer; //[Offset: 0x0, Size: 16]
Class: ConsoleSettings.Object, Addr: 0x7690272680
	int MaxScrollbackSize; 	//[Offset: 0x0, Size: 4]
	structAutoCompleteCommand[] ManualAutoCompleteList; //[Offset: 0x0, Size: 16]
	FString[] AutoCompleteMapPaths; //[Offset: 0x0, Size: 16]
	float BackgroundOpacityPercentage; 	//[Offset: 0x0, Size: 4]
	bool bOrderTopToBottom; 	//[Offset: 0x0, Size: 1]
	bool bDisplayHelpInAutoComplete; 	//[Offset: 0x0, Size: 1]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
Class: ControlChannel.Channel.Object, Addr: 0x76902e1780
Class: Controller.Actor.Object, Addr: 0x75a5273a80
	PlayerState* PlayerState; 	//[Offset: 0x33097, Size: 8]
	delegate OnInstigatedAnyDamage; 	//[Offset: 0x0, Size: 16]
	FName StateName; 	//[Offset: 0x0, Size: 12]
	Pawn* Pawn; 	//[Offset: 0x33879, Size: 8]
	Character* Character; 	//[Offset: 0x0, Size: 8]
	SceneComponent* TransformComponent; 	//[Offset: 0x0, Size: 8]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bAttachToPawn; 	//[Offset: 0x0, Size: 1]
	Void UnPossess(); //Addr 0x75ee009d24 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac430400
Class: StreamingSettings.DeveloperSettings.Object, Addr: 0x76902e1500
	bool AsyncLoadingThreadEnabled; 	//[Offset: 0x0, Size: 1]
	bool WarnIfTimeLimitExceeded; 	//[Offset: 0x0, Size: 1]
	float TimeLimitExceededMultiplier; 	//[Offset: 0x0, Size: 4]
	float TimeLimitExceededMinTime; 	//[Offset: 0x0, Size: 4]
	int MinBulkDataSizeForAsyncLoading; 	//[Offset: 0x0, Size: 4]
	bool UseBackgroundLevelStreaming; 	//[Offset: 0x0, Size: 1]
	bool AsyncLoadingUseFullTimeLimit; 	//[Offset: 0x0, Size: 1]
	float AsyncLoadingTimeLimit; 	//[Offset: 0x0, Size: 4]
	float PriorityAsyncLoadingExtraTime; 	//[Offset: 0x0, Size: 4]
	float LevelStreamingActorsUpdateTimeLimit; 	//[Offset: 0x0, Size: 4]
	float PriorityLevelStreamingActorsUpdateExtraTime; 	//[Offset: 0x0, Size: 4]
	int LevelStreamingComponentsRegistrationGranularity; 	//[Offset: 0x0, Size: 4]
	float LevelStreamingUnregisterComponentsTimeLimit; 	//[Offset: 0x0, Size: 4]
	int LevelStreamingComponentsUnregistrationGranularity; 	//[Offset: 0x0, Size: 4]
	bool FlushStreamingOnExit; 	//[Offset: 0x0, Size: 1]
	bool EventDrivenLoaderEnabled; 	//[Offset: 0x0, Size: 1]
Class: GarbageCollectionSettings.DeveloperSettings.Object, Addr: 0x76902e1280
	float TimeBetweenPurgingPendingKillObjects; 	//[Offset: 0x0, Size: 4]
	bool FlushStreamingOnGC; 	//[Offset: 0x0, Size: 1]
	bool AllowParallelGC; 	//[Offset: 0x0, Size: 1]
	bool IncrementalBeginDestroyEnabled; 	//[Offset: 0x0, Size: 1]
	bool MultithreadedDestructionEnabled; 	//[Offset: 0x0, Size: 1]
	bool CreateGCClusters; 	//[Offset: 0x0, Size: 1]
	bool AssetClusteringEnabled; 	//[Offset: 0x0, Size: 1]
	bool ActorClusteringEnabled; 	//[Offset: 0x0, Size: 1]
	bool BlueprintClusteringEnabled; 	//[Offset: 0x0, Size: 1]
	bool UseDisregardForGCOnDedicatedServers; 	//[Offset: 0x0, Size: 1]
	int MinGCClusterSize; 	//[Offset: 0x0, Size: 4]
	int NumRetriesBeforeForcingGC; 	//[Offset: 0x0, Size: 4]
	int MaxObjectsNotConsideredByGC; 	//[Offset: 0x0, Size: 4]
	int SizeOfPermanentObjectPool; 	//[Offset: 0x0, Size: 4]
	int MaxObjectsInGame; 	//[Offset: 0x0, Size: 4]
	int MaxObjectsInEditor; 	//[Offset: 0x0, Size: 4]
Class: CsmTrackingActor.Actor.Object, Addr: 0x76902e1000
	Actor* CsmTrackingActor; 	//[Offset: 0x0, Size: 8]
	DirectionalLight* DirectionalLight; 	//[Offset: 0x0, Size: 8]
	Void EnableCsmTracking(bool bEnable); //Addr 0x75ee00ba68 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16c600
Class: CullDistanceVolume.Volume.Brush.Actor.Object, Addr: 0x76902e0d80
	structCullDistanceSizePair[] CullDistances; //[Offset: 0x0, Size: 16]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
Class: CurveBase.Object, Addr: 0x76902e0b00
	Void GetValueRange(outfloat MinValue, outfloat MaxValue); //Addr 0x75ee00c018 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac16c400
Class: CurveEdPresetCurve.Object, Addr: 0x76902e0880
Class: CurveFloat.CurveBase.Object, Addr: 0x76902e0600
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	bool bIsEventCurve; 	//[Offset: 0x0, Size: 1]
	float GetFloatValue(float InTime); //Addr 0x75ee00e540 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac16c300
Class: CurveLinearColor.CurveBase.Object, Addr: 0x76902e0380
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	float AdjustHue; 	//[Offset: 0x0, Size: 4]
	float AdjustSaturation; 	//[Offset: 0x0, Size: 4]
	float AdjustBrightness; 	//[Offset: 0x0, Size: 4]
	float AdjustBrightnessCurve; 	//[Offset: 0x0, Size: 4]
	float AdjustVibrance; 	//[Offset: 0x0, Size: 4]
	float AdjustMinAlpha; 	//[Offset: 0x0, Size: 4]
	float AdjustMaxAlpha; 	//[Offset: 0x0, Size: 4]
	structLinearColor GetLinearColorValue(float InTime); //Addr 0x75ee00eb28 [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac16c100
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x76902e0100
	uint32 TextureSize; 	//[Offset: 0x0, Size: 4]
	CurveLinearColor*[] GradientCurves; //[Offset: 0x0, Size: 16]
	bool GetCurvePosition(CurveLinearColor* InCurve, outfloat position); //Addr 0x75ee00ef18 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16be00
Class: CurveSourceInterface.Interface.Object, Addr: 0x76902ea100
	float GetCurveValue(FName CurveName); //Addr 0x75ee00f56c [Native|Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75ac16bb00
Class: CurveVector.CurveBase.Object, Addr: 0x76902e9e80
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	structVector GetVectorValue(float InTime); //Addr 0x75ee010150 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac16ba00
Class: DamageType.Object, Addr: 0x76902e9c00
	bool bCausedByWorld; 	//[Offset: 0x0, Size: 1]
	bool bScaleMomentumByMass; 	//[Offset: 0x0, Size: 1]
	bool bRadialDamageVelChange; 	//[Offset: 0x0, Size: 1]
	float DamageImpulse; 	//[Offset: 0x0, Size: 4]
	float DestructibleImpulse; 	//[Offset: 0x0, Size: 4]
	float DestructibleDamageSpreadScale; 	//[Offset: 0x0, Size: 4]
	float DamageFalloff; 	//[Offset: 0x0, Size: 4]
Class: DataAsset.Object, Addr: 0x75a5278300
	DataAsset* NativeClass; 	//[Offset: 0x0, Size: 8]
Class: PrimaryDataAsset.DataAsset.Object, Addr: 0x76902e9980
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902e9700
	Void GetDataTableRowNames(DataTable* Table, outFName[] OutRowNames); //Addr 0x75ee012040 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac16b500
Class: PlayerController.Controller.Actor.Object, Addr: 0x75a5273800
	Player* Player; 	//[Offset: 0x0, Size: 8]
	Pawn* AcknowledgedPawn; 	//[Offset: 0x0, Size: 8]
	InterpTrackInstDirector* ControllingDirTrackInst; 	//[Offset: 0x0, Size: 8]
	HUD* MyHUD; 	//[Offset: 0x0, Size: 8]
	PlayerCameraManager* PlayerCameraManager; 	//[Offset: 0x0, Size: 8]
	PlayerCameraManager* PlayerCameraManagerClass; 	//[Offset: 0x0, Size: 8]
	bool bAutoManageActiveCameraTarget; 	//[Offset: 0x0, Size: 1]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float SmoothTargetViewRotationSpeed; 	//[Offset: 0x0, Size: 4]
	Actor*[] HiddenActors; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] HiddenPrimitiveComponents; //[Offset: 0x0, Size: 16]
	float LastSpectatorStateSynchTime; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	int ClientCap; 	//[Offset: 0x0, Size: 4]
	CheatManager* CheatManager; 	//[Offset: 0x0, Size: 8]
	CheatManager* CheatClass; 	//[Offset: 0x0, Size: 8]
	PlayerInput* PlayerInput; 	//[Offset: 0x0, Size: 8]
	structActiveForceFeedbackEffect[] ActiveForceFeedbackEffects; //[Offset: 0x0, Size: 16]
	bool bPlayerIsWaiting; 	//[Offset: 0x0, Size: 1]
	byte NetPlayerIndex; //[Offset: 0x0, Size: 1]
	NetConnection* PendingSwapConnection; 	//[Offset: 0x0, Size: 8]
	NetConnection* NetConnection; 	//[Offset: 0x0, Size: 8]
	float InputYawScale; 	//[Offset: 0x0, Size: 4]
	float InputPitchScale; 	//[Offset: 0x0, Size: 4]
	float InputRollScale; 	//[Offset: 0x0, Size: 4]
	bool bShowMouseCursor; 	//[Offset: 0x0, Size: 1]
	bool bEnableClickEvents; 	//[Offset: 0x0, Size: 1]
	bool bEnableTouchEvents; 	//[Offset: 0x0, Size: 1]
	bool bEnableMouseOverEvents; 	//[Offset: 0x0, Size: 1]
	bool bEnableTouchOverEvents; 	//[Offset: 0x0, Size: 1]
	bool bForceFeedbackEnabled; 	//[Offset: 0x0, Size: 1]
	float ForceFeedbackScale; 	//[Offset: 0x0, Size: 4]
	structKey[] ClickEventKeys; //[Offset: 0x0, Size: 16]
	enum EMouseCursor DefaultMouseCursor { //[Offset: 0x0, Size: 1]
		None = 0
		Default = 7500000000
		TextEditBeam = 1600000000
		ResizeLeftRight = 7500000000
		ResizeUpDown = 800000000
		ResizeSouthEast = 7500000000
		ResizeSouthWest = 1900000000
		CardinalCross = 7500000000
		Crosshairs = 300000000
		Hand = 7500000000
		GrabHand = 100000000
		GrabHandClosed = 7500000000
		SlashedCircle = 1000000000
		EyeDropper = 7500000000
		EMouseCursor_MAX = 0
	};
	enum EMouseCursor CurrentMouseCursor { //[Offset: 0x0, Size: 1]
		None = 0
		Default = 7500000000
		TextEditBeam = 1600000000
		ResizeLeftRight = 7500000000
		ResizeUpDown = 800000000
		ResizeSouthEast = 7500000000
		ResizeSouthWest = 1900000000
		CardinalCross = 7500000000
		Crosshairs = 300000000
		Hand = 7500000000
		GrabHand = 100000000
		GrabHandClosed = 7500000000
		SlashedCircle = 1000000000
		EyeDropper = 7500000000
		EMouseCursor_MAX = 0
	};
	enum ECollisionChannel DefaultClickTraceChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	enum ECollisionChannel CurrentClickTraceChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	float HitResultTraceDistance; 	//[Offset: 0x0, Size: 4]
	uint16 SeamlessTravelCount; 	//[Offset: 0x0, Size: 2]
	uint16 LastCompletedSeamlessTravelCount; 	//[Offset: 0x0, Size: 2]
	bool RequeireTickInput; 	//[Offset: 0x0, Size: 1]
	InputComponent* InactiveStateInputComponent; 	//[Offset: 0x0, Size: 8]
	bool bShouldPerformFullTickWhenPaused; 	//[Offset: 0x0, Size: 1]
	TouchInterface* CurrentTouchInterface; 	//[Offset: 0x0, Size: 8]
	SpectatorPawn* SpectatorPawn; 	//[Offset: 0x0, Size: 8]
	bool bIsLocalPlayerController; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool WasInputKeyJustReleased(structKey Key); //Addr 0x75ee188d20 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac438500
Class: DebugCameraController.PlayerController.Controller.Actor.Object, Addr: 0x76902e9480
	bool bShowSelectedInfo; 	//[Offset: 0x0, Size: 1]
	bool bIsFrozenRendering; 	//[Offset: 0x0, Size: 1]
	bool bIsOrbitingSelectedActor; 	//[Offset: 0x0, Size: 1]
	bool bOrbitPivotUseCenter; 	//[Offset: 0x0, Size: 1]
	bool bEnableBufferVisualization; 	//[Offset: 0x0, Size: 1]
	bool bEnableBufferVisualizationFullMode; 	//[Offset: 0x0, Size: 1]
	bool bIsBufferVisualizationInputSetup; 	//[Offset: 0x0, Size: 1]
	bool bLastDisplayEnabled; 	//[Offset: 0x0, Size: 1]
	DrawFrustumComponent* DrawFrustum; 	//[Offset: 0x0, Size: 8]
	Actor* SelectedActor; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* SelectedComponent; 	//[Offset: 0x0, Size: 8]
	HitResult StructProperty; 	//[Offset: 0x0, Size: 160]
	PlayerController* OriginalControllerRef; 	//[Offset: 0x0, Size: 8]
	Player* OriginalPlayer; 	//[Offset: 0x0, Size: 8]
	float SpeedScale; 	//[Offset: 0x0, Size: 4]
	float InitialMaxSpeed; 	//[Offset: 0x0, Size: 4]
	float InitialAccel; 	//[Offset: 0x0, Size: 4]
	float InitialDecel; 	//[Offset: 0x0, Size: 4]
	Void ToggleDisplay(); //Addr 0x75ee012e58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16ae00
Class: DebugCameraControllerSettings.DeveloperSettings.Object, Addr: 0x76902e9200
	structDebugCameraControllerSettingsViewModeIndex[] CycleViewModes; //[Offset: 0x0, Size: 16]
Class: HUD.Actor.Object, Addr: 0x76902e8d00
	PlayerController* PlayerOwner; 	//[Offset: 0x0, Size: 8]
	bool bLostFocusPaused; 	//[Offset: 0x0, Size: 1]
	bool bShowHUD; 	//[Offset: 0x0, Size: 1]
	bool bShowDebugInfo; 	//[Offset: 0x0, Size: 1]
	int CurrentTargetIndex; 	//[Offset: 0x0, Size: 4]
	bool bShowHitBoxDebugInfo; 	//[Offset: 0x0, Size: 1]
	bool bShowOverlays; 	//[Offset: 0x0, Size: 1]
	bool bEnableDebugTextShadow; 	//[Offset: 0x0, Size: 1]
	Actor*[] PostRenderedActors; //[Offset: 0x0, Size: 16]
	FName[] DebugDisplay; //[Offset: 0x0, Size: 16]
	FName[] ToggledDebugCategories; //[Offset: 0x0, Size: 16]
	Canvas* Canvas; 	//[Offset: 0x0, Size: 8]
	Canvas* DebugCanvas; 	//[Offset: 0x0, Size: 8]
	structDebugTextInfo[] DebugTextList; //[Offset: 0x0, Size: 16]
	Actor* ShowDebugTargetDesiredClass; 	//[Offset: 0x0, Size: 8]
	Actor* ShowDebugTargetActor; 	//[Offset: 0x0, Size: 8]
	Void ShowHUD(); //Addr 0x75ee062a6c [Native] // UFieldProperty addr: 0x75ac16d300
Class: DebugCameraHUD.HUD.Actor.Object, Addr: 0x76902e8f80
Class: DebugDrawService.BlueprintFunctionLibrary.Object, Addr: 0x76902e8a80
Class: DecalActor.Actor.Object, Addr: 0x76902e8800
	DecalComponent* Decal; 	//[Offset: 0x0, Size: 8]
	Void SetDecalMaterial(MaterialInterface* NewDecalMaterial); //Addr 0x75ee018ea4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16d000
Class: DecalComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690269200
	MaterialInterface* DecalMaterial; 	//[Offset: 0x0, Size: 8]
	int SortOrder; 	//[Offset: 0x0, Size: 4]
	float FadeScreenSize; 	//[Offset: 0x0, Size: 4]
	float FadeStartDelay; 	//[Offset: 0x0, Size: 4]
	float FadeDuration; 	//[Offset: 0x0, Size: 4]
	float FadeInDuration; 	//[Offset: 0x0, Size: 4]
	float FadeInStartDelay; 	//[Offset: 0x0, Size: 4]
	bool bDestroyOwnerAfterFade; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetSortOrder(int Value); //Addr 0x75ee0194b0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac024700
Class: DefaultPawn.Pawn.Actor.Object, Addr: 0x76902e8580
	float BaseTurnRate; 	//[Offset: 0x0, Size: 4]
	float BaseLookUpRate; 	//[Offset: 0x0, Size: 4]
	PawnMovementComponent* MovementComponent; 	//[Offset: 0x0, Size: 8]
	SphereComponent* CollisionComponent; 	//[Offset: 0x0, Size: 8]
	StaticMeshComponent* MeshComponent; 	//[Offset: 0x0, Size: 8]
	bool bAddDefaultMovementBindings; 	//[Offset: 0x0, Size: 1]
	Void TurnAtRate(float Rate); //Addr 0x75ee019efc [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16cb00
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902ec900
	float SphereRadius; 	//[Offset: 0x0, Size: 4]
	Void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); //Addr 0x75ee1fb7e4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac194000
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x76902f5100
	float MaxSpeed; 	//[Offset: 0x0, Size: 4]
	float Acceleration; 	//[Offset: 0x0, Size: 4]
	float Deceleration; 	//[Offset: 0x0, Size: 4]
	float TurningBoost; 	//[Offset: 0x0, Size: 4]
	bool bPositionCorrected; 	//[Offset: 0x0, Size: 1]
Class: StaticMesh.StreamableRenderAsset.Object, Addr: 0x7690398300
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bOverrideGlobalNumReduceLODs; 	//[Offset: 0x0, Size: 1]
	int NumReduceLODs_UltraLow; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Low; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Mid; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_High; 	//[Offset: 0x0, Size: 4]
	float LpvBiasMultiplier; 	//[Offset: 0x0, Size: 4]
	structStaticMaterial[] StaticMaterials; //[Offset: 0x0, Size: 16]
	float LightmapUVDensity; 	//[Offset: 0x0, Size: 4]
	int LightMapResolution; 	//[Offset: 0x0, Size: 4]
	int LightMapCoordinateIndex; 	//[Offset: 0x0, Size: 4]
	float DistanceFieldSelfShadowBias; 	//[Offset: 0x0, Size: 4]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	int LODForCollision; 	//[Offset: 0x0, Size: 4]
	bool bGenerateMeshDistanceField; 	//[Offset: 0x0, Size: 1]
	bool bStripComplexCollisionForConsole; 	//[Offset: 0x0, Size: 1]
	bool bHasNavigationData; 	//[Offset: 0x0, Size: 1]
	bool bSupportUniformlyDistributedSampling; 	//[Offset: 0x0, Size: 1]
	bool bSupportPhysicalMaterialMasks; 	//[Offset: 0x0, Size: 1]
	bool bIsBuiltAtRuntime; 	//[Offset: 0x0, Size: 1]
	bool bAllowCPUAccess; 	//[Offset: 0x0, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling; 	//[Offset: 0x0, Size: 1]
	StrProperty GameTypeID; 	//[Offset: 0x0, Size: 16]
	bool[] UseHalfPrecisionArray; //[Offset: 0x0, Size: 16]
	enum EPositionPrecisionType PositionPrecisionType { //[Offset: 0x0, Size: 1]
		PPT_Default = 0
		PPT_ForceHalf = 69007300000000
		PPT_ForceFull = 6f006900000000
		PPT_MAX = 0
	};
	PositionPrecisionTypeArray(ByteProperty)[] PositionPrecisionTypeArray; //[Offset: 0x0, Size: 16]
	StaticMeshSocket*[] Sockets; //[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	int ElementToIgnoreForTexFactor; 	//[Offset: 0x0, Size: 4]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	Object* EditableMesh; 	//[Offset: 0x0, Size: 8]
	NavCollisionBase* NavCollision; 	//[Offset: 0x0, Size: 8]
	Void RemoveSocket(StaticMeshSocket* Socket); //Addr 0x75ee20a468 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbb500
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024ce00
	int ForcedLodModel; 	//[Offset: 0x0, Size: 4]
	int PreviousLODLevel; 	//[Offset: 0x0, Size: 4]
	int MinLOD; 	//[Offset: 0x0, Size: 4]
	bool bOverrideGlobalNumReduceLODs; 	//[Offset: 0x0, Size: 1]
	int NumReduceLODs_UltraLow; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Low; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Mid; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_High; 	//[Offset: 0x0, Size: 4]
	int CustomWholeSceneShadowLOD; 	//[Offset: 0x0, Size: 4]
	int SubDivisionStepSize; 	//[Offset: 0x0, Size: 4]
	StaticMesh* StaticMesh; 	//[Offset: 0x3b1eb, Size: 8]
	bool bClearMeshWhileCooking; 	//[Offset: 0x0, Size: 1]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bEvaluateWorldPositionOffset; 	//[Offset: 0x0, Size: 1]
	bool bForceEnableOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bForceNotOcclued; 	//[Offset: 0x0, Size: 1]
	bool bOverrideWireframeColor; 	//[Offset: 0x0, Size: 1]
	bool bOverrideMinLOD; 	//[Offset: 0x0, Size: 1]
	bool bUseGloabalMinLOD; 	//[Offset: 0x0, Size: 1]
	bool bOverrideNavigationExport; 	//[Offset: 0x0, Size: 1]
	bool bForceNavigationObstacle; 	//[Offset: 0x0, Size: 1]
	bool bDisallowMeshPaintPerInstance; 	//[Offset: 0x0, Size: 1]
	bool bDisableRenderCache; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreInstanceForTextureStreaming; 	//[Offset: 0x0, Size: 1]
	bool bOverrideLightMapRes; 	//[Offset: 0x0, Size: 1]
	bool bCastDistanceFieldIndirectShadow; 	//[Offset: 0x0, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias; 	//[Offset: 0x0, Size: 1]
	bool bUseSubDivisions; 	//[Offset: 0x0, Size: 1]
	bool bUseDefaultCollision; 	//[Offset: 0x0, Size: 1]
	bool bForceCreatePhysicsState; 	//[Offset: 0x0, Size: 1]
	bool bReverseCulling; 	//[Offset: 0x0, Size: 1]
	int OverriddenLightMapRes; 	//[Offset: 0x0, Size: 4]
	float DistanceFieldIndirectShadowMinVisibility; 	//[Offset: 0x0, Size: 4]
	float DistanceFieldSelfShadowBias; 	//[Offset: 0x0, Size: 4]
	float StreamingDistanceMultiplier; 	//[Offset: 0x0, Size: 4]
	structStaticMeshComponentLODInfo[] LODData; //[Offset: 0x0, Size: 16]
	structStreamingTextureBuildInfo[] StreamingTextureData; //[Offset: 0x0, Size: 16]
	LightmassPrimitiveSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	bool SetStaticMesh(StaticMesh* NewMesh); //Addr 0x75ee20e300 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb6f00
Class: PhysicsVolume.Volume.Brush.Actor.Object, Addr: 0x76902e8080
	float TerminalVelocity; 	//[Offset: 0x0, Size: 4]
	int Priority; 	//[Offset: 0x0, Size: 4]
	float FluidFriction; 	//[Offset: 0x0, Size: 4]
	bool bWaterVolume; 	//[Offset: 0x0, Size: 1]
	bool bPhysicsOnContact; 	//[Offset: 0x0, Size: 1]
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object, Addr: 0x76902e8300
Class: DemoNetConnection.NetConnection.Player.Object, Addr: 0x76902e7e00
Class: NetDriver.Object, Addr: 0x76902e7900
	StrProperty NetConnectionClassName; 	//[Offset: 0x0, Size: 16]
	StrProperty ReplicationDriverClassName; 	//[Offset: 0x0, Size: 16]
	int MaxDownloadSize; 	//[Offset: 0x0, Size: 4]
	bool bClampListenServerTickRate; 	//[Offset: 0x0, Size: 1]
	int NetServerMaxTickRate; 	//[Offset: 0x0, Size: 4]
	int MaxNetTickRate; 	//[Offset: 0x0, Size: 4]
	int MaxInternetClientRate; 	//[Offset: 0x0, Size: 4]
	int MaxClientRate; 	//[Offset: 0x0, Size: 4]
	float ServerTravelPause; 	//[Offset: 0x0, Size: 4]
	float SpawnPrioritySeconds; 	//[Offset: 0x0, Size: 4]
	float RelevantTimeout; 	//[Offset: 0x0, Size: 4]
	float KeepAliveTime; 	//[Offset: 0x0, Size: 4]
	float InitialConnectTimeout; 	//[Offset: 0x0, Size: 4]
	float ConnectionTimeout; 	//[Offset: 0x0, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds; 	//[Offset: 0x0, Size: 4]
	bool bNoTimeouts; 	//[Offset: 0x0, Size: 1]
	bool bNeverApplyNetworkEmulationSettings; 	//[Offset: 0x0, Size: 1]
	NetConnection* ServerConnection; 	//[Offset: 0x0, Size: 8]
	NetConnection*[] ClientConnections; //[Offset: 0x0, Size: 16]
	int RecentlyDisconnectedTrackingTime; 	//[Offset: 0x0, Size: 4]
	World* World; 	//[Offset: 0x0, Size: 8]
	Package* WorldPackage; 	//[Offset: 0x0, Size: 8]
	Object* NetConnectionClass; 	//[Offset: 0x0, Size: 8]
	Object* ReplicationDriverClass; 	//[Offset: 0x0, Size: 8]
	FName NetDriverName; 	//[Offset: 0x0, Size: 12]
	structChannelDefinition[] ChannelDefinitions; //[Offset: 0x0, Size: 16]
	<FName, structChannelDefinition> ChannelDefinitionMap; //[Offset: 0x0, Size: 80]
	Channel*[] ActorChannelPool; //[Offset: 0x0, Size: 16]
	float Time; 	//[Offset: 0x0, Size: 4]
	ReplicationDriver* ReplicationDriver; 	//[Offset: 0x0, Size: 8]
Class: DemoNetDriver.NetDriver.Object, Addr: 0x76902e7b80
	<FString, structRollbackNetStartupActorInfo> RollbackNetStartupActors; //[Offset: 0x0, Size: 80]
	float CheckpointSaveMaxMSPerFrame; 	//[Offset: 0x0, Size: 4]
	structMulticastRecordOptions[] MulticastRecordOptions; //[Offset: 0x0, Size: 16]
	bool bIsLocalReplay; 	//[Offset: 0x0, Size: 1]
	PlayerController*[] SpectatorControllers; //[Offset: 0x0, Size: 16]
Class: PendingNetGame.Object, Addr: 0x76902e7400
	NetDriver* NetDriver; 	//[Offset: 0x0, Size: 8]
	DemoNetDriver* DemoNetDriver; 	//[Offset: 0x0, Size: 8]
Class: DemoPendingNetGame.PendingNetGame.Object, Addr: 0x76902e7680
Class: DestructibleInterface.Interface.Object, Addr: 0x76902e7180
Class: DeviceProfileFragment.Object, Addr: 0x76902e6a00
Class: SoundBase.Object, Addr: 0x7690285380
	SoundClass* SoundClassObject; 	//[Offset: 0x0, Size: 8]
	bool bDebug; 	//[Offset: 0x0, Size: 1]
	bool bOverrideConcurrency; 	//[Offset: 0x0, Size: 1]
	bool bOutputToBusOnly; 	//[Offset: 0x0, Size: 1]
	bool bHasDelayNode; 	//[Offset: 0x0, Size: 1]
	bool bHasConcatenatorNode; 	//[Offset: 0x0, Size: 1]
	bool bBypassVolumeScaleForPriority; 	//[Offset: 0x0, Size: 1]
	enum EVirtualizationMode VirtualizationMode { //[Offset: 0x0, Size: 1]
		Disabled = 0
		PlayWhenSilent = 74007200000000
		Restart = 6f004d00000000
		EVirtualizationMode_MAX = 0
	};
	SoundConcurrency* ConcurrencySet; //[Offset: 0x0, Size: 80]
	SoundConcurrencySettings StructProperty; 	//[Offset: 0x0, Size: 36]
	float Duration; 	//[Offset: 0x0, Size: 4]
	float MaxDistance; 	//[Offset: 0x0, Size: 4]
	float TotalSamples; 	//[Offset: 0x0, Size: 4]
	float Priority; 	//[Offset: 0x0, Size: 4]
	SoundAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	SoundModulationDefaultRoutingSettings StructProperty; 	//[Offset: 0x0, Size: 72]
	SoundSubmixBase* SoundSubmixObject; 	//[Offset: 0x0, Size: 8]
	structSoundSubmixSendInfo[] SoundSubmixSends; //[Offset: 0x0, Size: 16]
	SoundEffectSourcePresetChain* SourceEffectChain; 	//[Offset: 0x0, Size: 8]
	structSoundSourceBusSendInfo[] BusSends; //[Offset: 0x0, Size: 16]
	structSoundSourceBusSendInfo[] PreEffectBusSends; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
Class: MaterialInterface.Object, Addr: 0x7690280b00
	SubsurfaceProfile* SubsurfaceProfile; 	//[Offset: 0x0, Size: 8]
	LightmassMaterialInterfaceSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	structMaterialTextureInfo[] TextureStreamingData; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	Void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse); //Addr 0x75ee138d5c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05fc00
Class: Material.MaterialInterface.Object, Addr: 0x7690348800
	PhysicalMaterial* PhysMaterial; 	//[Offset: 0x0, Size: 8]
	PhysicalMaterialMask* PhysMaterialMask; 	//[Offset: 0x0, Size: 8]
	PhysicalMaterial* PhysicalMaterialMap; 	//[Offset: 0x0, Size: 8]
	ScalarMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ScalarMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ScalarMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	VectorMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	VectorMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ColorMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialDomain MaterialDomain { //[Offset: 0x0, Size: 1]
		MD_Surface = 0
		MD_DeferredDecal = 75006c00000000
		MD_LightFunction = 63006900000000
		MD_Volume = 3a006400000000
		MD_PostProcess = 69006e00000000
		MD_UI = 72007000000000
		MD_RuntimeVirtualTexture = 69007400000000
		MD_MAX = 58004100000000
	};
	enum EBlendMode BlendMode { //[Offset: 0x0, Size: 1]
		BLEND_Opaque = 0
		BLEND_Masked = 0
		BLEND_Translucent = 0
		BLEND_Additive = 0
		BLEND_Modulate = 0
		BLEND_AlphaComposite = 0
		BLEND_AlphaHoldout = 0
		BLEND_Replace = 0
		BLEND_MAX = 0
	};
	enum EDecalBlendMode DecalBlendMode { //[Offset: 0x0, Size: 1]
		DBM_Translucent = 0
		DBM_Stain = 0
		DBM_Normal = 0
		DBM_Emissive = 0
		DBM_DBuffer_ColorNormalRoughness = 0
		DBM_DBuffer_Color = 0
		DBM_DBuffer_ColorNormal = 0
		DBM_DBuffer_ColorRoughness = 0
		DBM_DBuffer_Normal = 0
		DBM_DBuffer_NormalRoughness = 0
		DBM_DBuffer_Roughness = 0
		DBM_DBuffer_Emissive = 0
		DBM_DBuffer_AlphaComposite = 0
		DBM_DBuffer_EmissiveAlphaComposite = 0
		DBM_Volumetric_DistanceFunction = 0
		DBM_AlphaComposite = 0
		DBM_AmbientOcclusion = 0
		DBM_MAX = 0
	};
	enum EMaterialDecalResponse MaterialDecalResponse { //[Offset: 0x0, Size: 1]
		MDR_None = 0
		MDR_ColorNormalRoughness = 0
		MDR_Color = 0
		MDR_ColorNormal = 0
		MDR_ColorRoughness = 0
		MDR_Normal = 0
		MDR_NormalRoughness = 0
		MDR_Roughness = 0
		MDR_MAX = 0
	};
	enum EMaterialShadingModel ShadingModel { //[Offset: 0x0, Size: 1]
		MSM_Unlit = 0
		MSM_DefaultLit = 0
		MSM_Subsurface = 0
		MSM_PreintegratedSkin = 0
		MSM_ClearCoat = 0
		MSM_SubsurfaceProfile = 0
		MSM_TwoSidedFoliage = 0
		MSM_Hair = 700000000
		MSM_Cloth = 100000000
		MSM_Eye = 0
		MSM_SingleLayerWater = 0
		MSM_BakeDiffuseLighting = 0
		MSM_ThinTranslucent = 0
		MSM_NUM = 0
		MSM_FromMaterialExpression = 0
		MSM_MAX = 0
	};
	bool bCastDynamicShadowAsMasked; 	//[Offset: 0x0, Size: 1]
	bool bDisableRenderCache; 	//[Offset: 0x0, Size: 1]
	MaterialShadingModelField StructProperty; 	//[Offset: 0x0, Size: 2]
	float OpacityMaskClipValue; 	//[Offset: 0x0, Size: 4]
	VectorMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ScalarMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
	ScalarMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ShadingModelMaterialInput StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bEnableSeparateTranslucency; 	//[Offset: 0x0, Size: 1]
	bool bEnableResponsiveAA; 	//[Offset: 0x0, Size: 1]
	bool bScreenSpaceReflections; 	//[Offset: 0x0, Size: 1]
	bool bContactShadows; 	//[Offset: 0x0, Size: 1]
	bool TwoSided; 	//[Offset: 0x0, Size: 1]
	bool PerObjectShadow; 	//[Offset: 0x0, Size: 1]
	bool DitheredLODTransition; 	//[Offset: 0x0, Size: 1]
	bool DitherOpacityMask; 	//[Offset: 0x0, Size: 1]
	bool bAllowNegativeEmissiveColor; 	//[Offset: 0x0, Size: 1]
	enum ETranslucencyLightingMode TranslucencyLightingMode { //[Offset: 0x0, Size: 1]
		TLM_VolumetricNonDirectional = 0
		TLM_VolumetricDirectional = 75006c00000000
		TLM_VolumetricPerVertexNonDirectional = 63006900000000
		TLM_VolumetricPerVertexDirectional = 3a006400000000
		TLM_Surface = 69006e00000000
		TLM_SurfacePerPixelLighting = 72007000000000
		TLM_MAX = 69007400000000
	};
	bool bEnableMobileSeparateTranslucency; 	//[Offset: 0x0, Size: 1]
	bool bIsUsedForWidget3D; 	//[Offset: 0x0, Size: 1]
	int NumCustomizedUVs; 	//[Offset: 0x0, Size: 4]
	bool bForceTranslucentReceiveCSM; 	//[Offset: 0x0, Size: 1]
	float TranslucencyDirectionalLightingIntensity; 	//[Offset: 0x0, Size: 4]
	float TranslucentShadowDensityScale; 	//[Offset: 0x0, Size: 4]
	float TranslucentSelfShadowDensityScale; 	//[Offset: 0x0, Size: 4]
	float TranslucentSelfShadowSecondDensityScale; 	//[Offset: 0x0, Size: 4]
	float TranslucentSelfShadowSecondOpacity; 	//[Offset: 0x0, Size: 4]
	float TranslucentBackscatteringExponent; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float TranslucentShadowStartOffset; 	//[Offset: 0x0, Size: 4]
	bool bDisableDepthTest; 	//[Offset: 0x0, Size: 1]
	bool bDisableDepthTestInCustomDepth; 	//[Offset: 0x0, Size: 1]
	bool bUsedCustomDepthStencil; 	//[Offset: 0x0, Size: 1]
	bool bWriteOnlyAlpha; 	//[Offset: 0x0, Size: 1]
	bool bGenerateSphericalParticleNormals; 	//[Offset: 0x0, Size: 1]
	bool bTangentSpaceNormal; 	//[Offset: 0x0, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting; 	//[Offset: 0x0, Size: 1]
	bool bBlockGI; 	//[Offset: 0x0, Size: 1]
	bool bUsedAsSpecialEngineMaterial; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithSkeletalMesh; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithEditorCompositing; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithParticleSprites; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithBeamTrails; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithMeshParticles; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithNiagaraSprites; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithNiagaraRibbons; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithNiagaraMeshParticles; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithGeometryCache; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithStaticLighting; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithMorphTargets; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithSplineMeshes; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithInstancedStaticMeshes; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithGeometryCollections; 	//[Offset: 0x0, Size: 1]
	bool bUsesDistortion; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithClothing; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithWater; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithHairStrands; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithLidarPointCloud; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithVirtualHeightfieldMesh; 	//[Offset: 0x0, Size: 1]
	bool bUsedWithUI; 	//[Offset: 0x0, Size: 1]
	bool bAutomaticallySetUsageInEditor; 	//[Offset: 0x0, Size: 1]
	bool bFullyRough; 	//[Offset: 0x0, Size: 1]
	bool bUseFullPrecision; 	//[Offset: 0x0, Size: 1]
	enum EMaterialFloatPrecisionMode FloatPrecisionMode { //[Offset: 0x0, Size: 1]
		MFPM_Half = 0
		MFPM_Full_MaterialExpressionOnly = 65007400000000
		MFPM_Full = 65007200000000
		MFPM_MAX = 58000000000000
	};
	bool bUseLightmapDirectionality; 	//[Offset: 0x0, Size: 1]
	bool bUseAlphaToCoverage; 	//[Offset: 0x0, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL; 	//[Offset: 0x0, Size: 1]
	bool bUseHQForwardReflections; 	//[Offset: 0x0, Size: 1]
	bool bUsePlanarForwardReflections; 	//[Offset: 0x0, Size: 1]
	bool bOutputMobileSsrIntensity; 	//[Offset: 0x0, Size: 1]
	bool bNormalCurvatureToRoughness; 	//[Offset: 0x0, Size: 1]
	bool bForceDisableIBL; 	//[Offset: 0x0, Size: 1]
	enum EMaterialTessellationMode D3D11TessellationMode { //[Offset: 0x0, Size: 1]
		MTM_NoTessellation = 0
		MTM_FlatTessellation = 65007400000000
		MTM_PNTriangles = 61006c00000000
		MTM_MAX = 58004100000000
	};
	bool bEnableCrackFreeDisplacement; 	//[Offset: 0x0, Size: 1]
	bool bEnableAdaptiveTessellation; 	//[Offset: 0x0, Size: 1]
	bool AllowTranslucentCustomDepthWrites; 	//[Offset: 0x0, Size: 1]
	bool AllowTranslucentSmallDepthWrites; 	//[Offset: 0x0, Size: 1]
	bool Wireframe; 	//[Offset: 0x0, Size: 1]
	enum EMaterialShadingRate ShadingRate { //[Offset: 0x0, Size: 1]
		MSR_1x1 = 0
		MSR_2x1 = 75006c00000000
		MSR_1x2 = 63006900000000
		MSR_2x2 = 3a006400000000
		MSR_4x2 = 69006e00000000
		MSR_2x4 = 72007000000000
		MSR_4x4 = 69007400000000
		MSR_Count = 58004100000000
		MSR_MAX = 0
	};
	bool bCanMaskedBeAssumedOpaque; 	//[Offset: 0x0, Size: 1]
	bool bIsMasked; 	//[Offset: 0x0, Size: 1]
	bool bIsPreviewMaterial; 	//[Offset: 0x0, Size: 1]
	bool bIsFunctionPreviewMaterial; 	//[Offset: 0x0, Size: 1]
	bool bUseMaterialAttributes; 	//[Offset: 0x0, Size: 1]
	bool bCastRayTracedShadows; 	//[Offset: 0x0, Size: 1]
	bool bUseTranslucencyVertexFog; 	//[Offset: 0x0, Size: 1]
	bool bApplyCloudFogging; 	//[Offset: 0x0, Size: 1]
	bool bIsSky; 	//[Offset: 0x0, Size: 1]
	bool bComputeFogPerPixel; 	//[Offset: 0x0, Size: 1]
	bool bOutputTranslucentVelocity; 	//[Offset: 0x0, Size: 1]
	bool bAllowDevelopmentShaderCompile; 	//[Offset: 0x0, Size: 1]
	bool bIsMaterialEditorStatsMaterial; 	//[Offset: 0x0, Size: 1]
	enum EBlendableLocation BlendableLocation { //[Offset: 0x0, Size: 1]
		BL_AfterTonemapping = 0
		BL_BeforeTonemapping = 72005000000000
		BL_BeforeTranslucency = 3a006500000000
		BL_ReplacingTonemapper = 65006e00000000
		BL_SSRInput = 6f007400000000
		BL_MAX = 58004100000000
	};
	bool BlendableOutputAlpha; 	//[Offset: 0x0, Size: 1]
	bool bEnableStencilTest; 	//[Offset: 0x0, Size: 1]
	enum EMaterialStencilCompare StencilCompare { //[Offset: 0x0, Size: 1]
		MSC_Less = 0
		MSC_LessEqual = 0
		MSC_Greater = 0
		MSC_GreaterEqual = 0
		MSC_Equal = 0
		MSC_NotEqual = 0
		MSC_Never = 0
		MSC_Always = 0
		MSC_Count = 0
		MSC_MAX = 0
	};
	byte StencilRefValue; //[Offset: 0x0, Size: 1]
	enum ERefractionMode RefractionMode { //[Offset: 0x0, Size: 1]
		RM_IndexOfRefraction = 0
		RM_PixelNormalOffset = 69006c00000000
		RM_MAX = 0
	};
	int BlendablePriority; 	//[Offset: 0x0, Size: 4]
	bool bIsBlendable; 	//[Offset: 0x0, Size: 1]
	uint32 UsageFlagWarnings; 	//[Offset: 0x0, Size: 4]
	float RefractionDepthBias; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	float MaxDisplacement; 	//[Offset: 0x0, Size: 4]
	MaterialCachedExpressionData StructProperty; 	//[Offset: 0x0, Size: 552]
Class: SoundClass.Object, Addr: 0x7690394e80
	SoundClassProperties StructProperty; 	//[Offset: 0x0, Size: 128]
	SoundClass*[] ChildClasses; //[Offset: 0x0, Size: 16]
	structPassiveSoundMixModifier[] PassiveSoundMixModifiers; //[Offset: 0x0, Size: 16]
	SoundClass* ParentClass; 	//[Offset: 0x0, Size: 8]
Class: MaterialFunctionInterface.Object, Addr: 0x7690367b80
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialFunctionUsage MaterialFunctionUsage { //[Offset: 0x0, Size: 1]
		Default = 0
		MaterialLayer = 65007400000000
		MaterialLayerBlend = 6e006f00000000
		EMaterialFunctionUsage_MAX = 0
	};
Class: MaterialFunction.MaterialFunctionInterface.Object, Addr: 0x7690367e00
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
	bool bExposeToLibrary; 	//[Offset: 0x0, Size: 1]
	bool bPrefixParameterNames; 	//[Offset: 0x0, Size: 1]
Class: MaterialShaderQualitySettings.Object, Addr: 0x7690272b80
	<FName, ShaderPlatformQualitySettings*> ForwardSettingMap; //[Offset: 0x0, Size: 80]
Class: ShaderPlatformQualitySettings.Object, Addr: 0x7690272900
	MaterialQualityOverrides StructProperty; 	//[Offset: 0x0, Size: 10]
Class: DialogueSoundWaveProxy.SoundBase.Object, Addr: 0x76902e6500
Class: DialogueVoice.Object, Addr: 0x76902e6280
	enum EGrammaticalGender Gender { //[Offset: 0x0, Size: 1]
		Neuter = 0
		Masculine = 3a003a00000000
		Feminine = 6c006100000000
		Mixed = 73000000000000
		EGrammaticalGender_MAX = 0
	};
	enum EGrammaticalNumber Plurality { //[Offset: 0x0, Size: 1]
		Singular = 0
		Plural = 5800000000
		EGrammaticalNumber_MAX = 0
	};
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: DialogueWave.Object, Addr: 0x76902e6000
	bool bMature; 	//[Offset: 0x0, Size: 1]
	bool bOverride_SubtitleOverride; 	//[Offset: 0x0, Size: 1]
	StrProperty SpokenText; 	//[Offset: 0x0, Size: 16]
	StrProperty SubtitleOverride; 	//[Offset: 0x0, Size: 16]
	structDialogueContextMapping[] ContextMappings; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: Light.Actor.Object, Addr: 0x76902e5b00
	LightComponent* LightComponent; 	//[Offset: 0x0, Size: 8]
	bool bEnabled; 	//[Offset: 0x3c74b, Size: 1]
	Void ToggleEnabled(); //Addr 0x75ee0fdb30 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16f700
Class: DirectionalLight.Light.Actor.Object, Addr: 0x76902e5d80
Class: LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x76902e5380
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	float Brightness; 	//[Offset: 0x0, Size: 4]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bAffectsWorld; 	//[Offset: 0x0, Size: 1]
	bool CastShadows; 	//[Offset: 0x0, Size: 1]
	bool CastStaticShadows; 	//[Offset: 0x0, Size: 1]
	bool CastDynamicShadows; 	//[Offset: 0x0, Size: 1]
	bool bAffectTranslucentLighting; 	//[Offset: 0x0, Size: 1]
	bool bTransmission; 	//[Offset: 0x0, Size: 1]
	bool bCastVolumetricShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastDeepShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastRaytracedShadow; 	//[Offset: 0x0, Size: 1]
	bool bAffectReflection; 	//[Offset: 0x0, Size: 1]
	bool bAffectGlobalIllumination; 	//[Offset: 0x0, Size: 1]
	float DeepShadowLayerDistribution; 	//[Offset: 0x0, Size: 4]
	float IndirectLightingIntensity; 	//[Offset: 0x0, Size: 4]
	float VolumetricScatteringIntensity; 	//[Offset: 0x0, Size: 4]
	int SamplesPerPixel; 	//[Offset: 0x0, Size: 4]
	Void SetSamplesPerPixel(int NewValue); //Addr 0x75ee101b64 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac16ef00
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x76902e5600
	float Temperature; 	//[Offset: 0x0, Size: 4]
	float MaxDrawDistance; 	//[Offset: 0x0, Size: 4]
	float MaxDistanceFadeRange; 	//[Offset: 0x0, Size: 4]
	bool bUseTemperature; 	//[Offset: 0x0, Size: 1]
	int ShadowMapChannel; 	//[Offset: 0x0, Size: 4]
	bool bUsePoissonDiskPCF; 	//[Offset: 0x0, Size: 1]
	enum EPerObjectShadowChannel PerObjectShadowChannel { //[Offset: 0x0, Size: 1]
		EPOSC_None = 0
		EPOSC_First = 52006500000000
		EPOSC_Second = 6c006100000000
		EPOSC_Third = 62006100000000
		EPOSC_MAX = 58004100000000
	};
	float PerObjectShadowDepthBias; 	//[Offset: 0x0, Size: 4]
	float PerObjectShadowSlopeBias; 	//[Offset: 0x0, Size: 4]
	float MinRoughness; 	//[Offset: 0x0, Size: 4]
	float SpecularScale; 	//[Offset: 0x0, Size: 4]
	float ShadowResolutionScale; 	//[Offset: 0x0, Size: 4]
	float ShadowBias; 	//[Offset: 0x0, Size: 4]
	float ShadowSlopeBias; 	//[Offset: 0x0, Size: 4]
	float ShadowNormalOffset; 	//[Offset: 0x0, Size: 4]
	float ShadowSharpen; 	//[Offset: 0x0, Size: 4]
	float ContactShadowLength; 	//[Offset: 0x0, Size: 4]
	bool ContactShadowLengthInWS; 	//[Offset: 0x0, Size: 1]
	bool InverseSquaredFalloff; 	//[Offset: 0x0, Size: 1]
	bool CastTranslucentShadows; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly; 	//[Offset: 0x0, Size: 1]
	bool bAffectDynamicIndirectLighting; 	//[Offset: 0x0, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives; 	//[Offset: 0x0, Size: 1]
	LightingChannels StructProperty; 	//[Offset: 0x0, Size: 1]
	LightingChannelConstructs StructProperty; 	//[Offset: 0x0, Size: 1]
	MaterialInterface* LightFunctionMaterial; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	TextureLightProfile* IESTexture; 	//[Offset: 0x0, Size: 8]
	bool bUseIESBrightness; 	//[Offset: 0x0, Size: 1]
	float IESBrightnessScale; 	//[Offset: 0x0, Size: 4]
	float LightFunctionFadeDistance; 	//[Offset: 0x0, Size: 4]
	float DisabledBrightness; 	//[Offset: 0x0, Size: 4]
	bool bEnableLightShaftBloom; 	//[Offset: 0x0, Size: 1]
	float BloomScale; 	//[Offset: 0x0, Size: 4]
	float BloomThreshold; 	//[Offset: 0x0, Size: 4]
	float BloomMaxBrightness; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUseRayTracedDistanceFieldShadows; 	//[Offset: 0x0, Size: 1]
	float RayStartOffsetDepthScale; 	//[Offset: 0x0, Size: 4]
	Void SetVolumetricScatteringIntensity(float NewIntensity); //Addr 0x75ee0ff574 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac190f00
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x76902e5880
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ShadowCascadeBiasDistribution; 	//[Offset: 0x0, Size: 4]
	bool bEnableLightShaftOcclusion; 	//[Offset: 0x0, Size: 1]
	float OcclusionMaskDarkness; 	//[Offset: 0x0, Size: 4]
	float OcclusionDepthRange; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float WholeSceneDynamicShadowRadius; 	//[Offset: 0x0, Size: 4]
	float DynamicShadowDistanceMovableLight; 	//[Offset: 0x0, Size: 4]
	float DynamicShadowDistanceStationaryLight; 	//[Offset: 0x0, Size: 4]
	int DynamicShadowOffset; 	//[Offset: 0x0, Size: 4]
	int DynamicShadowCascades; 	//[Offset: 0x0, Size: 4]
	float CascadeDistributionExponent; 	//[Offset: 0x0, Size: 4]
	float CascadeTransitionFraction; 	//[Offset: 0x0, Size: 4]
	float ShadowDistanceFadeoutFraction; 	//[Offset: 0x0, Size: 4]
	bool bUseInsetShadowsForMovableObjects; 	//[Offset: 0x0, Size: 1]
	int FarShadowCascadeCount; 	//[Offset: 0x0, Size: 4]
	float FarShadowDistance; 	//[Offset: 0x0, Size: 4]
	float DistanceFieldShadowDistance; 	//[Offset: 0x0, Size: 4]
	float LightSourceAngle; 	//[Offset: 0x0, Size: 4]
	float LightSourceSoftAngle; 	//[Offset: 0x0, Size: 4]
	float ShadowSourceAngleFactor; 	//[Offset: 0x0, Size: 4]
	float TraceDistance; 	//[Offset: 0x0, Size: 4]
	int MobileCSMFirstCascadeMinWidth; 	//[Offset: 0x0, Size: 4]
	int MobileCSMFirstCascadeMaxWidth; 	//[Offset: 0x0, Size: 4]
	bool ExtendCascadeCullingBoundsWithCSMDistance; 	//[Offset: 0x0, Size: 1]
	int MobileCSMSecondCascadeMinCullingBounds; 	//[Offset: 0x0, Size: 4]
	int MobileCSMThirdCascadeMinCullingBounds; 	//[Offset: 0x0, Size: 4]
	bool bUsedAsAtmosphereSunLight; 	//[Offset: 0x0, Size: 1]
	int AtmosphereSunLightIndex; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bPerPixelAtmosphereTransmittance; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowsOnClouds; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowsOnAtmosphere; 	//[Offset: 0x0, Size: 1]
	bool bCastCloudShadows; 	//[Offset: 0x0, Size: 1]
	float CloudShadowStrength; 	//[Offset: 0x0, Size: 4]
	float CloudShadowOnAtmosphereStrength; 	//[Offset: 0x0, Size: 4]
	float CloudShadowOnSurfaceStrength; 	//[Offset: 0x0, Size: 4]
	float CloudShadowDepthBias; 	//[Offset: 0x0, Size: 4]
	float CloudShadowExtent; 	//[Offset: 0x0, Size: 4]
	float CloudShadowMapResolutionScale; 	//[Offset: 0x0, Size: 4]
	float CloudShadowRaySampleCountScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LightmassDirectionalLightSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bCastModulatedShadows; 	//[Offset: 0x0, Size: 1]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float ShadowAmount; 	//[Offset: 0x0, Size: 4]
	Void SetShadowDistanceFadeoutFraction(float NewValue); //Addr 0x75ee01cba8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac190200
Class: Distribution.Object, Addr: 0x76902ef600
Class: DistributionFloat.Distribution.Object, Addr: 0x76902ef380
	bool bCanBeBaked; 	//[Offset: 0x0, Size: 1]
	bool bBakedDataSuccesfully; 	//[Offset: 0x0, Size: 1]
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object, Addr: 0x76902ef100
	float Constant; 	//[Offset: 0x0, Size: 4]
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object, Addr: 0x76902eee80
	InterpCurveFloat StructProperty; 	//[Offset: 0x0, Size: 24]
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object, Addr: 0x76902eec00
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	float MinInput; 	//[Offset: 0x0, Size: 4]
	float MaxInput; 	//[Offset: 0x0, Size: 4]
	float MinOutput; 	//[Offset: 0x0, Size: 4]
	float MaxOutput; 	//[Offset: 0x0, Size: 4]
	enum DistributionParamMode ParamMode { //[Offset: 0x0, Size: 1]
		DPM_Normal = 0
		DPM_Abs = 3a003a00000000
		DPM_Direct = 6c006100000000
		DPM_MAX = 73000000000000
	};
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object, Addr: 0x76902ee980
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object, Addr: 0x76902ee700
	float Min; 	//[Offset: 0x0, Size: 4]
	float Max; 	//[Offset: 0x0, Size: 4]
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object, Addr: 0x76902ee480
	InterpCurveVector2D StructProperty; 	//[Offset: 0x0, Size: 24]
Class: DistributionVector.Distribution.Object, Addr: 0x76902ee200
	bool bCanBeBaked; 	//[Offset: 0x0, Size: 1]
	bool bIsDirty; 	//[Offset: 0x0, Size: 1]
	bool bBakedDataSuccesfully; 	//[Offset: 0x0, Size: 1]
Class: DistributionVectorConstant.DistributionVector.Distribution.Object, Addr: 0x76902edf80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bLockAxes; 	//[Offset: 0x0, Size: 1]
	enum EDistributionVectorLockFlags LockedAxes { //[Offset: 0x0, Size: 1]
		EDVLF_None = 0
		EDVLF_XY = 65005200000000
		EDVLF_XZ = 45003a00000000
		EDVLF_YZ = 55006500000000
		EDVLF_XYZ = 46007400000000
		EDVLF_MAX = 58004100000000
	};
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object, Addr: 0x76902edd00
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	bool bLockAxes; 	//[Offset: 0x0, Size: 1]
	enum EDistributionVectorLockFlags LockedAxes { //[Offset: 0x0, Size: 1]
		EDVLF_None = 0
		EDVLF_XY = 65005200000000
		EDVLF_XZ = 45003a00000000
		EDVLF_YZ = 55006500000000
		EDVLF_XYZ = 46007400000000
		EDVLF_MAX = 58004100000000
	};
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object, Addr: 0x76902eda80
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum DistributionParamMode ParamModes { //[Offset: 0x0, Size: 1]
		DPM_Normal = 0
		DPM_Abs = 3a003a00000000
		DPM_Direct = 6c006100000000
		DPM_MAX = 73000000000000
	};
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object, Addr: 0x76902ed800
Class: DistributionVectorUniform.DistributionVector.Distribution.Object, Addr: 0x76902ed580
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bLockAxes; 	//[Offset: 0x0, Size: 1]
	enum EDistributionVectorLockFlags LockedAxes { //[Offset: 0x0, Size: 1]
		EDVLF_None = 0
		EDVLF_XY = 65005200000000
		EDVLF_XZ = 45003a00000000
		EDVLF_YZ = 55006500000000
		EDVLF_XYZ = 46007400000000
		EDVLF_MAX = 58004100000000
	};
	enum EDistributionVectorMirrorFlags MirrorFlags { //[Offset: 0x0, Size: 1]
		EDVMF_Same = 0
		EDVMF_Different = 74007300000000
		EDVMF_Mirror = 74006300000000
		EDVMF_MAX = 67006100000000
	};
	bool bUseExtremes; 	//[Offset: 0x0, Size: 1]
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object, Addr: 0x76902ed300
	InterpCurveTwoVectors StructProperty; 	//[Offset: 0x0, Size: 24]
	bool bLockAxes1; 	//[Offset: 0x0, Size: 1]
	bool bLockAxes2; 	//[Offset: 0x0, Size: 1]
	enum EDistributionVectorLockFlags LockedAxes { //[Offset: 0x0, Size: 1]
		EDVLF_None = 0
		EDVLF_XY = 65005200000000
		EDVLF_XZ = 45003a00000000
		EDVLF_YZ = 55006500000000
		EDVLF_XYZ = 46007400000000
		EDVLF_MAX = 58004100000000
	};
	enum EDistributionVectorMirrorFlags MirrorFlags { //[Offset: 0x0, Size: 1]
		EDVMF_Same = 0
		EDVMF_Different = 74007300000000
		EDVMF_Mirror = 74006300000000
		EDVMF_MAX = 67006100000000
	};
	bool bUseExtremes; 	//[Offset: 0x0, Size: 1]
Class: DocumentationActor.Actor.Object, Addr: 0x76902ed080
Class: DPICustomScalingRule.Object, Addr: 0x76901e9480
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902ece00
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float FrustumAngle; 	//[Offset: 0x0, Size: 4]
	float FrustumAspectRatio; 	//[Offset: 0x0, Size: 4]
	float FrustumStartDist; 	//[Offset: 0x0, Size: 4]
	float FrustumEndDist; 	//[Offset: 0x0, Size: 4]
	Texture* Texture; 	//[Offset: 0x0, Size: 8]
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902ecb80
Class: EdGraph.Object, Addr: 0x76902ec680
	EdGraphSchema* Schema; 	//[Offset: 0x0, Size: 8]
	EdGraphNode*[] Nodes; //[Offset: 0x0, Size: 16]
	bool bEditable; 	//[Offset: 0x0, Size: 1]
	bool bAllowDeletion; 	//[Offset: 0x0, Size: 1]
	bool bAllowRenaming; 	//[Offset: 0x0, Size: 1]
Class: GraphNodeContextMenuContext.Object, Addr: 0x76902ec400
	Blueprint* Blueprint; 	//[Offset: 0x0, Size: 8]
	EdGraph* Graph; 	//[Offset: 0x0, Size: 8]
	EdGraphNode* Node; 	//[Offset: 0x0, Size: 8]
	bool bIsDebugging; 	//[Offset: 0x0, Size: 1]
Class: EdGraphNode.Object, Addr: 0x76902ec180
	EdGraphPin_Deprecated*[] DeprecatedPins; //[Offset: 0x0, Size: 16]
	int NodePosX; 	//[Offset: 0x0, Size: 4]
	int NodePosY; 	//[Offset: 0x0, Size: 4]
	int NodeWidth; 	//[Offset: 0x0, Size: 4]
	int NodeHeight; 	//[Offset: 0x0, Size: 4]
	enum ENodeAdvancedPins AdvancedPinDisplay { //[Offset: 0x0, Size: 1]
		NoPins = 0
		Shown = 65006400000000
		Hidden = 73006e00000000
		ENodeAdvancedPins_MAX = 0
	};
	enum ENodeEnabledState EnabledState { //[Offset: 0x0, Size: 1]
		Enabled = 0
		Disabled = 65006400000000
		DevelopmentOnly = 65007400000000
		ENodeEnabledState_MAX = 0
	};
	bool bDisplayAsDisabled; 	//[Offset: 0x0, Size: 1]
	bool bUserSetEnabledState; 	//[Offset: 0x0, Size: 1]
	bool bIsNodeEnabled; 	//[Offset: 0x0, Size: 1]
	bool bHasCompilerMessage; 	//[Offset: 0x0, Size: 1]
	StrProperty NodeComment; 	//[Offset: 0x0, Size: 16]
	int ErrorType; 	//[Offset: 0x0, Size: 4]
	StrProperty ErrorMsg; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: EdGraphNode_Documentation.EdGraphNode.Object, Addr: 0x76902ebf00
	StrProperty Link; 	//[Offset: 0x0, Size: 16]
	StrProperty Excerpt; 	//[Offset: 0x0, Size: 16]
Class: EdGraphPin_Deprecated.Object, Addr: 0x76902ebc80
	StrProperty PinName; 	//[Offset: 0x0, Size: 16]
	StrProperty PinToolTip; 	//[Offset: 0x0, Size: 16]
	enum EEdGraphPinDirection Direction { //[Offset: 0x0, Size: 1]
		EGPD_Input = 0
		EGPD_Output = 72004700000000
		EGPD_MAX = 74006300000000
	};
	EdGraphPinType StructProperty; 	//[Offset: 0x0, Size: 112]
	StrProperty DefaultValue; 	//[Offset: 0x0, Size: 16]
	StrProperty AutogeneratedDefaultValue; 	//[Offset: 0x0, Size: 16]
	Object* DefaultObject; 	//[Offset: 0x0, Size: 8]
	FText DefaultTextValue; 	//[Offset: 0x0, Size: 24]
	EdGraphPin_Deprecated*[] LinkedTo; //[Offset: 0x0, Size: 16]
	EdGraphPin_Deprecated*[] SubPins; //[Offset: 0x0, Size: 16]
	EdGraphPin_Deprecated* ParentPin; 	//[Offset: 0x0, Size: 8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection; 	//[Offset: 0x0, Size: 8]
Class: EdGraphSchema.Object, Addr: 0x76902eba00
Class: Emitter.Actor.Object, Addr: 0x76902eb780
	ParticleSystemComponent* ParticleSystemComponent; 	//[Offset: 0x0, Size: 8]
	bool bDestroyOnSystemFinish; 	//[Offset: 0x0, Size: 1]
	bool bPostUpdateTickGroup; 	//[Offset: 0x0, Size: 1]
	bool bCurrentlyActive; 	//[Offset: 0x3f99d, Size: 1]
	delegate OnParticleSpawn; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleBurst; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleDeath; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleCollide; 	//[Offset: 0x0, Size: 16]
	Void ToggleActive(); //Addr 0x75ee025a80 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac193400
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690226c80
	Void SetVectorParameter(FName ParameterName, structVector Param); //Addr 0x75ee16e104 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac751f00
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690226f00
	ParticleSystem* Template; 	//[Offset: 0x0, Size: 8]
	MaterialInterface*[] EmitterMaterials; //[Offset: 0x0, Size: 16]
	SkeletalMeshComponent*[] SkelMeshComponents; //[Offset: 0x0, Size: 16]
	bool bResetOnDetach; 	//[Offset: 0x0, Size: 1]
	bool bUpdateOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	bool bAllowRecycling; 	//[Offset: 0x0, Size: 1]
	bool bAutoManageAttachment; 	//[Offset: 0x0, Size: 1]
	bool bAutoAttachWeldSimulatedBodies; 	//[Offset: 0x0, Size: 1]
	bool bWarmingUp; 	//[Offset: 0x0, Size: 1]
	bool bOverrideLODMethod; 	//[Offset: 0x0, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick; 	//[Offset: 0x0, Size: 1]
	enum ParticleSystemLODMethod LODMethod { //[Offset: 0x0, Size: 1]
		PARTICLESYSTEMLODMETHOD_Automatic = 0
		PARTICLESYSTEMLODMETHOD_DirectSet = 69007400000000
		PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 44004f00000000
		PARTICLESYSTEMLODMETHOD_MAX = 0
	};
	enum EParticleSignificanceLevel RequiredSignificance { //[Offset: 0x0, Size: 1]
		Low = 0
		Medium = 72006500000000
		High = 3a003a00000000
		Critical = 61007400000000
		Num = 6f006900000000
		EParticleSignificanceLevel_MAX = 0
	};
	structParticleSysParam[] InstanceParameters; //[Offset: 0x0, Size: 16]
	delegate OnParticleSpawn; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleBurst; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleDeath; 	//[Offset: 0x0, Size: 16]
	delegate OnParticleCollide; 	//[Offset: 0x0, Size: 16]
	bool bOldPositionValid; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float WarmupTime; 	//[Offset: 0x0, Size: 4]
	float WarmupTickRate; 	//[Offset: 0x0, Size: 4]
	float SecondsBeforeInactive; 	//[Offset: 0x0, Size: 4]
	float MaxTimeBeforeForceUpdateTransform; 	//[Offset: 0x0, Size: 4]
	ParticleSystemReplay*[] ReplayClips; //[Offset: 0x0, Size: 16]
	float CustomTimeDilation; 	//[Offset: 0x0, Size: 4]
	SceneComponent* AutoAttachParent; 	//[Offset: 0x0, Size: 8]
	FName AutoAttachSocketName; 	//[Offset: 0x0, Size: 12]
	enum EAttachmentRule AutoAttachLocationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachRotationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachScaleRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	delegate OnSystemFinished; 	//[Offset: 0x0, Size: 16]
	Void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, InWidthMode(ByteProperty) InWidthMode, float InWidth); //Addr 0x75ee16eec0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac750700
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object, Addr: 0x76902eb500
	ParticleSystem* PS_CameraEffect; 	//[Offset: 0x0, Size: 8]
	ParticleSystem* PS_CameraEffectNonExtremeContent; 	//[Offset: 0x0, Size: 8]
	PlayerCameraManager* BaseCamera; 	//[Offset: 0x0, Size: 8]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	float BaseFOV; 	//[Offset: 0x0, Size: 4]
	bool bAllowMultipleInstances; 	//[Offset: 0x0, Size: 1]
	bool bResetWhenRetriggered; 	//[Offset: 0x0, Size: 1]
	classEmitterCameraLensEffectBase[] EmittersToTreatAsSame; //[Offset: 0x0, Size: 16]
	float DistFromCamera; 	//[Offset: 0x0, Size: 4]
Class: ViewModeUtils.Object, Addr: 0x76902eb280
Class: EngineBaseTypes.Object, Addr: 0x76902eb000
Class: EngineCustomTimeStep.Object, Addr: 0x769028d800
Class: HandlerComponentFactory.Object, Addr: 0x76902b7e00
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object, Addr: 0x76902ead80
Class: LocalMessage.Object, Addr: 0x76902ea880
Class: EngineMessage.LocalMessage.Object, Addr: 0x76902eab00
	StrProperty FailedPlaceMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty MaxedOutMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty EnteredMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty LeftMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty GlobalNameChange; 	//[Offset: 0x0, Size: 16]
	StrProperty SpecEnteredMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty NewPlayerMessage; 	//[Offset: 0x0, Size: 16]
	StrProperty NewSpecMessage; 	//[Offset: 0x0, Size: 16]
Class: DynamicSubsystem.Subsystem.Object, Addr: 0x7690256280
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object, Addr: 0x7690256500
Class: EngineTypes.Object, Addr: 0x76902ea600
Class: ExponentialHeightFog.Info.Actor.Object, Addr: 0x76902efd80
	ExponentialHeightFogComponent* Component; 	//[Offset: 0x0, Size: 8]
	bool bEnabled; 	//[Offset: 0x3c74b, Size: 1]
	Void OnRep_bEnabled(); //Addr 0x75ee03d078 [Native] // UFieldProperty addr: 0x75ac193300
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902efb00
	float FogDensity; 	//[Offset: 0x0, Size: 4]
	float FogHeightFalloff; 	//[Offset: 0x0, Size: 4]
	ExponentialHeightFogData StructProperty; 	//[Offset: 0x0, Size: 12]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	HeightFogVolume*[] HeightFogVolumes; //[Offset: 0x0, Size: 16]
	Texture2D* FogMap; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float FogMapDensity; 	//[Offset: 0x0, Size: 4]
	float FogMapFalloff; 	//[Offset: 0x0, Size: 4]
	float FogMapDistance; 	//[Offset: 0x0, Size: 4]
	float FogMapAngle; 	//[Offset: 0x0, Size: 4]
	TextureCube* InscatteringColorCubemap; 	//[Offset: 0x0, Size: 8]
	float InscatteringColorCubemapAngle; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float FullyDirectionalInscatteringColorDistance; 	//[Offset: 0x0, Size: 4]
	float NonDirectionalInscatteringColorDistance; 	//[Offset: 0x0, Size: 4]
	float DirectionalInscatteringExponent; 	//[Offset: 0x0, Size: 4]
	float DirectionalInscatteringStartDistance; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float MieAnisotropy; 	//[Offset: 0x0, Size: 4]
	float MieExponentialDistribution; 	//[Offset: 0x0, Size: 4]
	float FogMaxOpacity; 	//[Offset: 0x0, Size: 4]
	float startDistance; 	//[Offset: 0x0, Size: 4]
	float FogCutoffDistance; 	//[Offset: 0x0, Size: 4]
	bool bEnableVolumetricFog; 	//[Offset: 0x0, Size: 1]
	float VolumetricFogScatteringDistribution; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float VolumetricFogExtinctionScale; 	//[Offset: 0x0, Size: 4]
	float VolumetricFogDistance; 	//[Offset: 0x0, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity; 	//[Offset: 0x0, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors; 	//[Offset: 0x0, Size: 1]
	Void SetVolumetricFogScatteringDistribution(float NewValue); //Addr 0x75ee03d820 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac195900
Class: Exporter.Object, Addr: 0x76902ef880
	Object* SupportedClass; 	//[Offset: 0x0, Size: 8]
	Object* ExportRootScope; 	//[Offset: 0x0, Size: 8]
	FString[] FormatExtension; //[Offset: 0x0, Size: 16]
	FString[] FormatDescription; //[Offset: 0x0, Size: 16]
	int PreferredFormatIndex; 	//[Offset: 0x0, Size: 4]
	int TextIndent; 	//[Offset: 0x0, Size: 4]
	bool bText; 	//[Offset: 0x0, Size: 1]
	bool bSelectedOnly; 	//[Offset: 0x0, Size: 1]
	bool bForceFileOperations; 	//[Offset: 0x0, Size: 1]
	AssetExportTask* ExportTask; 	//[Offset: 0x0, Size: 8]
	bool ScriptRunAssetExportTask(AssetExportTask* Task); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac195600
Class: Font.Object, Addr: 0x76902f4e80
	enum EFontCacheType FontCacheType { //[Offset: 0x0, Size: 1]
		Offline = 0
		Runtime = 74000000000000
		EFontCacheType_MAX = 0
	};
	structFontCharacter[] Characters; //[Offset: 0x0, Size: 16]
	Texture2D*[] Textures; //[Offset: 0x0, Size: 16]
	int IsRemapped; 	//[Offset: 0x0, Size: 4]
	float EmScale; 	//[Offset: 0x0, Size: 4]
	float Ascent; 	//[Offset: 0x0, Size: 4]
	float Descent; 	//[Offset: 0x0, Size: 4]
	float Leading; 	//[Offset: 0x0, Size: 4]
	int Kerning; 	//[Offset: 0x0, Size: 4]
	FontImportOptionsData StructProperty; 	//[Offset: 0x0, Size: 168]
	int NumCharacters; 	//[Offset: 0x0, Size: 4]
	int[] MaxCharHeight; //[Offset: 0x0, Size: 16]
	float ScalingFactor; 	//[Offset: 0x0, Size: 4]
	int LegacyFontSize; 	//[Offset: 0x0, Size: 4]
	FName LegacyFontName; 	//[Offset: 0x0, Size: 12]
	CompositeFont StructProperty; 	//[Offset: 0x0, Size: 56]
Class: FontFace.Object, Addr: 0x76902f4c00
	StrProperty SourceFilename; 	//[Offset: 0x0, Size: 16]
	enum EFontHinting Hinting { //[Offset: 0x0, Size: 1]
		Default = 0
		Auto = 700000000
		AutoLight = 1500000000
		Monochrome = 1c00000000
		None = e00000000
		EFontHinting_MAX = 0
	};
	enum EFontLoadingPolicy LoadingPolicy { //[Offset: 0x0, Size: 1]
		LazyLoad = 0
		Stream = 46004500000000
		Inline = 6f005000000000
		EFontLoadingPolicy_MAX = 7600000000
	};
	enum EFontLayoutMethod LayoutMethod { //[Offset: 0x0, Size: 1]
		Metrics = 0
		BoundingBox = 5800000000
		EFontLayoutMethod_MAX = 800000000
	};
Class: FontImportOptions.Object, Addr: 0x76902f4980
	FontImportOptionsData StructProperty; 	//[Offset: 0x0, Size: 168]
Class: ForceFeedbackAttenuation.Object, Addr: 0x76902f4700
	ForceFeedbackAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 176]
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902f4480
	ForceFeedbackEffect* ForceFeedbackEffect; 	//[Offset: 0x0, Size: 8]
	bool bAutoDestroy; 	//[Offset: 0x0, Size: 1]
	bool bStopWhenOwnerDestroyed; 	//[Offset: 0x0, Size: 1]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreTimeDilation; 	//[Offset: 0x0, Size: 1]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
	float IntensityMultiplier; 	//[Offset: 0x0, Size: 4]
	ForceFeedbackAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	ForceFeedbackAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 176]
	delegate OnForceFeedbackFinished; 	//[Offset: 0x0, Size: 16]
	Void Stop(); //Addr 0x75ee040bec [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac195000
Class: ForceFeedbackEffect.Object, Addr: 0x76902f4200
	structForceFeedbackChannelDetails[] ChannelDetails; //[Offset: 0x0, Size: 16]
	float Duration; 	//[Offset: 0x0, Size: 4]
Class: GameEngine.Engine.Object, Addr: 0x76902f3f80
	float MaxDeltaTime; 	//[Offset: 0x0, Size: 4]
	float ServerFlushLogInterval; 	//[Offset: 0x0, Size: 4]
	GameInstance* GameInstance; 	//[Offset: 0x0, Size: 8]
Class: GameInstanceSubsystem.Subsystem.Object, Addr: 0x76902f3d00
Class: GameModeBase.Info.Actor.Object, Addr: 0x75a5271280
	StrProperty OptionsString; 	//[Offset: 0x0, Size: 16]
	GameSession* GameSessionClass; 	//[Offset: 0x0, Size: 8]
	GameStateBase* GameStateClass; 	//[Offset: 0x0, Size: 8]
	PlayerController* PlayerControllerClass; 	//[Offset: 0x0, Size: 8]
	PlayerState* PlayerStateClass; 	//[Offset: 0x0, Size: 8]
	HUD* HUDClass; 	//[Offset: 0x0, Size: 8]
	Pawn* DefaultPawnClass; 	//[Offset: 0x0, Size: 8]
	SpectatorPawn* SpectatorClass; 	//[Offset: 0x0, Size: 8]
	PlayerController* ReplaySpectatorPlayerControllerClass; 	//[Offset: 0x0, Size: 8]
	ServerStatReplicator* ServerStatReplicatorClass; 	//[Offset: 0x0, Size: 8]
	GameSession* GameSession; 	//[Offset: 0x0, Size: 8]
	GameStateBase* GameState; 	//[Offset: 0x0, Size: 8]
	ServerStatReplicator* ServerStatReplicator; 	//[Offset: 0x0, Size: 8]
	FText DefaultPlayerName; 	//[Offset: 0x0, Size: 24]
	bool bUseSeamlessTravel; 	//[Offset: 0x0, Size: 1]
	bool bStartPlayersAsSpectators; 	//[Offset: 0x0, Size: 1]
	bool bPauseable; 	//[Offset: 0x0, Size: 1]
	Void StartPlay(); //Addr 0x75ee046844 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0eafe00
Class: GameMode.GameModeBase.Info.Actor.Object, Addr: 0x75a5271000
	FName MatchState; 	//[Offset: 0x0, Size: 12]
	bool bDelayedStart; 	//[Offset: 0x0, Size: 1]
	int NumSpectators; 	//[Offset: 0x0, Size: 4]
	int NumPlayers; 	//[Offset: 0x0, Size: 4]
	int NumBots; 	//[Offset: 0x0, Size: 4]
	float MinRespawnDelay; 	//[Offset: 0x0, Size: 4]
	int NumTravellingPlayers; 	//[Offset: 0x0, Size: 4]
	LocalMessage* EngineMessageClass; 	//[Offset: 0x0, Size: 8]
	PlayerState*[] InactivePlayerArray; //[Offset: 0x0, Size: 16]
	bool LoadMapFlushLevelStreaming; 	//[Offset: 0x0, Size: 1]
	float InactivePlayerStateLifeSpan; 	//[Offset: 0x0, Size: 4]
	int MaxInactivePlayers; 	//[Offset: 0x0, Size: 4]
	bool bHandleDedicatedServerReplays; 	//[Offset: 0x0, Size: 1]
	Void StartMatch(); //Addr 0x75ee045060 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0eaf300
Class: GameNetworkManager.Info.Actor.Object, Addr: 0x76902f3a80
	float BadPacketLossThreshold; 	//[Offset: 0x0, Size: 4]
	float SeverePacketLossThreshold; 	//[Offset: 0x0, Size: 4]
	int BadPingThreshold; 	//[Offset: 0x0, Size: 4]
	int SeverePingThreshold; 	//[Offset: 0x0, Size: 4]
	int AdjustedNetSpeed; 	//[Offset: 0x0, Size: 4]
	float LastNetSpeedUpdateTime; 	//[Offset: 0x0, Size: 4]
	int TotalNetBandwidth; 	//[Offset: 0x0, Size: 4]
	int MinDynamicBandwidth; 	//[Offset: 0x0, Size: 4]
	int MaxDynamicBandwidth; 	//[Offset: 0x0, Size: 4]
	bool bIsStandbyCheckingEnabled; 	//[Offset: 0x0, Size: 1]
	bool bHasStandbyCheatTriggered; 	//[Offset: 0x0, Size: 1]
	float StandbyRxCheatTime; 	//[Offset: 0x0, Size: 4]
	float StandbyTxCheatTime; 	//[Offset: 0x0, Size: 4]
	float PercentMissingForRxStandby; 	//[Offset: 0x0, Size: 4]
	float PercentMissingForTxStandby; 	//[Offset: 0x0, Size: 4]
	float PercentForBadPing; 	//[Offset: 0x0, Size: 4]
	float JoinInProgressStandbyWaitTime; 	//[Offset: 0x0, Size: 4]
	float MoveRepSize; 	//[Offset: 0x0, Size: 4]
	float MAXPOSITIONERRORSQUARED; 	//[Offset: 0x0, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED; 	//[Offset: 0x0, Size: 4]
	float CLIENTADJUSTUPDATECOST; 	//[Offset: 0x0, Size: 4]
	float MAXCLIENTUPDATEINTERVAL; 	//[Offset: 0x0, Size: 4]
	float MaxClientForcedUpdateDuration; 	//[Offset: 0x0, Size: 4]
	float ServerForcedUpdateHitchThreshold; 	//[Offset: 0x0, Size: 4]
	float ServerForcedUpdateHitchCooldown; 	//[Offset: 0x0, Size: 4]
	float MaxMoveDeltaTime; 	//[Offset: 0x0, Size: 4]
	float MaxClientSmoothingDeltaTime; 	//[Offset: 0x0, Size: 4]
	float ClientNetSendMoveDeltaTime; 	//[Offset: 0x0, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled; 	//[Offset: 0x0, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary; 	//[Offset: 0x0, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed; 	//[Offset: 0x0, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount; 	//[Offset: 0x0, Size: 4]
	bool ClientAuthorativePosition; 	//[Offset: 0x0, Size: 1]
	float ClientErrorUpdateRateLimit; 	//[Offset: 0x0, Size: 4]
	float ClientNetCamUpdateDeltaTime; 	//[Offset: 0x0, Size: 4]
	float ClientNetCamUpdatePositionLimit; 	//[Offset: 0x0, Size: 4]
	bool bMovementTimeDiscrepancyDetection; 	//[Offset: 0x0, Size: 1]
	bool bMovementTimeDiscrepancyResolution; 	//[Offset: 0x0, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin; 	//[Offset: 0x0, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin; 	//[Offset: 0x0, Size: 4]
	float MovementTimeDiscrepancyResolutionRate; 	//[Offset: 0x0, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance; 	//[Offset: 0x0, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; 	//[Offset: 0x0, Size: 1]
	bool bUseDistanceBasedRelevancy; 	//[Offset: 0x0, Size: 1]
Class: GameplayStatics.BlueprintFunctionLibrary.Object, Addr: 0x76902f3800
	Void UnloadStreamLevelBySoftObjectPtr(constObject* WorldContextObject, constWorld* Level, structLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); //Addr 0x75ee052824 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac19db00
Class: GameSession.Info.Actor.Object, Addr: 0x76902f3580
	int MaxSpectators; 	//[Offset: 0x0, Size: 4]
	int MaxPlayers; 	//[Offset: 0x0, Size: 4]
	int MaxPartySize; 	//[Offset: 0x0, Size: 4]
	byte MaxSplitscreensPerConnection; //[Offset: 0x0, Size: 1]
	bool bRequiresPushToTalk; 	//[Offset: 0x0, Size: 1]
	FName SessionName; 	//[Offset: 0x0, Size: 12]
Class: GameStateBase.Info.Actor.Object, Addr: 0x7690275b00
	GameModeBase* GameModeClass; 	//[Offset: 0x3c70d, Size: 8]
	GameModeBase* AuthorityGameMode; 	//[Offset: 0x0, Size: 8]
	SpectatorPawn* SpectatorClass; 	//[Offset: 0x3c727, Size: 8]
	PlayerState*[] PlayerArray; //[Offset: 0x0, Size: 16]
	bool bReplicatedHasBegunPlay; 	//[Offset: 0x3c714, Size: 1]
	float ReplicatedWorldTimeSeconds; 	//[Offset: 0x3c71d, Size: 4]
	float ServerWorldTimeSecondsDelta; 	//[Offset: 0x0, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency; 	//[Offset: 0x0, Size: 4]
	Void OnRep_SpectatorClass(); //Addr 0x75ee058c60 [Native] // UFieldProperty addr: 0x75ac052b00
Class: GameState.GameStateBase.Info.Actor.Object, Addr: 0x7690275d80
	FName MatchState; 	//[Offset: 0x3c734, Size: 12]
	FName PreviousMatchState; 	//[Offset: 0x0, Size: 12]
	int ElapsedTime; 	//[Offset: 0x3c72e, Size: 4]
	Void OnRep_MatchState(); //Addr 0x75ee0587dc [Native] // UFieldProperty addr: 0x75ac052900
Class: GameUserSettings.Object, Addr: 0x76902f3300
	bool bUseVSync; 	//[Offset: 0x0, Size: 1]
	bool bUseDynamicResolution; 	//[Offset: 0x0, Size: 1]
	uint32 ResolutionSizeX; 	//[Offset: 0x0, Size: 4]
	uint32 ResolutionSizeY; 	//[Offset: 0x0, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX; 	//[Offset: 0x0, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY; 	//[Offset: 0x0, Size: 4]
	int WindowPosX; 	//[Offset: 0x0, Size: 4]
	int WindowPosY; 	//[Offset: 0x0, Size: 4]
	int FullscreenMode; 	//[Offset: 0x0, Size: 4]
	int LastConfirmedFullscreenMode; 	//[Offset: 0x0, Size: 4]
	int PreferredFullscreenMode; 	//[Offset: 0x0, Size: 4]
	uint32 Version; 	//[Offset: 0x0, Size: 4]
	int AudioQualityLevel; 	//[Offset: 0x0, Size: 4]
	int LastConfirmedAudioQualityLevel; 	//[Offset: 0x0, Size: 4]
	float FrameRateLimit; 	//[Offset: 0x0, Size: 4]
	int DesiredScreenWidth; 	//[Offset: 0x0, Size: 4]
	bool bUseDesiredScreenHeight; 	//[Offset: 0x0, Size: 1]
	int DesiredScreenHeight; 	//[Offset: 0x0, Size: 4]
	int LastUserConfirmedDesiredScreenWidth; 	//[Offset: 0x0, Size: 4]
	int LastUserConfirmedDesiredScreenHeight; 	//[Offset: 0x0, Size: 4]
	float LastRecommendedScreenWidth; 	//[Offset: 0x0, Size: 4]
	float LastRecommendedScreenHeight; 	//[Offset: 0x0, Size: 4]
	float LastCPUBenchmarkResult; 	//[Offset: 0x0, Size: 4]
	float LastGPUBenchmarkResult; 	//[Offset: 0x0, Size: 4]
	float[] LastCPUBenchmarkSteps; //[Offset: 0x0, Size: 16]
	float[] LastGPUBenchmarkSteps; //[Offset: 0x0, Size: 16]
	float LastGPUBenchmarkMultiplier; 	//[Offset: 0x0, Size: 4]
	bool bUseHDRDisplayOutput; 	//[Offset: 0x0, Size: 1]
	int HDRDisplayOutputNits; 	//[Offset: 0x0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate; 	//[Offset: 0x0, Size: 16]
	Void ValidateSettings(); //Addr 0x75ee059c74 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d0600
Class: ScriptViewportClient.Object, Addr: 0x76902e1c80
Class: GameViewportClient.ScriptViewportClient.Object, Addr: 0x76902e1f00
	Console* ViewportConsole; 	//[Offset: 0x0, Size: 8]
	structDebugDisplayProperty[] DebugProperties; //[Offset: 0x0, Size: 16]
	int MaxSplitscreenPlayers; 	//[Offset: 0x0, Size: 4]
	delegate OnLostFocusEvent; 	//[Offset: 0x0, Size: 16]
	delegate OnReceivedFocusEvent; 	//[Offset: 0x0, Size: 16]
	World* World; 	//[Offset: 0x0, Size: 8]
	GameInstance* GameInstance; 	//[Offset: 0x0, Size: 8]
	Void SSSwapControllers(); //Addr 0x75ee05dd1c [Native] // UFieldProperty addr: 0x75ac1d0300
Class: SpotLight.Light.Actor.Object, Addr: 0x76902f2e00
	SpotLightComponent* SpotLightComponent; 	//[Offset: 0x0, Size: 8]
	Void SetOuterConeAngle(float NewOuterConeAngle); //Addr 0x75ee208a28 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d0100
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x7690349980
	enum ELightUnits IntensityUnits { //[Offset: 0x0, Size: 1]
		Unitless = 0
		Candelas = 52004500000000
		Lumens = 79005400000000
		ELightUnits_MAX = 0
	};
	float Radius; 	//[Offset: 0x0, Size: 4]
	float AttenuationRadius; 	//[Offset: 0x0, Size: 4]
	LightmassPointLightSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetIntensityUnits(enum ELightUnits NewIntensityUnits); //Addr 0x75ee103ae4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac32e900
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x7690388300
	bool bUseInverseSquaredFalloff; 	//[Offset: 0x0, Size: 1]
	float LightFalloffExponent; 	//[Offset: 0x0, Size: 4]
	float SourceRadius; 	//[Offset: 0x0, Size: 4]
	float SoftSourceRadius; 	//[Offset: 0x0, Size: 4]
	float SourceLength; 	//[Offset: 0x0, Size: 4]
	Void SetSourceRadius(float bNewValue); //Addr 0x75ee199054 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac359500
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x7690398580
	bool bCastModulatedShadows; 	//[Offset: 0x0, Size: 1]
	float InnerConeAngle; 	//[Offset: 0x0, Size: 4]
	float OuterConeAngle; 	//[Offset: 0x0, Size: 4]
	float MinTexelPerPixel; 	//[Offset: 0x0, Size: 4]
	float MaxTexelPerPixel; 	//[Offset: 0x0, Size: 4]
	Void SetOuterConeAngle(float NewOuterConeAngle); //Addr 0x75ee208eac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbc300
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object, Addr: 0x76902f3080
Class: HapticFeedbackEffect_Base.Object, Addr: 0x76902f2b80
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object, Addr: 0x76902f2900
	Amplitudes(ByteProperty)[] Amplitudes; //[Offset: 0x0, Size: 16]
	int SampleRate; 	//[Offset: 0x0, Size: 4]
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object, Addr: 0x76902f2680
	HapticFeedbackDetails_Curve StructProperty; 	//[Offset: 0x0, Size: 272]
	structHapticFeedbackDetails_Point[] HapticPoints; //[Offset: 0x0, Size: 16]
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object, Addr: 0x76902f2400
	SoundWave* SoundWave; 	//[Offset: 0x0, Size: 8]
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902f2180
	Void StopPerformanceSnapshots(); //Addr 0x75ee05ee88 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d4000
Class: HeightFogVolume.Volume.Brush.Actor.Object, Addr: 0x76902f1f00
	float FogStartDensity; 	//[Offset: 0x0, Size: 4]
	float FogStartHeightFalloff; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float FogEndDensity; 	//[Offset: 0x0, Size: 4]
	float FogEndHeightFalloff; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float FogInterpolationFromEdgeStart; 	//[Offset: 0x0, Size: 4]
	bool NewVersion; 	//[Offset: 0x0, Size: 1]
	float StartSecondFogDensity; 	//[Offset: 0x0, Size: 4]
	float EndSecondFogDensity; 	//[Offset: 0x0, Size: 4]
	float StartSecondFogHeightFalloff; 	//[Offset: 0x0, Size: 4]
	float EndSecondFogHeightFalloff; 	//[Offset: 0x0, Size: 4]
	float StartSecondFogHeightOffset; 	//[Offset: 0x0, Size: 4]
	float EndSecondFogHeightOffset; 	//[Offset: 0x0, Size: 4]
	float StartFogMaxOpacity; 	//[Offset: 0x0, Size: 4]
	float EndFogMaxOpacity; 	//[Offset: 0x0, Size: 4]
	float StartFogStartDistance; 	//[Offset: 0x0, Size: 4]
	float EndFogStartDistance; 	//[Offset: 0x0, Size: 4]
	float StartFogCutoffDistance; 	//[Offset: 0x0, Size: 4]
	float EndFogCutoffDistance; 	//[Offset: 0x0, Size: 4]
	float StartDirectionalInscatteringExponent; 	//[Offset: 0x0, Size: 4]
	float EndDirectionalInscatteringExponent; 	//[Offset: 0x0, Size: 4]
	float StartDirectionalInscatteringStartDistance; 	//[Offset: 0x0, Size: 4]
	float EndDirectionalInscatteringStartDistance; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float StartMieAnisotropy; 	//[Offset: 0x0, Size: 4]
	float EndMieAnisotropy; 	//[Offset: 0x0, Size: 4]
	float StartMieExponentialDistribution; 	//[Offset: 0x0, Size: 4]
	float EndMieExponentialDistribution; 	//[Offset: 0x0, Size: 4]
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769027a600
	structInstancedStaticMeshInstanceData[] PerInstanceSMData; //[Offset: 0x0, Size: 16]
	int NumCustomDataFloats; 	//[Offset: 0x0, Size: 4]
	float[] PerInstanceSMCustomData; //[Offset: 0x0, Size: 16]
	int InstancingRandomSeed; 	//[Offset: 0x0, Size: 4]
	int InstanceStartCullDistance; 	//[Offset: 0x0, Size: 4]
	int InstanceEndCullDistance; 	//[Offset: 0x0, Size: 4]
	bool HizCheckPerInstanceVisibility; 	//[Offset: 0x0, Size: 1]
	int[] InstanceReorderTable; //[Offset: 0x0, Size: 16]
	int NumPendingLightmaps; 	//[Offset: 0x0, Size: 4]
	structInstancedStaticMeshMappingInfo[] CachedMappings; //[Offset: 0x0, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, constoutrefstructTransform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); //Addr 0x75ee070520 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05e300
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769027a880
	int[] SortedInstances; //[Offset: 0x0, Size: 16]
	int NumBuiltInstances; 	//[Offset: 0x0, Size: 4]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	structBox[] UnbuiltInstanceBoundsList; //[Offset: 0x0, Size: 16]
	bool bEnableDensityScaling; 	//[Offset: 0x0, Size: 1]
	int OcclusionLayerNumNodes; 	//[Offset: 0x0, Size: 4]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	bool bDisableCollision; 	//[Offset: 0x0, Size: 1]
	int InstanceCountToRender; 	//[Offset: 0x0, Size: 4]
	bool RemoveInstances(constoutrefint[] InstancesToRemove); //Addr 0x75ee05f69c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05e200
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object, Addr: 0x76902f1c80
Class: HLODProxy.Object, Addr: 0x76902f1a00
	structHLODProxyMesh[] ProxyMeshes; //[Offset: 0x0, Size: 16]
	<HLODProxyDesc*, structHLODProxyMesh> HLODActors; //[Offset: 0x0, Size: 80]
Class: HLODProxyDesc.Object, Addr: 0x76902f1780
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902f1500
	float RandomSobolFloat(int Index, int Dimension, float Seed); //Addr 0x75ee066d1c [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac1d3700
Class: ImportantToggleSettingInterface.Interface.Object, Addr: 0x76902f1280
Class: InGameAdManager.PlatformInterfaceBase.Object, Addr: 0x76902f1000
	bool bShouldPauseWhileAdOpen; 	//[Offset: 0x0, Size: 1]
	delegate[] ClickedBannerDelegates; //[Offset: 0x0, Size: 16]
	delegate[] ClosedAdDelegates; //[Offset: 0x0, Size: 16]
Class: InheritableComponentHandler.Object, Addr: 0x76902f0d80
	structComponentOverrideRecord[] Records; //[Offset: 0x0, Size: 16]
	ActorComponent*[] UnnecessaryComponents; //[Offset: 0x0, Size: 16]
Class: InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f0880
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f0b00
	structBlueprintInputActionDelegateBinding[] InputActionDelegateBindings; //[Offset: 0x0, Size: 16]
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f0600
	structBlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings; //[Offset: 0x0, Size: 16]
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f0380
	structBlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings; //[Offset: 0x0, Size: 16]
Class: InputComponent.ActorComponent.Object, Addr: 0x76902f0100
	structCachedKeyToActionInfo[] CachedKeyToActionInfo; //[Offset: 0x0, Size: 16]
	bool WasControllerKeyJustReleased(structKey Key); //Addr 0x75ee069438 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac1d2e00
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902fa380
	structBlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings; //[Offset: 0x0, Size: 16]
Class: InputSettings.Object, Addr: 0x76902fa100
	structInputAxisConfigEntry[] AxisConfig; //[Offset: 0x0, Size: 16]
	bool bAltEnterTogglesFullscreen; 	//[Offset: 0x0, Size: 1]
	bool bF11TogglesFullscreen; 	//[Offset: 0x0, Size: 1]
	bool bUseMouseForTouch; 	//[Offset: 0x0, Size: 1]
	bool bEnableMouseSmoothing; 	//[Offset: 0x0, Size: 1]
	bool bEnableFOVScaling; 	//[Offset: 0x0, Size: 1]
	bool bCaptureMouseOnLaunch; 	//[Offset: 0x0, Size: 1]
	bool bDefaultViewportMouseLock; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysShowTouchInterface; 	//[Offset: 0x0, Size: 1]
	bool bShowConsoleOnFourFingerTap; 	//[Offset: 0x0, Size: 1]
	bool bEnableGestureRecognizer; 	//[Offset: 0x0, Size: 1]
	bool bUseAutocorrect; 	//[Offset: 0x0, Size: 1]
	FString[] ExcludedAutocorrectOS; //[Offset: 0x0, Size: 16]
	FString[] ExcludedAutocorrectCultures; //[Offset: 0x0, Size: 16]
	FString[] ExcludedAutocorrectDeviceModels; //[Offset: 0x0, Size: 16]
	enum EMouseCaptureMode DefaultViewportMouseCaptureMode { //[Offset: 0x0, Size: 1]
		NoCapture = 0
		CapturePermanently = 52006500000000
		CapturePermanently_IncludingInitialMouseDown = 6c006100000000
		CaptureDuringMouseDown = 62006100000000
		CaptureDuringRightMouseDown = 58004100000000
		EMouseCaptureMode_MAX = 0
	};
	enum EMouseLockMode DefaultViewportMouseLockMode { //[Offset: 0x0, Size: 1]
		DoNotLock = 0
		LockOnCapture = 0
		LockAlways = 0
		LockInFullscreen = 0
		EMouseLockMode_MAX = 0
	};
	float FOVScale; 	//[Offset: 0x0, Size: 4]
	float DoubleClickTime; 	//[Offset: 0x0, Size: 4]
	structInputActionKeyMapping[] ActionMappings; //[Offset: 0x0, Size: 16]
	structInputAxisKeyMapping[] AxisMappings; //[Offset: 0x0, Size: 16]
	structInputActionSpeechMapping[] SpeechMappings; //[Offset: 0x0, Size: 16]
	PlayerInput* DefaultPlayerInputClass; 	//[Offset: 0x0, Size: 48]
	InputComponent* DefaultInputComponentClass; 	//[Offset: 0x0, Size: 48]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Key StructProperty; 	//[Offset: 0x0, Size: 32]
	structKey[] ConsoleKeys; //[Offset: 0x0, Size: 16]
	Void SaveKeyMappings(); //Addr 0x75ee06a948 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d2200
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f9e80
	structBlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings; //[Offset: 0x0, Size: 16]
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902f9c00
Class: Interface_AssetUserData.Interface.Object, Addr: 0x76902f9980
Class: BoneReferenceSkeletonProvider.Interface.Object, Addr: 0x76902f9700
Class: Interface_CollisionDataProvider.Interface.Object, Addr: 0x76902f9480
Class: Interface_PostProcessVolume.Interface.Object, Addr: 0x76902f9200
Class: Interface_PreviewMeshProvider.Interface.Object, Addr: 0x76902f8f80
Class: InterpCurveEdSetup.Object, Addr: 0x76902f8d00
	structCurveEdTab[] Tabs; //[Offset: 0x0, Size: 16]
	int ActiveTab; 	//[Offset: 0x0, Size: 4]
Class: InterpData.Object, Addr: 0x76902f8a80
	float InterpLength; 	//[Offset: 0x0, Size: 4]
	float PathBuildTime; 	//[Offset: 0x0, Size: 4]
	InterpGroup*[] InterpGroups; //[Offset: 0x0, Size: 16]
	InterpCurveEdSetup* CurveEdSetup; 	//[Offset: 0x0, Size: 8]
	float EdSectionStart; 	//[Offset: 0x0, Size: 4]
	float EdSectionEnd; 	//[Offset: 0x0, Size: 4]
	bool bShouldBakeAndPrune; 	//[Offset: 0x0, Size: 1]
	InterpGroupDirector* CachedDirectorGroup; 	//[Offset: 0x0, Size: 8]
	FName[] AllEventNames; //[Offset: 0x0, Size: 16]
Class: InterpFilter.Object, Addr: 0x76902f8800
	StrProperty Caption; 	//[Offset: 0x0, Size: 16]
Class: InterpFilter_Classes.InterpFilter.Object, Addr: 0x76902f8580
Class: InterpFilter_Custom.InterpFilter.Object, Addr: 0x76902f8300
Class: InterpGroup.Object, Addr: 0x76902f8080
	InterpTrack*[] InterpTracks; //[Offset: 0x0, Size: 16]
	FName GroupName; 	//[Offset: 0x0, Size: 12]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bCollapsed; 	//[Offset: 0x0, Size: 1]
	bool bVisible; 	//[Offset: 0x0, Size: 1]
	bool bIsFolder; 	//[Offset: 0x0, Size: 1]
	bool bIsParented; 	//[Offset: 0x0, Size: 1]
	bool bIsSelected; 	//[Offset: 0x0, Size: 1]
Class: InterpGroupCamera.InterpGroup.Object, Addr: 0x76902f7e00
	CameraAnim* CameraAnimInst; 	//[Offset: 0x0, Size: 8]
	float CompressTolerance; 	//[Offset: 0x0, Size: 4]
Class: InterpGroupDirector.InterpGroup.Object, Addr: 0x76902f7b80
Class: InterpGroupInstCamera.InterpGroupInst.Object, Addr: 0x76902f7680
Class: InterpGroupInstDirector.InterpGroupInst.Object, Addr: 0x76902f7400
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x76902f7180
	float Duration; 	//[Offset: 0x0, Size: 4]
	bool bPauseOnImpact; 	//[Offset: 0x0, Size: 1]
	bool bSweep; 	//[Offset: 0x0, Size: 1]
	enum ETeleportType TeleportType { //[Offset: 0x0, Size: 1]
		None = 0
		TeleportPhysics = 79005400000000
		ResetPhysics = 67006e00000000
		ETeleportType_MAX = 0
	};
	enum EInterpToBehaviourType BehaviourType { //[Offset: 0x0, Size: 1]
		OneShot = 0
		OneShot_Reverse = 3a006500000000
		Loop_Reset = 75006700000000
		PingPong = 58004100000000
		EInterpToBehaviourType_MAX = 53003d00000000
	};
	bool bCheckIfStillInWorld; 	//[Offset: 0x0, Size: 1]
	bool bForceSubStepping; 	//[Offset: 0x0, Size: 1]
	delegate OnInterpToReverse; 	//[Offset: 0x0, Size: 16]
	delegate OnInterpToStop; 	//[Offset: 0x0, Size: 16]
	delegate OnWaitBeginDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnWaitEndDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnResetDelegate; 	//[Offset: 0x0, Size: 16]
	float MaxSimulationTimeStep; 	//[Offset: 0x0, Size: 4]
	int MaxSimulationIterations; 	//[Offset: 0x0, Size: 4]
	structInterpControlPoint[] ControlPoints; //[Offset: 0x0, Size: 16]
	Void StopSimulating(constoutrefstructHitResult HitResult); //Addr 0x75ee074198 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x759aeed200
Class: InterpTrack.Object, Addr: 0x76902f6f00
	InterpTrack*[] SubTracks; //[Offset: 0x0, Size: 16]
	InterpTrackInst* TrackInstClass; 	//[Offset: 0x0, Size: 8]
	enum ETrackActiveCondition ActiveCondition { //[Offset: 0x0, Size: 1]
		ETAC_Always = 0
		ETAC_GoreEnabled = 74007300000000
		ETAC_GoreDisabled = 6d007500000000
		ETAC_MAX = 65004c00000000
	};
	StrProperty TrackTitle; 	//[Offset: 0x0, Size: 16]
	bool bOnePerGroup; 	//[Offset: 0x0, Size: 1]
	bool bDirGroupOnly; 	//[Offset: 0x0, Size: 1]
	bool bDisableTrack; 	//[Offset: 0x0, Size: 1]
	bool bIsSelected; 	//[Offset: 0x0, Size: 1]
	bool bIsAnimControlTrack; 	//[Offset: 0x0, Size: 1]
	bool bSubTrackOnly; 	//[Offset: 0x0, Size: 1]
	bool bVisible; 	//[Offset: 0x0, Size: 1]
	bool bIsRecording; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902f6a00
	InterpCurveFloat StructProperty; 	//[Offset: 0x0, Size: 24]
	float CurveTension; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902f6c80
	FName SlotName; 	//[Offset: 0x0, Size: 12]
	structAnimControlTrackKey[] AnimSeqs; //[Offset: 0x0, Size: 16]
	bool bSkipAnimNotifiers; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902f6500
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	float CurveTension; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902f6780
Class: InterpTrackBoolProp.InterpTrack.Object, Addr: 0x76902f6280
	structBoolTrackKey[] BoolTrack; //[Offset: 0x0, Size: 16]
	FName PropertyName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902f6000
	FName PropertyName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902f5d80
Class: InterpTrackDirector.InterpTrack.Object, Addr: 0x76902f5b00
	structDirectorTrackCut[] CutTrack; //[Offset: 0x0, Size: 16]
	bool bSimulateCameraCutsOnClients; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackEvent.InterpTrack.Object, Addr: 0x76902f5880
	structEventTrackKey[] EventTrack; //[Offset: 0x0, Size: 16]
	bool bFireEventsWhenForwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenBackwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenJumpingForwards; 	//[Offset: 0x0, Size: 1]
	bool bUseCustomEventName; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902f5600
	bool bPersistFade; 	//[Offset: 0x0, Size: 1]
	bool bFadeAudio; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902f5380
	Object* AnimBlueprintClass; 	//[Offset: 0x0, Size: 8]
	AnimInstance* AnimClass; 	//[Offset: 0x0, Size: 8]
	FName ParamName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902ff600
	MaterialInterface*[] TargetMaterials; //[Offset: 0x0, Size: 16]
	FName ParamName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902ff380
	FName ParamName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902ff100
	FName PropertyName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackInst.Object, Addr: 0x76902fee80
Class: InterpTrackInstAnimControl.InterpTrackInst.Object, Addr: 0x76902fec00
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object, Addr: 0x76902fe980
Class: InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fe480
	FieldPathProperty InterpProperty; 	//[Offset: 0x0, Size: 32]
	Object* PropertyOuterObjectInst; 	//[Offset: 0x0, Size: 8]
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fe700
	bool ResetBool; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fe200
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstColorScale.InterpTrackInst.Object, Addr: 0x76902fdf80
Class: InterpTrackInstDirector.InterpTrackInst.Object, Addr: 0x76902fdd00
	Actor* OldViewTarget; 	//[Offset: 0x0, Size: 8]
Class: InterpTrackInstEvent.InterpTrackInst.Object, Addr: 0x76902fda80
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstFade.InterpTrackInst.Object, Addr: 0x76902fd800
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object, Addr: 0x76902fd580
	AnimInstance* AnimScriptInstance; 	//[Offset: 0x0, Size: 8]
	float ResetFloat; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object, Addr: 0x76902fd300
	MaterialInstanceDynamic*[] MaterialInstances; //[Offset: 0x0, Size: 16]
	float[] ResetFloats; //[Offset: 0x0, Size: 16]
	structPrimitiveMaterialRef[] PrimitiveMaterialRefs; //[Offset: 0x0, Size: 16]
	InterpTrackFloatMaterialParam* InstancedTrack; 	//[Offset: 0x0, Size: 8]
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object, Addr: 0x76902fd080
	float ResetFloat; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fce00
	float ResetFloat; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fcb80
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: InterpTrackInstMove.InterpTrackInst.Object, Addr: 0x76902fc900
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object, Addr: 0x76902fc680
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstSlomo.InterpTrackInst.Object, Addr: 0x76902fc400
	float OldTimeDilation; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackInstSound.InterpTrackInst.Object, Addr: 0x76902fc180
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
	AudioComponent* PlayAudioComp; 	//[Offset: 0x0, Size: 8]
Class: InterpTrackInstToggle.InterpTrackInst.Object, Addr: 0x76902fbf00
	enum ETrackToggleAction Action { //[Offset: 0x0, Size: 1]
		ETTA_Off = 0
		ETTA_On = 79007400000000
		ETTA_Toggle = 3a006e00000000
		ETTA_Trigger = 68005700000000
		ETTA_MAX = 67006e00000000
	};
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
	bool bSavedActiveState; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object, Addr: 0x76902fbc80
	MaterialInstanceDynamic*[] MaterialInstances; //[Offset: 0x0, Size: 16]
	structVector[] ResetVectors; //[Offset: 0x0, Size: 16]
	structPrimitiveMaterialRef[] PrimitiveMaterialRefs; //[Offset: 0x0, Size: 16]
	InterpTrackVectorMaterialParam* InstancedTrack; 	//[Offset: 0x0, Size: 8]
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object, Addr: 0x76902fba00
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackInstVisibility.InterpTrackInst.Object, Addr: 0x76902fb780
	enum EVisibilityTrackAction Action { //[Offset: 0x0, Size: 1]
		EVTA_Hide = 0
		EVTA_Show = 69007300000000
		EVTA_Toggle = 43006b00000000
		EVTA_MAX = 65004c00000000
	};
	float LastUpdatePosition; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackLinearColorBase.InterpTrack.Object, Addr: 0x76902fb500
	InterpCurveLinearColor StructProperty; 	//[Offset: 0x0, Size: 24]
	float CurveTension; 	//[Offset: 0x0, Size: 4]
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object, Addr: 0x76902fb280
	FName PropertyName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackMove.InterpTrack.Object, Addr: 0x76902fb000
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpLookupTrack StructProperty; 	//[Offset: 0x0, Size: 16]
	FName LookAtGroupName; 	//[Offset: 0x0, Size: 12]
	float LinCurveTension; 	//[Offset: 0x0, Size: 4]
	float AngCurveTension; 	//[Offset: 0x0, Size: 4]
	bool bUseQuatInterpolation; 	//[Offset: 0x0, Size: 1]
	bool bShowArrowAtKeys; 	//[Offset: 0x0, Size: 1]
	bool bDisableMovement; 	//[Offset: 0x0, Size: 1]
	bool bShowTranslationOnCurveEd; 	//[Offset: 0x0, Size: 1]
	bool bShowRotationOnCurveEd; 	//[Offset: 0x0, Size: 1]
	bool bHide3DTrack; 	//[Offset: 0x0, Size: 1]
	enum EInterpTrackMoveRotMode RotMode { //[Offset: 0x0, Size: 1]
		IMR_Keyframed = 0
		IMR_LookAtGroup = 74007300000000
		IMR_Ignore = 6d007500000000
		IMR_MAX = 65004c00000000
	};
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902fad80
	enum EInterpMoveAxis MoveAxis { //[Offset: 0x0, Size: 1]
		AXIS_TranslationX = 0
		AXIS_TranslationY = 65005200000000
		AXIS_TranslationZ = 6c006500000000
		AXIS_RotationX = 65006300000000
		AXIS_RotationY = 64006e00000000
		AXIS_RotationZ = 4d005f00000000
		AXIS_MAX = 0
	};
	InterpLookupTrack StructProperty; 	//[Offset: 0x0, Size: 16]
Class: InterpTrackParticleReplay.InterpTrack.Object, Addr: 0x76902fab00
	structParticleReplayTrackKey[] TrackKeys; //[Offset: 0x0, Size: 16]
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object, Addr: 0x76902fa880
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902fa600
	structSoundTrackKey[] Sounds; //[Offset: 0x0, Size: 16]
	bool bPlayOnReverse; 	//[Offset: 0x0, Size: 1]
	bool bContinueSoundOnMatineeEnd; 	//[Offset: 0x0, Size: 1]
	bool bSuppressSubtitles; 	//[Offset: 0x0, Size: 1]
	bool bTreatAsDialogue; 	//[Offset: 0x0, Size: 1]
	bool bAttach; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackToggle.InterpTrack.Object, Addr: 0x76902ffd80
	structToggleTrackKey[] ToggleTrack; //[Offset: 0x0, Size: 16]
	bool bActivateSystemEachUpdate; 	//[Offset: 0x0, Size: 1]
	bool bActivateWithJustAttachedFlag; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenForwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenBackwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenJumpingForwards; 	//[Offset: 0x0, Size: 1]
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902ffb00
	MaterialInterface*[] TargetMaterials; //[Offset: 0x0, Size: 16]
	FName ParamName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object, Addr: 0x76902ff880
	FName PropertyName; 	//[Offset: 0x0, Size: 12]
Class: InterpTrackVisibility.InterpTrack.Object, Addr: 0x7690345100
	structVisibilityTrackKey[] VisibilityTrack; //[Offset: 0x0, Size: 16]
	bool bFireEventsWhenForwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenBackwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenJumpingForwards; 	//[Offset: 0x0, Size: 1]
Class: IntSerialization.Object, Addr: 0x7690344e80
	uint16 UnsignedInt16Variable; 	//[Offset: 0x0, Size: 2]
	uint32 UnsignedInt32Variable; 	//[Offset: 0x0, Size: 4]
	uint64 UnsignedInt64Variable; 	//[Offset: 0x0, Size: 8]
	int8 SignedInt8Variable; 	//[Offset: 0x0, Size: 1]
	int16 SignedInt16Variable; 	//[Offset: 0x0, Size: 2]
	int64 SignedInt64Variable; 	//[Offset: 0x0, Size: 8]
	byte UnsignedInt8Variable; //[Offset: 0x0, Size: 1]
	int SignedInt32Variable; 	//[Offset: 0x0, Size: 4]
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object, Addr: 0x7690344c00
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690344980
	Void SetArrayPropertyByName(Object* Object, FName PropertyName, constoutrefint[] Value); //Addr 0x75ee0858d0 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d4d00
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690344700
	Void Parse_StringToGuid(FString GuidString, outstructGuid OutGUID, outbool Success); //Addr 0x75ee086164 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac1d4600
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690344480
	bool PointerEvent_IsTouchEvent(constoutrefstructPointerEvent Input); //Addr 0x75ee086f90 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac1d9900
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690344200
	bool SetCurrentLocale(FString Culture, constbool SaveToConfig); //Addr 0x75ee08e450 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d8b00
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343f80
	Void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, constoutrefstructLinearColor ParameterValue); //Addr 0x75ee08f508 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac1d8600
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343d00
	int Xor_IntInt(int A, int B); //Addr 0x75ee0b9040 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac325f00
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343a80
	Void MarkBit(outint Data, int Index); //Addr 0x75ee0c9ffc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac325200
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343800
	Void SetIsMobileTAAEnableGhost(bool enable); //Addr 0x75ee0ca954 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac327a00
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343580
	FString TrimTrailing(FString SourceString); //Addr 0x75ee0cec4c [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac32ba00
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343300
	bool IsRegisteredTableId(constFName TableId); //Addr 0x75ee0d58cc [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac32b200
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690343080
	Void UnregisterForRemoteNotifications(); //Addr 0x75ee0d8264 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x7616ee1800
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690342e00
	FText TextTrimTrailing(constoutrefFText InText); //Addr 0x75ee0f5b30 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac32c700
Class: Layer.Object, Addr: 0x7690342b80
	FName LayerName; 	//[Offset: 0x0, Size: 12]
	bool bIsVisible; 	//[Offset: 0x0, Size: 1]
	structLayerActorStats[] ActorStats; //[Offset: 0x0, Size: 16]
Class: LevelPartitionInterface.Interface.Object, Addr: 0x7690342900
Class: Level.Object, Addr: 0x7690342680
	World* OwningWorld; 	//[Offset: 0x0, Size: 8]
	Model* Model; 	//[Offset: 0x0, Size: 8]
	ModelComponent*[] ModelComponents; //[Offset: 0x0, Size: 16]
	LevelActorContainer* ActorCluster; 	//[Offset: 0x0, Size: 8]
	int NumTextureStreamingUnbuiltComponents; 	//[Offset: 0x0, Size: 4]
	int NumTextureStreamingDirtyResources; 	//[Offset: 0x0, Size: 4]
	LevelScriptActor* LevelScriptActor; 	//[Offset: 0x0, Size: 8]
	NavigationObjectBase* NavListStart; 	//[Offset: 0x0, Size: 8]
	NavigationObjectBase* NavListEnd; 	//[Offset: 0x0, Size: 8]
	NavigationDataChunk*[] NavDataChunks; //[Offset: 0x0, Size: 16]
	float LightmapTotalSize; 	//[Offset: 0x0, Size: 4]
	float ShadowmapTotalSize; 	//[Offset: 0x0, Size: 4]
	structVector[] StaticNavigableGeometry; //[Offset: 0x0, Size: 16]
	structGuid[] StreamingTextureGuids; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MapBuildDataRegistry* MapBuildData; 	//[Offset: 0x0, Size: 8]
	IntVector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bIsLightingScenario; 	//[Offset: 0x0, Size: 1]
	bool bTextureStreamingRotationChanged; 	//[Offset: 0x0, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager; 	//[Offset: 0x0, Size: 1]
	bool bIsVisible; 	//[Offset: 0x0, Size: 1]
	WorldSettings* WorldSettings; 	//[Offset: 0x0, Size: 8]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	structReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors; //[Offset: 0x0, Size: 16]
Class: LevelActorContainer.Object, Addr: 0x7690342400
	Actor*[] Actors; //[Offset: 0x0, Size: 16]
Class: LevelBounds.Actor.Object, Addr: 0x7690342180
	BoxComponent* BoxComponent; 	//[Offset: 0x0, Size: 8]
	bool bAutoUpdateBounds; 	//[Offset: 0x0, Size: 1]
Class: LevelPersistentResourceContainer.Object, Addr: 0x7690341f00
	Object*[] Resources; //[Offset: 0x0, Size: 16]
Class: LevelScriptActor.Actor.Object, Addr: 0x7690341c80
	bool bInputEnabled; 	//[Offset: 0x0, Size: 1]
	Void WorldOriginLocationChanged(structIntVector OldOriginLocation, structIntVector NewOriginLocation); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac32fc00
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object, Addr: 0x7690341a00
Class: LevelStreaming.Object, Addr: 0x7690341780
	World* WorldAsset; 	//[Offset: 0x0, Size: 48]
	FName PackageNameToLoad; 	//[Offset: 0x0, Size: 12]
	FName[] LODPackageNames; //[Offset: 0x0, Size: 16]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	int LevelLODIndex; 	//[Offset: 0x0, Size: 4]
	int StreamingPriority; 	//[Offset: 0x0, Size: 4]
	bool bShouldBeVisible; 	//[Offset: 0x0, Size: 1]
	bool bShouldBeLoaded; 	//[Offset: 0x0, Size: 1]
	bool bLocked; 	//[Offset: 0x0, Size: 1]
	bool bIsStatic; 	//[Offset: 0x0, Size: 1]
	bool bShouldBlockOnLoad; 	//[Offset: 0x0, Size: 1]
	bool bShouldBlockOnUnload; 	//[Offset: 0x0, Size: 1]
	bool bDisableDistanceStreaming; 	//[Offset: 0x0, Size: 1]
	bool bDrawOnLevelStatusMap; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes; //[Offset: 0x0, Size: 16]
	float MinTimeBetweenVolumeUnloadRequests; 	//[Offset: 0x0, Size: 4]
	delegate OnLevelLoaded; 	//[Offset: 0x0, Size: 16]
	delegate OnLevelUnloaded; 	//[Offset: 0x0, Size: 16]
	delegate OnLevelShown; 	//[Offset: 0x0, Size: 16]
	delegate OnLevelHidden; 	//[Offset: 0x0, Size: 16]
	Level* LoadedLevel; 	//[Offset: 0x0, Size: 8]
	Level* PendingUnloadLevel; 	//[Offset: 0x0, Size: 8]
	bool ShouldBeLoaded(); //Addr 0x75ee0fb92c [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac32ee00
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object, Addr: 0x7690341500
Class: LevelStreamingDynamic.LevelStreaming.Object, Addr: 0x7690341280
	bool bInitiallyLoaded; 	//[Offset: 0x0, Size: 1]
	bool bInitiallyVisible; 	//[Offset: 0x0, Size: 1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, structVector Location, structRotator Rotation, outbool bOutSuccess, FString OptionalLevelNameOverride); //Addr 0x75ee0fc838 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac32ec00
Class: LevelStreamingPersistent.LevelStreaming.Object, Addr: 0x7690341000
Class: LevelStreamingVolume.Volume.Brush.Actor.Object, Addr: 0x7690340d80
	FName[] StreamingLevelNames; //[Offset: 0x0, Size: 16]
	bool bEditorPreVisOnly; 	//[Offset: 0x0, Size: 1]
	bool bDisabled; 	//[Offset: 0x0, Size: 1]
	enum EStreamingVolumeUsage StreamingUsage { //[Offset: 0x0, Size: 1]
		SVB_Loading = 0
		SVB_LoadingAndVisibility = 65005200000000
		SVB_VisibilityBlockingOnLoad = 6c006500000000
		SVB_BlockingOnLoad = 65006300000000
		SVB_LoadingNotVisible = 64006e00000000
		SVB_MAX = 4d005f00000000
	};
Class: LightmappedSurfaceCollection.Object, Addr: 0x7690340b00
	Model* SourceModel; 	//[Offset: 0x0, Size: 8]
	int[] Surfaces; //[Offset: 0x0, Size: 16]
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x7690340880
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x7690340600
	int8[] TypeToLayer; //[Offset: 0x0, Size: 16]
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object, Addr: 0x7690340380
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object, Addr: 0x7690340100
Class: LightmassPortal.Actor.Object, Addr: 0x769034a380
	LightmassPortalComponent* PortalComponent; 	//[Offset: 0x0, Size: 8]
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object, Addr: 0x769034a100
	BoxComponent* PreviewBox; 	//[Offset: 0x0, Size: 8]
Class: LightmassPrimitiveSettingsObject.Object, Addr: 0x7690349e80
	LightmassPrimitiveSettings StructProperty; 	//[Offset: 0x0, Size: 24]
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690349c00
Class: LocalPlayer.Player.Object, Addr: 0x7690349700
	GameViewportClient* ViewportClient; 	//[Offset: 0x0, Size: 8]
	enum EAspectRatioAxisConstraint AspectRatioAxisConstraint { //[Offset: 0x0, Size: 1]
		AspectRatio_MaintainYFOV = 0
		AspectRatio_MaintainXFOV = 65007000000000
		AspectRatio_MajorAxisFOV = 43007300000000
		AspectRatio_MAX = 79007400000000
	};
	PlayerController* PendingLevelPlayerControllerClass; 	//[Offset: 0x0, Size: 8]
	bool bSentSplitJoin; 	//[Offset: 0x0, Size: 1]
	int ControllerId; 	//[Offset: 0x0, Size: 4]
Class: LocalPlayerSubsystem.Subsystem.Object, Addr: 0x7690349480
Class: LODActor.Actor.Object, Addr: 0x7690349200
	StaticMeshComponent* StaticMeshComponent; 	//[Offset: 0x0, Size: 8]
	<MaterialInterface*, InstancedStaticMeshComponent*> ImpostersStaticMeshComponents; //[Offset: 0x0, Size: 80]
	HLODProxy* Proxy; 	//[Offset: 0x0, Size: 8]
	FName Key; 	//[Offset: 0x0, Size: 12]
	float LODDrawDistance; 	//[Offset: 0x0, Size: 4]
	int LODLevel; 	//[Offset: 0x0, Size: 4]
	Actor*[] SubActors; //[Offset: 0x0, Size: 16]
	byte CachedNumHLODLevels; //[Offset: 0x0, Size: 1]
Class: LODSyncComponent.ActorComponent.Object, Addr: 0x7690348f80
	int NumLODs; 	//[Offset: 0x0, Size: 4]
	int ForcedLOD; 	//[Offset: 0x0, Size: 4]
	structComponentSync[] ComponentsToSync; //[Offset: 0x0, Size: 16]
	<FName, structLODMappingData> CustomLODMapping; //[Offset: 0x0, Size: 80]
	int CurrentLOD; 	//[Offset: 0x0, Size: 4]
	int CurrentNumLODs; 	//[Offset: 0x0, Size: 4]
	PrimitiveComponent*[] DriveComponents; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] SubComponents; //[Offset: 0x0, Size: 16]
	FString GetLODSyncDebugText(); //Addr 0x75ee104cc0 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac32e800
Class: LODSyncInterface.Interface.Object, Addr: 0x7690348d00
Class: MapBuildDataRegistry.Object, Addr: 0x7690348a80
	enum ELightingBuildQuality LevelLightingQuality { //[Offset: 0x0, Size: 1]
		Quality_Preview = 0
		Quality_Medium = 52006500000000
		Quality_High = 6c006100000000
		Quality_Production = 62006100000000
		Quality_MAX = 58004100000000
	};
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690348580
	structMaterialSpriteElement[] Elements; //[Offset: 0x0, Size: 16]
	Void SetElements(constoutrefstructMaterialSpriteElement[] NewElements); //Addr 0x75ee1092f0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac352000
Class: MaterialExpression.Object, Addr: 0x76901edf80
	Material* Material; 	//[Offset: 0x0, Size: 8]
	MaterialFunction* Function; 	//[Offset: 0x0, Size: 8]
	bool bIsParameterExpression; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionAbs.MaterialExpression.Object, Addr: 0x7690348300
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object, Addr: 0x7690348080
Class: MaterialExpressionAdd.MaterialExpression.Object, Addr: 0x7690347e00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x76901ee200
	Texture* Texture; 	//[Offset: 0x0, Size: 8]
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x76901ee480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x76901ee700
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	FName Group; 	//[Offset: 0x0, Size: 12]
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x76901ee980
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690347b80
	float Threshold; 	//[Offset: 0x0, Size: 4]
	enum ETextureColorChannel Channel { //[Offset: 0x0, Size: 1]
		TCC_Red = 0
		TCC_Green = 79007400000000
		TCC_Blue = 3a006e00000000
		TCC_Alpha = 68005700000000
		TCC_MAX = 67006e00000000
	};
Class: MaterialExpressionAppendVector.MaterialExpression.Object, Addr: 0x7690347900
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArccosine.MaterialExpression.Object, Addr: 0x7690347680
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArccosineFast.MaterialExpression.Object, Addr: 0x7690347400
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArcsine.MaterialExpression.Object, Addr: 0x7690347180
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArcsineFast.MaterialExpression.Object, Addr: 0x7690346f00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArctangent.MaterialExpression.Object, Addr: 0x7690346c80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArctangent2.MaterialExpression.Object, Addr: 0x7690346a00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object, Addr: 0x7690346780
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionArctangentFast.MaterialExpression.Object, Addr: 0x7690346500
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object, Addr: 0x7690346280
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object, Addr: 0x7690346000
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object, Addr: 0x7690345d80
Class: MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690260880
Class: MaterialExpressionBakeDiffuseLightingOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690345b00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690345880
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionBlackBody.MaterialExpression.Object, Addr: 0x7690345600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object, Addr: 0x7690345380
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialAttributeBlend PixelAttributeBlendType { //[Offset: 0x0, Size: 1]
		Blend = 0
		UseA = 65007400000000
		UseB = 74007500000000
		EMaterialAttributeBlend_MAX = 0
	};
	enum EMaterialAttributeBlend VertexAttributeBlendType { //[Offset: 0x0, Size: 1]
		Blend = 0
		UseA = 65007400000000
		UseB = 74007500000000
		EMaterialAttributeBlend_MAX = 0
	};
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object, Addr: 0x769034f600
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
Class: MaterialExpressionBumpOffset.MaterialExpression.Object, Addr: 0x769034f380
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float HeightRatio; 	//[Offset: 0x0, Size: 4]
	float ReferencePlane; 	//[Offset: 0x0, Size: 4]
	uint32 ConstCoordinate; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object, Addr: 0x769034f100
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object, Addr: 0x769034ee80
Class: MaterialExpressionCeil.MaterialExpression.Object, Addr: 0x769034ec00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x769034e480
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x769034e700
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bUseCustomPrimitiveData; 	//[Offset: 0x0, Size: 1]
	byte PrimitiveDataIndex; //[Offset: 0x0, Size: 1]
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x769034e980
	enum EChannelMaskParameterColor MaskChannel { //[Offset: 0x0, Size: 1]
		Red = 0
		Green = 6e006100000000
		Blue = 6d006100000000
		Alpha = 65004c00000000
		EChannelMaskParameterColor_MAX = 0
	};
Class: MaterialExpressionClamp.MaterialExpression.Object, Addr: 0x769034e200
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EClampMode ClampMode { //[Offset: 0x0, Size: 1]
		CMODE_Clamp = 0
		CMODE_ClampMin = 65007400000000
		CMODE_ClampMax = 74007500000000
		CMODE_MAX = 0
	};
	float MinDefault; 	//[Offset: 0x0, Size: 4]
	float MaxDefault; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769034df80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionClearCoatParameterOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769034dd00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object, Addr: 0x769034da80
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object, Addr: 0x769034d800
	MaterialParameterCollection* Collection; 	//[Offset: 0x0, Size: 8]
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionComment.MaterialExpression.Object, Addr: 0x769034d580
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	StrProperty Text; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int FontSize; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionComponentMask.MaterialExpression.Object, Addr: 0x769034d300
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	bool R; 	//[Offset: 0x0, Size: 1]
	bool G; 	//[Offset: 0x0, Size: 1]
	bool B; 	//[Offset: 0x0, Size: 1]
	bool A; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionConstant.MaterialExpression.Object, Addr: 0x769034d080
	float R; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object, Addr: 0x769034ce00
	float R; 	//[Offset: 0x0, Size: 4]
	float G; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object, Addr: 0x769034cb80
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object, Addr: 0x769034c900
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object, Addr: 0x769034c680
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Bias; 	//[Offset: 0x0, Size: 4]
	float Scale; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionCosine.MaterialExpression.Object, Addr: 0x769034c400
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Period; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionCrossProduct.MaterialExpression.Object, Addr: 0x769034c180
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x769034bc80
	float DefaultValue; 	//[Offset: 0x0, Size: 4]
	bool bUseCustomPrimitiveData; 	//[Offset: 0x0, Size: 1]
	byte PrimitiveDataIndex; //[Offset: 0x0, Size: 1]
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x769034bf00
	CurveLinearColor* Curve; 	//[Offset: 0x0, Size: 8]
	CurveLinearColorAtlas* Atlas; 	//[Offset: 0x0, Size: 8]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionCustom.MaterialExpression.Object, Addr: 0x769034ba00
	StrProperty Code; 	//[Offset: 0x0, Size: 16]
	enum ECustomMaterialOutputType OutputType { //[Offset: 0x0, Size: 1]
		CMOT_Float1 = 0
		CMOT_Float2 = 65005200000000
		CMOT_Float3 = 6c006500000000
		CMOT_Float4 = 65006300000000
		CMOT_MaterialAttributes = 64006e00000000
		CMOT_MAX = 4d005f00000000
	};
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
	structCustomInput[] Inputs; //[Offset: 0x0, Size: 16]
	structCustomOutput[] AdditionalOutputs; //[Offset: 0x0, Size: 16]
	structCustomDefine[] AdditionalDefines; //[Offset: 0x0, Size: 16]
	FString[] IncludeFilePaths; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionCustomFunction.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769034b780
	StrProperty Code; 	//[Offset: 0x0, Size: 16]
	structCustomInput[] Inputs; //[Offset: 0x0, Size: 16]
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDDX.MaterialExpression.Object, Addr: 0x769034b500
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDDY.MaterialExpression.Object, Addr: 0x769034b280
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object, Addr: 0x769034b000
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object, Addr: 0x769034ad80
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object, Addr: 0x769034ab00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstWidth; 	//[Offset: 0x0, Size: 4]
	float ConstHeight; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionDeltaTime.MaterialExpression.Object, Addr: 0x769034a880
Class: MaterialExpressionDepthFade.MaterialExpression.Object, Addr: 0x769034a600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float OpacityDefault; 	//[Offset: 0x0, Size: 4]
	float FadeDistanceDefault; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object, Addr: 0x769034fd80
	enum EDepthOfFieldFunctionValue FunctionValue { //[Offset: 0x0, Size: 1]
		TDOF_NearAndFarMask = 0
		TDOF_NearMask = 65007400000000
		TDOF_FarMask = 61006800000000
		TDOF_CircleOfConfusionRadius = 61007200000000
		TDOF_MAX = 4d005f00000000
	};
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object, Addr: 0x769034fb00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDesaturation.MaterialExpression.Object, Addr: 0x769034f880
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDistance.MaterialExpression.Object, Addr: 0x7690355100
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object, Addr: 0x7690354e80
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object, Addr: 0x7690354c00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object, Addr: 0x7690354980
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDivide.MaterialExpression.Object, Addr: 0x7690354700
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionDotProduct.MaterialExpression.Object, Addr: 0x7690354480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object, Addr: 0x7690354200
	FString[] ParamNames; //[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	uint32 ParameterIndex; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object, Addr: 0x7690353f80
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object, Addr: 0x7690353d00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionFloor.MaterialExpression.Object, Addr: 0x7690353a80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionFmod.MaterialExpression.Object, Addr: 0x7690353800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionFontSample.MaterialExpression.Object, Addr: 0x7690353580
	Font* Font; 	//[Offset: 0x0, Size: 8]
	int FontTexturePage; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object, Addr: 0x7690353300
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	FName Group; 	//[Offset: 0x0, Size: 12]
Class: MaterialExpressionFrac.MaterialExpression.Object, Addr: 0x7690353080
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionFresnel.MaterialExpression.Object, Addr: 0x7690352e00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Exponent; 	//[Offset: 0x0, Size: 4]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float BaseReflectFraction; 	//[Offset: 0x0, Size: 4]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionFunctionInput.MaterialExpression.Object, Addr: 0x7690352b80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	FName InputName; 	//[Offset: 0x0, Size: 12]
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EFunctionInputType InputType { //[Offset: 0x0, Size: 1]
		FunctionInput_Scalar = 0
		FunctionInput_Vector2 = 3000600000000
		FunctionInput_Vector3 = 3000e00000000
		FunctionInput_Vector4 = 3001800000000
		FunctionInput_Texture2D = 3002100000000
		FunctionInput_TextureCube = 3002d00000000
		FunctionInput_Texture2DArray = 3003800000000
		FunctionInput_VolumeTexture = 3004200000000
		FunctionInput_StaticBool = 3004e00000000
		FunctionInput_MaterialAttributes = 3005700000000
		FunctionInput_TextureExternal = 3005e00000000
		FunctionInput_MAX = 3006f00000000
	};
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bUsePreviewValueAsDefault; 	//[Offset: 0x0, Size: 1]
	int SortPriority; 	//[Offset: 0x0, Size: 4]
	bool bCompilingFunctionPreview; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object, Addr: 0x7690352900
	FName OutputName; 	//[Offset: 0x0, Size: 12]
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
	int SortPriority; 	//[Offset: 0x0, Size: 4]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bLastPreviewed; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object, Addr: 0x7690352680
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
	structGuid[] AttributeGetTypes; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionGIReplace.MaterialExpression.Object, Addr: 0x7690352400
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionHairAttributes.MaterialExpression.Object, Addr: 0x7690352180
	bool bUseTangentSpace; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionHairColor.MaterialExpression.Object, Addr: 0x7690351f00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionIf.MaterialExpression.Object, Addr: 0x7690351c80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float EqualsThreshold; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
	float ConstAEqualsB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object, Addr: 0x7690351a00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
	float ConstValue; 	//[Offset: 0x0, Size: 4]
	bool bClampResult; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object, Addr: 0x7690351780
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object, Addr: 0x7690351500
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLightVector.MaterialExpression.Object, Addr: 0x7690351280
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object, Addr: 0x7690351000
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
	float ConstAlpha; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionLogarithm10.MaterialExpression.Object, Addr: 0x7690350d80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLogarithm2.MaterialExpression.Object, Addr: 0x7690350b00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object, Addr: 0x7690350880
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object, Addr: 0x7690350600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object, Addr: 0x7690350380
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MaterialAttributesInput StructProperty; 	//[Offset: 0x0, Size: 20]
	MaterialLayersFunctions StructProperty; 	//[Offset: 0x0, Size: 64]
	MaterialExpressionMaterialFunctionCall*[] LayerCallers; //[Offset: 0x0, Size: 16]
	int NumActiveLayerCallers; 	//[Offset: 0x0, Size: 4]
	MaterialExpressionMaterialFunctionCall*[] BlendCallers; //[Offset: 0x0, Size: 16]
	int NumActiveBlendCallers; 	//[Offset: 0x0, Size: 4]
	bool bIsLayerGraphBuilt; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object, Addr: 0x7690350100
	MaterialFunctionInterface* MaterialFunction; 	//[Offset: 0x0, Size: 8]
	MaterialParameterInfo StructProperty; 	//[Offset: 0x0, Size: 20]
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object, Addr: 0x769035a380
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object, Addr: 0x769035a100
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMax.MaterialExpression.Object, Addr: 0x7690359e80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionMin.MaterialExpression.Object, Addr: 0x7690359c00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionMultiply.MaterialExpression.Object, Addr: 0x7690359980
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionNoise.MaterialExpression.Object, Addr: 0x7690359700
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Scale; 	//[Offset: 0x0, Size: 4]
	int Quality; 	//[Offset: 0x0, Size: 4]
	enum ENoiseFunction NoiseFunction { //[Offset: 0x0, Size: 1]
		NOISEFUNCTION_SimplexTex = 0
		NOISEFUNCTION_GradientTex = 75006c00000000
		NOISEFUNCTION_GradientTex3D = 63006900000000
		NOISEFUNCTION_GradientALU = 3a006400000000
		NOISEFUNCTION_ValueALU = 69006e00000000
		NOISEFUNCTION_VoronoiALU = 72007000000000
		NOISEFUNCTION_MAX = 69007400000000
	};
	bool bTurbulence; 	//[Offset: 0x0, Size: 1]
	int Levels; 	//[Offset: 0x0, Size: 4]
	float OutputMin; 	//[Offset: 0x0, Size: 4]
	float OutputMax; 	//[Offset: 0x0, Size: 4]
	float LevelScale; 	//[Offset: 0x0, Size: 4]
	bool bTiling; 	//[Offset: 0x0, Size: 1]
	uint32 RepeatSize; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionNormalize.MaterialExpression.Object, Addr: 0x7690359480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionObjectBounds.MaterialExpression.Object, Addr: 0x7690359200
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object, Addr: 0x7690358f80
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object, Addr: 0x7690358d00
Class: MaterialExpressionObjectRadius.MaterialExpression.Object, Addr: 0x7690358a80
Class: MaterialExpressionOneMinus.MaterialExpression.Object, Addr: 0x7690358800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionPanner.MaterialExpression.Object, Addr: 0x7690358580
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float SpeedX; 	//[Offset: 0x0, Size: 4]
	float SpeedY; 	//[Offset: 0x0, Size: 4]
	uint32 ConstCoordinate; 	//[Offset: 0x0, Size: 4]
	bool bFractionalPart; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionParticleColor.MaterialExpression.Object, Addr: 0x7690358300
Class: MaterialExpressionParticleDirection.MaterialExpression.Object, Addr: 0x7690358080
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object, Addr: 0x7690357e00
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object, Addr: 0x7690357b80
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object, Addr: 0x7690357900
Class: MaterialExpressionParticleRadius.MaterialExpression.Object, Addr: 0x7690357680
Class: MaterialExpressionParticleRandom.MaterialExpression.Object, Addr: 0x7690357400
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object, Addr: 0x7690357180
Class: MaterialExpressionParticleSize.MaterialExpression.Object, Addr: 0x7690356f00
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object, Addr: 0x7690356c80
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690356a00
	bool bBlend; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object, Addr: 0x7690356780
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object, Addr: 0x7690356500
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstDefaultValue; 	//[Offset: 0x0, Size: 4]
	uint32 DataIndex; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object, Addr: 0x7690356280
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object, Addr: 0x7690356000
Class: MaterialExpressionPixelDepth.MaterialExpression.Object, Addr: 0x7690355d80
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object, Addr: 0x7690355b00
Class: MaterialExpressionPower.MaterialExpression.Object, Addr: 0x7690355880
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstExponent; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object, Addr: 0x7690355600
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object, Addr: 0x7690355380
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object, Addr: 0x769035f600
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object, Addr: 0x769035f380
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object, Addr: 0x769035f100
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object, Addr: 0x769035ee80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object, Addr: 0x769035ec00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRealTimeReflectionAOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035e980
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRealTimeReflectionBOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035e700
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRealTimeReflectionCOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035e480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRealTimeReflectionAverageBrightnessOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035e200
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object, Addr: 0x769035df80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object, Addr: 0x769035dd00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bNormalizeCustomWorldNormal; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionReroute.MaterialExpression.Object, Addr: 0x769035da80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object, Addr: 0x769035d800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Period; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionRotator.MaterialExpression.Object, Addr: 0x769035d580
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float CenterX; 	//[Offset: 0x0, Size: 4]
	float CenterY; 	//[Offset: 0x0, Size: 4]
	float Speed; 	//[Offset: 0x0, Size: 4]
	uint32 ConstCoordinate; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionRound.MaterialExpression.Object, Addr: 0x769035d300
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035d080
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object, Addr: 0x769035ce00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object, Addr: 0x769035cb80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	RuntimeVirtualTexture* VirtualTexture; 	//[Offset: 0x0, Size: 8]
	enum ERuntimeVirtualTextureMaterialType MaterialType { //[Offset: 0x0, Size: 1]
		BaseColor = 0
		BaseColor_Normal_DEPRECATED = 74006500000000
		BaseColor_Normal_Specular = 3a003a00000000
		BaseColor_Normal_Specular_YCoCg = 65007600000000
		BaseColor_Normal_Specular_Mask_YCoCg = 6b006300000000
		WorldHeight = 65006300000000
		Count = 58004100000000
		ERuntimeVirtualTextureMaterialType_MAX = 0
	};
	bool bSinglePhysicalSpace; 	//[Offset: 0x0, Size: 1]
	bool bAdaptive; 	//[Offset: 0x0, Size: 1]
	enum ERuntimeVirtualTextureMipValueMode MipValueMode { //[Offset: 0x0, Size: 1]
		RVTMVM_None = 0
		RVTMVM_MipLevel = 6e006100000000
		RVTMVM_MipBias = 6d006100000000
		RVTMVM_MAX = 65004c00000000
	};
	enum ERuntimeVirtualTextureTextureAddressMode TextureAddressMode { //[Offset: 0x0, Size: 1]
		RVTTA_Clamp = 0
		RVTTA_Wrap = 63006e00000000
		RVTTA_MAX = 70007900000000
	};
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object, Addr: 0x769035c900
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	FName Group; 	//[Offset: 0x0, Size: 12]
Class: MaterialExpressionSaturate.MaterialExpression.Object, Addr: 0x769035c680
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSceneColor.MaterialExpression.Object, Addr: 0x769035c400
	enum EMaterialSceneAttributeInputMode InputMode { //[Offset: 0x0, Size: 1]
		Coordinates = 0
		OffsetFraction = 41006500000000
		EMaterialSceneAttributeInputMode_MAX = 0
	};
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: MaterialExpressionSceneDepth.MaterialExpression.Object, Addr: 0x769035c180
	enum EMaterialSceneAttributeInputMode InputMode { //[Offset: 0x0, Size: 1]
		Coordinates = 0
		OffsetFraction = 41006500000000
		EMaterialSceneAttributeInputMode_MAX = 0
	};
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object, Addr: 0x769035bf00
	enum EMaterialSceneAttributeInputMode InputMode { //[Offset: 0x0, Size: 1]
		Coordinates = 0
		OffsetFraction = 41006500000000
		EMaterialSceneAttributeInputMode_MAX = 0
	};
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float FallbackDepth; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object, Addr: 0x769035bc80
Class: MaterialExpressionSceneTexture.MaterialExpression.Object, Addr: 0x769035ba00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum ESceneTextureId SceneTextureId { //[Offset: 0x0, Size: 1]
		PPI_SceneColor = 0
		PPI_SceneDepth = 0
		PPI_DiffuseColor = 0
		PPI_SpecularColor = 0
		PPI_SubsurfaceColor = 0
		PPI_BaseColor = 0
		PPI_Specular = 0
		PPI_Metallic = 0
		PPI_WorldNormal = 0
		PPI_SeparateTranslucency = 0
		PPI_Opacity = 0
		PPI_Roughness = 0
		PPI_MaterialAO = 0
		PPI_CustomDepth = 0
		PPI_PostProcessInput0 = 0
		PPI_PostProcessInput1 = 0
		PPI_PostProcessInput2 = 0
		PPI_PostProcessInput3 = 0
		PPI_PostProcessInput4 = 0
		PPI_PostProcessInput5 = 0
		PPI_PostProcessInput6 = 0
		PPI_DecalMask = 0
		PPI_ShadingModelColor = 0
		PPI_ShadingModelID = 0
		PPI_AmbientOcclusion = 0
		PPI_CustomStencil = 0
		PPI_StoredBaseColor = 0
		PPI_StoredSpecular = 0
		PPI_Velocity = 0
		PPI_WorldTangent = 0
		PPI_Anisotropy = 0
		PPI_MAX = 0
	};
	bool bFiltered; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionScreenPosition.MaterialExpression.Object, Addr: 0x769035b780
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object, Addr: 0x769035b500
	structExpressionInput[] Inputs; //[Offset: 0x0, Size: 16]
	structGuid[] AttributeSetTypes; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object, Addr: 0x769035b280
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionShadingModel.MaterialExpression.Object, Addr: 0x769035b000
	enum EMaterialShadingModel ShadingModel { //[Offset: 0x0, Size: 1]
		MSM_Unlit = 0
		MSM_DefaultLit = 0
		MSM_Subsurface = 0
		MSM_PreintegratedSkin = 0
		MSM_ClearCoat = 0
		MSM_SubsurfaceProfile = 0
		MSM_TwoSidedFoliage = 0
		MSM_Hair = 700000000
		MSM_Cloth = 100000000
		MSM_Eye = 0
		MSM_SingleLayerWater = 0
		MSM_BakeDiffuseLighting = 0
		MSM_ThinTranslucent = 0
		MSM_NUM = 0
		MSM_FromMaterialExpression = 0
		MSM_MAX = 0
	};
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object, Addr: 0x769035ad80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionShadowReplace.MaterialExpression.Object, Addr: 0x769035ab00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSign.MaterialExpression.Object, Addr: 0x769035a880
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSine.MaterialExpression.Object, Addr: 0x769035a600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Period; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x769035fd80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object, Addr: 0x769035fb00
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object, Addr: 0x769035f880
	int LightIndex; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object, Addr: 0x7690365100
	int LightIndex; 	//[Offset: 0x0, Size: 4]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object, Addr: 0x7690364e80
	int LightIndex; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object, Addr: 0x7690364c00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object, Addr: 0x7690364980
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object, Addr: 0x7690364700
Class: MaterialExpressionSmoothStep.MaterialExpression.Object, Addr: 0x7690364480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstMin; 	//[Offset: 0x0, Size: 4]
	float ConstMax; 	//[Offset: 0x0, Size: 4]
	float ConstValue; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSobol.MaterialExpression.Object, Addr: 0x7690364200
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	uint32 ConstIndex; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: MaterialExpressionSpeedTree.MaterialExpression.Object, Addr: 0x7690363f80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum ESpeedTreeGeometryType GeometryType { //[Offset: 0x0, Size: 1]
		STG_Branch = 0
		STG_Frond = 65007400000000
		STG_Leaf = 61006800000000
		STG_FacingLeaf = 61007200000000
		STG_Billboard = 4d005f00000000
		STG_MAX = 0
	};
	enum ESpeedTreeWindType WindType { //[Offset: 0x0, Size: 1]
		STW_None = 0
		STW_Fastest = 75006c00000000
		STW_Fast = 63006900000000
		STW_Better = 3a006400000000
		STW_Best = 69006e00000000
		STW_Palm = 72007000000000
		STW_BestPlus = 69007400000000
		STW_MAX = 0
	};
	enum ESpeedTreeLODType LODType { //[Offset: 0x0, Size: 1]
		STLOD_Pop = 0
		STLOD_Smooth = 41006500000000
		STLOD_MAX = 0
	};
	float BillboardThreshold; 	//[Offset: 0x0, Size: 4]
	bool bAccurateWindVelocities; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionSphereMask.MaterialExpression.Object, Addr: 0x7690363d00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float AttenuationRadius; 	//[Offset: 0x0, Size: 4]
	float HardnessPercent; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object, Addr: 0x7690363a80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstantDensity; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSquareRoot.MaterialExpression.Object, Addr: 0x7690363800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionStaticBool.MaterialExpression.Object, Addr: 0x7690363580
	bool Value; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x7690363300
	bool DefaultValue; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x7690363080
	bool DefaultR; 	//[Offset: 0x0, Size: 1]
	bool DefaultG; 	//[Offset: 0x0, Size: 1]
	bool DefaultB; 	//[Offset: 0x0, Size: 1]
	bool DefaultA; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object, Addr: 0x7690362e00
	bool DefaultValue; 	//[Offset: 0x0, Size: 1]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object, Addr: 0x7690362b80
Class: MaterialExpressionStep.MaterialExpression.Object, Addr: 0x7690362900
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstY; 	//[Offset: 0x0, Size: 4]
	float ConstX; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionSubsurfaceParameterOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690362680
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionSubtract.MaterialExpression.Object, Addr: 0x7690362400
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstA; 	//[Offset: 0x0, Size: 4]
	float ConstB; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionTangent.MaterialExpression.Object, Addr: 0x7690362180
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float Period; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690361f00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object, Addr: 0x7690361c80
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	uint32 ConstIndex; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object, Addr: 0x7690361a00
	int CoordinateIndex; 	//[Offset: 0x0, Size: 4]
	float UTiling; 	//[Offset: 0x0, Size: 4]
	float VTiling; 	//[Offset: 0x0, Size: 4]
	bool UnMirrorU; 	//[Offset: 0x0, Size: 1]
	bool UnMirrorV; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690361780
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690361500
Class: MaterialExpressionTextureProperty.MaterialExpression.Object, Addr: 0x7690361280
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialExposedTextureProperty Property { //[Offset: 0x0, Size: 1]
		TMTM_TextureSize = 0
		TMTM_TexelSize = 65006500000000
		TMTM_MAX = 72007400000000
	};
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690361000
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690360d80
Class: TextureCube.Texture.StreamableRenderAsset.Object, Addr: 0x769027e700
	int Blueprint_GetSizeX(); //Addr 0x75ee21b744 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac056300
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690360b00
	bool bBlend; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x7690360880
Class: VolumeTexture.Texture.StreamableRenderAsset.Object, Addr: 0x76903a4e80
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690360600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionTime.MaterialExpression.Object, Addr: 0x7690360380
	bool bIgnorePause; 	//[Offset: 0x0, Size: 1]
	bool bOverride_Period; 	//[Offset: 0x0, Size: 1]
	float Period; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionTransform.MaterialExpression.Object, Addr: 0x7690360100
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialVectorCoordTransformSource TransformSourceType { //[Offset: 0x0, Size: 1]
		TRANSFORMSOURCE_Tangent = 0
		TRANSFORMSOURCE_Local = 75006c00000000
		TRANSFORMSOURCE_World = 63006900000000
		TRANSFORMSOURCE_View = 3a006400000000
		TRANSFORMSOURCE_Camera = 69006e00000000
		TRANSFORMSOURCE_ParticleWorld = 72007000000000
		TRANSFORMSOURCE_MAX = 69007400000000
	};
	enum EMaterialVectorCoordTransform TransformType { //[Offset: 0x0, Size: 1]
		TRANSFORM_Tangent = 0
		TRANSFORM_Local = 75006c00000000
		TRANSFORM_World = 63006900000000
		TRANSFORM_View = 3a006400000000
		TRANSFORM_Camera = 69006e00000000
		TRANSFORM_ParticleWorld = 72007000000000
		TRANSFORM_MAX = 69007400000000
	};
Class: MaterialExpressionTransformPosition.MaterialExpression.Object, Addr: 0x769036a380
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EMaterialPositionTransformSource TransformSourceType { //[Offset: 0x0, Size: 1]
		TRANSFORMPOSSOURCE_Local = 0
		TRANSFORMPOSSOURCE_World = 75006c00000000
		TRANSFORMPOSSOURCE_TranslatedWorld = 63006900000000
		TRANSFORMPOSSOURCE_View = 3a006400000000
		TRANSFORMPOSSOURCE_Camera = 69006e00000000
		TRANSFORMPOSSOURCE_Particle = 72007000000000
		TRANSFORMPOSSOURCE_MAX = 69007400000000
	};
	enum EMaterialPositionTransformSource TransformType { //[Offset: 0x0, Size: 1]
		TRANSFORMPOSSOURCE_Local = 0
		TRANSFORMPOSSOURCE_World = 75006c00000000
		TRANSFORMPOSSOURCE_TranslatedWorld = 63006900000000
		TRANSFORMPOSSOURCE_View = 3a006400000000
		TRANSFORMPOSSOURCE_Camera = 69006e00000000
		TRANSFORMPOSSOURCE_Particle = 72007000000000
		TRANSFORMPOSSOURCE_MAX = 69007400000000
	};
Class: MaterialExpressionTruncate.MaterialExpression.Object, Addr: 0x769036a100
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object, Addr: 0x7690369e80
Class: MaterialExpressionUserDefineOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690369c00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty FunctionName; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionVectorNoise.MaterialExpression.Object, Addr: 0x7690369980
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EVectorNoiseFunction NoiseFunction { //[Offset: 0x0, Size: 1]
		VNF_CellnoiseALU = 0
		VNF_VectorALU = 62006900000000
		VNF_GradientALU = 65006400000000
		VNF_CurlALU = 53006c00000000
		VNF_VoronoiALU = 74007500000000
		VNF_MAX = 4d005f00000000
	};
	int Quality; 	//[Offset: 0x0, Size: 4]
	bool bTiling; 	//[Offset: 0x0, Size: 1]
	uint32 TileSize; 	//[Offset: 0x0, Size: 4]
Class: MaterialExpressionVertexColor.MaterialExpression.Object, Addr: 0x7690369700
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690369480
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object, Addr: 0x7690369200
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object, Addr: 0x7690368f80
Class: MaterialExpressionViewProperty.MaterialExpression.Object, Addr: 0x7690368d00
	enum EMaterialExposedViewProperty Property { //[Offset: 0x0, Size: 1]
		MEVP_BufferSize = 0
		MEVP_FieldOfView = 0
		MEVP_TanHalfFieldOfView = 0
		MEVP_ViewSize = 0
		MEVP_WorldSpaceViewPosition = 0
		MEVP_WorldSpaceCameraPosition = 0
		MEVP_ViewportOffset = 0
		MEVP_TemporalSampleCount = 700000000
		MEVP_TemporalSampleIndex = 100000000
		MEVP_TemporalSampleOffset = 0
		MEVP_RuntimeVirtualTextureOutputLevel = 0
		MEVP_RuntimeVirtualTextureOutputDerivative = 0
		MEVP_PreExposure = 0
		MEVP_RuntimeVirtualTextureMaxLevel = 0
		MEVP_MAX = 0
	};
Class: MaterialExpressionViewSize.MaterialExpression.Object, Addr: 0x7690368a80
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object, Addr: 0x7690368800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object, Addr: 0x7690368580
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690368300
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	float ConstPhaseG; 	//[Offset: 0x0, Size: 4]
	float ConstPhaseG2; 	//[Offset: 0x0, Size: 4]
	float ConstPhaseBlend; 	//[Offset: 0x0, Size: 4]
	bool PerSamplePhaseEvaluation; 	//[Offset: 0x0, Size: 1]
	uint32 MultiScatteringApproximationOctaveCount; 	//[Offset: 0x0, Size: 4]
	float ConstMultiScatteringContribution; 	//[Offset: 0x0, Size: 4]
	float ConstMultiScatteringOcclusion; 	//[Offset: 0x0, Size: 4]
	float ConstMultiScatteringEccentricity; 	//[Offset: 0x0, Size: 4]
	bool bGroundContribution; 	//[Offset: 0x0, Size: 1]
	bool bGrayScaleMaterial; 	//[Offset: 0x0, Size: 1]
	bool bRayMarchVolumeShadow; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionWorldPosition.MaterialExpression.Object, Addr: 0x7690368080
	enum EWorldPositionIncludedOffsets WorldPositionShaderOffset { //[Offset: 0x0, Size: 1]
		WPT_Default = 0
		WPT_ExcludeAllShaderOffsets = 65007400000000
		WPT_CameraRelative = 61006800000000
		WPT_CameraRelativeNoOffsets = 61007200000000
		WPT_MAX = 4d005f00000000
	};
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object, Addr: 0x7690367900
	MaterialFunctionInterface* Parent; 	//[Offset: 0x0, Size: 8]
	MaterialFunctionInterface* Base; 	//[Offset: 0x0, Size: 8]
	structScalarParameterValue[] ScalarParameterValues; //[Offset: 0x0, Size: 16]
	structVectorParameterValue[] VectorParameterValues; //[Offset: 0x0, Size: 16]
	structTextureParameterValue[] TextureParameterValues; //[Offset: 0x0, Size: 16]
	structFontParameterValue[] FontParameterValues; //[Offset: 0x0, Size: 16]
	structStaticSwitchParameter[] StaticSwitchParameterValues; //[Offset: 0x0, Size: 16]
	structStaticComponentMaskParameter[] StaticComponentMaskParameterValues; //[Offset: 0x0, Size: 16]
	structRuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues; //[Offset: 0x0, Size: 16]
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object, Addr: 0x7690367680
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object, Addr: 0x7690367400
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object, Addr: 0x7690367180
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object, Addr: 0x7690366f00
Class: MaterialInstance.MaterialInterface.Object, Addr: 0x7690280d80
	PhysicalMaterial* PhysMaterial; 	//[Offset: 0x0, Size: 8]
	PhysicalMaterial* PhysicalMaterialMap; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Parent; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* NextPass; 	//[Offset: 0x0, Size: 8]
	byte NumRepeatedNextPass; //[Offset: 0x0, Size: 1]
	MaterialInstanceDynamic*[] NextPassRepeatedMats; //[Offset: 0x0, Size: 16]
	bool bHasStaticPermutationResource; 	//[Offset: 0x0, Size: 1]
	bool bOverrideSubsurfaceProfile; 	//[Offset: 0x0, Size: 1]
	structScalarParameterValue[] ScalarParameterValues; //[Offset: 0x0, Size: 16]
	structVectorParameterValue[] VectorParameterValues; //[Offset: 0x0, Size: 16]
	structTextureParameterValue[] TextureParameterValues; //[Offset: 0x0, Size: 16]
	structRuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues; //[Offset: 0x0, Size: 16]
	structFontParameterValue[] FontParameterValues; //[Offset: 0x0, Size: 16]
	MaterialInstanceBasePropertyOverrides StructProperty; 	//[Offset: 0x0, Size: 8]
	StaticParameterSet StructProperty; 	//[Offset: 0x0, Size: 64]
	MaterialCachedParameters StructProperty; 	//[Offset: 0x0, Size: 416]
	Object*[] CachedReferencedTextures; //[Offset: 0x0, Size: 16]
Class: MaterialInstanceActor.Actor.Object, Addr: 0x7690366c80
	Actor*[] TargetActors; //[Offset: 0x0, Size: 16]
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object, Addr: 0x7690281000
	PhysicalMaterialMask* PhysMaterialMask; 	//[Offset: 0x0, Size: 8]
	structLinearColor K2_GetVectorParameterValue(FName ParameterName); //Addr 0x75ee136dcc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05f900
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object, Addr: 0x7690366a00
	Void SetVectorParameterValueByInfo(constoutrefstructMaterialParameterInfo ParameterInfo, structLinearColor Value); //Addr 0x75ee137884 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac351000
Class: MaterialParameterCollection.Object, Addr: 0x7690366780
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	structCollectionScalarParameter[] ScalarParameters; //[Offset: 0x0, Size: 16]
	structCollectionVectorParameter[] VectorParameters; //[Offset: 0x0, Size: 16]
Class: MaterialParameterCollectionInstance.Object, Addr: 0x7690366500
	MaterialParameterCollection* Collection; 	//[Offset: 0x0, Size: 8]
Class: MatineeActor.Actor.Object, Addr: 0x7690366280
	InterpData* MatineeData; 	//[Offset: 0x0, Size: 8]
	FName MatineeControllerName; 	//[Offset: 0x0, Size: 12]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	bool bPlayOnLevelLoad; 	//[Offset: 0x0, Size: 1]
	bool bForceStartPos; 	//[Offset: 0x0, Size: 1]
	float ForceStartPosition; 	//[Offset: 0x0, Size: 4]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bRewindOnPlay; 	//[Offset: 0x0, Size: 1]
	bool bNoResetOnRewind; 	//[Offset: 0x0, Size: 1]
	bool bRewindIfAlreadyPlaying; 	//[Offset: 0x0, Size: 1]
	bool bDisableRadioFilter; 	//[Offset: 0x0, Size: 1]
	bool bClientSideOnly; 	//[Offset: 0x0, Size: 1]
	bool bSkipUpdateIfNotVisible; 	//[Offset: 0x0, Size: 1]
	bool bIsSkippable; 	//[Offset: 0x0, Size: 1]
	int PreferredSplitScreenNum; 	//[Offset: 0x0, Size: 4]
	bool bDisableMovementInput; 	//[Offset: 0x0, Size: 1]
	bool bDisableLookAtInput; 	//[Offset: 0x0, Size: 1]
	bool bHidePlayer; 	//[Offset: 0x0, Size: 1]
	bool bHideHud; 	//[Offset: 0x0, Size: 1]
	structInterpGroupActorInfo[] GroupActorInfos; //[Offset: 0x0, Size: 16]
	bool bShouldShowGore; 	//[Offset: 0x0, Size: 1]
	InterpGroupInst*[] GroupInst; //[Offset: 0x0, Size: 16]
	structCameraCutInfo[] CameraCuts; //[Offset: 0x0, Size: 16]
	bool bIsPlaying; 	//[Offset: 0x0, Size: 1]
	bool bReversePlayback; 	//[Offset: 0x0, Size: 1]
	bool bPaused; 	//[Offset: 0x0, Size: 1]
	bool bPendingStop; 	//[Offset: 0x0, Size: 1]
	float InterpPosition; 	//[Offset: 0x0, Size: 4]
	byte ReplicationForceIsPlaying; //[Offset: 0x0, Size: 1]
	delegate OnPlay; 	//[Offset: 0x0, Size: 16]
	delegate OnStop; 	//[Offset: 0x0, Size: 16]
	delegate OnPause; 	//[Offset: 0x0, Size: 16]
	Void Stop(); //Addr 0x75ee13a974 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac350800
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object, Addr: 0x7690366000
	CameraAnim* CameraAnim; 	//[Offset: 0x0, Size: 8]
Class: MatineeAnimInterface.Interface.Object, Addr: 0x7690365d80
Class: MatineeInterface.Interface.Object, Addr: 0x7690365b00
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object, Addr: 0x7690365880
Class: MeshSimplificationSettings.DeveloperSettings.Object, Addr: 0x7690365600
	FName MeshReductionModuleName; 	//[Offset: 0x0, Size: 12]
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690365380
	Void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent); //Addr 0x75ee14017c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac350400
Class: MicroTransactionBase.PlatformInterfaceBase.Object, Addr: 0x769036f600
	structPurchaseInfo[] AvailableProducts; //[Offset: 0x0, Size: 16]
	StrProperty LastError; 	//[Offset: 0x0, Size: 16]
	StrProperty LastErrorSolution; 	//[Offset: 0x0, Size: 16]
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769036f380
	BodySetup* ModelBodySetup; 	//[Offset: 0x0, Size: 8]
Class: MorphTarget.Object, Addr: 0x769036f100
	SkeletalMesh* BaseSkelMesh; 	//[Offset: 0x0, Size: 8]
Class: NavAgentInterface.Interface.Object, Addr: 0x769036ee80
Class: NavAreaBase.Object, Addr: 0x769036ec00
Class: NavCollisionBase.Object, Addr: 0x769036e980
	bool bIsDynamicObstacle; 	//[Offset: 0x0, Size: 1]
Class: NavEdgeProviderInterface.Interface.Object, Addr: 0x769036e700
Class: NavigationDataChunk.Object, Addr: 0x769036e480
	FName NavigationDataName; 	//[Offset: 0x0, Size: 12]
Class: NavigationDataInterface.Interface.Object, Addr: 0x769036e200
Class: NavigationObjectBase.Actor.Object, Addr: 0x769036df80
	CapsuleComponent* CapsuleComponent; 	//[Offset: 0x0, Size: 8]
	BillboardComponent* GoodSprite; 	//[Offset: 0x0, Size: 8]
	BillboardComponent* BadSprite; 	//[Offset: 0x0, Size: 8]
	bool bIsPIEPlayerStart; 	//[Offset: 0x0, Size: 1]
Class: NavigationSystemBase.Object, Addr: 0x769036dd00
Class: NavigationSystemConfig.Object, Addr: 0x769036da80
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	NavAgentSelector StructProperty; 	//[Offset: 0x0, Size: 4]
	FName DefaultAgentName; 	//[Offset: 0x0, Size: 12]
	bool bIsOverriden; 	//[Offset: 0x0, Size: 1]
Class: NullNavSysConfig.NavigationSystemConfig.Object, Addr: 0x769036d800
Class: NavLinkDefinition.Object, Addr: 0x769036d580
	structNavigationLink[] Links; //[Offset: 0x0, Size: 16]
	structNavigationSegmentLink[] SegmentLinks; //[Offset: 0x0, Size: 16]
Class: NavPathObserverInterface.Interface.Object, Addr: 0x769036d300
Class: NavRelevantInterface.Interface.Object, Addr: 0x769036d080
Class: SimulatedClientNetConnection.NetConnection.Player.Object, Addr: 0x769036ce00
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object, Addr: 0x769036cb80
	Void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName); //Addr 0x75ee14cb40 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac350200
Class: NetworkPredictionInterface.Interface.Object, Addr: 0x769036c900
Class: NetworkSettings.DeveloperSettings.Object, Addr: 0x769036c680
	bool bVerifyPeer; 	//[Offset: 0x0, Size: 1]
	bool bEnableMultiplayerWorldOriginRebasing; 	//[Offset: 0x0, Size: 1]
	int MaxRepArraySize; 	//[Offset: 0x0, Size: 4]
	int MaxRepArrayMemory; 	//[Offset: 0x0, Size: 4]
	structNetworkEmulationProfileDescription[] NetworkEmulationProfiles; //[Offset: 0x0, Size: 16]
Class: NodeMappingContainer.Object, Addr: 0x769036c400
	<FName, structNodeItem> SourceItems; //[Offset: 0x0, Size: 80]
	<FName, structNodeItem> TargetItems; //[Offset: 0x0, Size: 80]
	<FName, FName> SourceToTarget; //[Offset: 0x0, Size: 80]
	Object* SourceAsset; 	//[Offset: 0x0, Size: 48]
	Object* TargetAsset; 	//[Offset: 0x0, Size: 48]
Class: NodeMappingProviderInterface.Interface.Object, Addr: 0x769036c180
Class: Note.Actor.Object, Addr: 0x769036bf00
Class: ObjectLibrary.Object, Addr: 0x769036bc80
	Object* ObjectBaseClass; 	//[Offset: 0x0, Size: 8]
	bool bHasBlueprintClasses; 	//[Offset: 0x0, Size: 1]
	Object*[] objects; //[Offset: 0x0, Size: 16]
	Object*[] WeakObjects; //[Offset: 0x0, Size: 16]
	bool bUseWeakReferences; 	//[Offset: 0x0, Size: 1]
	bool bIsFullyLoaded; 	//[Offset: 0x0, Size: 1]
Class: ObjectReferencer.Object, Addr: 0x769036ba00
	Object*[] ReferencedObjects; //[Offset: 0x0, Size: 16]
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x769036b780
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object, Addr: 0x769036b500
Class: OnlineEngineInterface.Object, Addr: 0x769036b280
Class: OnlineSession.Object, Addr: 0x769036b000
Class: PackageMapClient.PackageMap.Object, Addr: 0x769036ad80
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object, Addr: 0x769036ab00
	bool bPainCausing; 	//[Offset: 0x0, Size: 1]
	float DamagePerSec; 	//[Offset: 0x0, Size: 4]
	DamageType* DamageType; 	//[Offset: 0x0, Size: 8]
	float PainInterval; 	//[Offset: 0x0, Size: 4]
	bool bEntryPain; 	//[Offset: 0x0, Size: 1]
	bool BACKUP_bPainCausing; 	//[Offset: 0x0, Size: 1]
	Controller* DamageInstigator; 	//[Offset: 0x0, Size: 8]
Class: ParticleEmitter.Object, Addr: 0x769036a880
	FName EmitterName; 	//[Offset: 0x0, Size: 12]
	int SubUVDataOffset; 	//[Offset: 0x0, Size: 4]
	enum EEmitterRenderMode EmitterRenderMode { //[Offset: 0x0, Size: 1]
		ERM_Normal = 0
		ERM_Point = 72006500000000
		ERM_Cross = 3a003a00000000
		ERM_LightsOnly = 65005300000000
		ERM_None = 74006c00000000
		ERM_MAX = 4d000000000000
	};
	enum EParticleSignificanceLevel SignificanceLevel { //[Offset: 0x0, Size: 1]
		Low = 0
		Medium = 72006500000000
		High = 3a003a00000000
		Critical = 61007400000000
		Num = 6f006900000000
		EParticleSignificanceLevel_MAX = 0
	};
	bool bUseLegacySpawningBehavior; 	//[Offset: 0x0, Size: 1]
	bool ConvertedModules; 	//[Offset: 0x0, Size: 1]
	bool bIsSoloing; 	//[Offset: 0x0, Size: 1]
	bool bCookedOut; 	//[Offset: 0x0, Size: 1]
	bool bDisabledLODsKeepEmitterAlive; 	//[Offset: 0x0, Size: 1]
	bool bDisableWhenInsignficant; 	//[Offset: 0x0, Size: 1]
	ParticleLODLevel*[] LODLevels; //[Offset: 0x0, Size: 16]
	int PeakActiveParticles; 	//[Offset: 0x0, Size: 4]
	int InitialAllocationCount; 	//[Offset: 0x0, Size: 4]
	float QualityLevelSpawnRateScale; 	//[Offset: 0x0, Size: 4]
	uint32 DetailModeBitmask; 	//[Offset: 0x0, Size: 4]
Class: ParticleEventManager.Actor.Object, Addr: 0x769036a600
Class: ParticleLODLevel.Object, Addr: 0x769036fd80
	int Level; 	//[Offset: 0x0, Size: 4]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	ParticleModuleRequired* RequiredModule; 	//[Offset: 0x0, Size: 8]
	ParticleModule*[] Modules; //[Offset: 0x0, Size: 16]
	ParticleModuleTypeDataBase* TypeDataModule; 	//[Offset: 0x0, Size: 8]
	ParticleModuleSpawn* SpawnModule; 	//[Offset: 0x0, Size: 8]
	ParticleModuleEventGenerator* EventGenerator; 	//[Offset: 0x0, Size: 8]
	ParticleModuleSpawnBase*[] SpawningModules; //[Offset: 0x0, Size: 16]
	ParticleModule*[] SpawnModules; //[Offset: 0x0, Size: 16]
	ParticleModule*[] UpdateModules; //[Offset: 0x0, Size: 16]
	ParticleModuleOrbit*[] OrbitModules; //[Offset: 0x0, Size: 16]
	ParticleModuleEventReceiverBase*[] EventReceiverModules; //[Offset: 0x0, Size: 16]
	bool ConvertedModules; 	//[Offset: 0x0, Size: 1]
	int PeakActiveParticles; 	//[Offset: 0x0, Size: 4]
Class: ParticleModule.Object, Addr: 0x769036fb00
	bool bSpawnModule; 	//[Offset: 0x0, Size: 1]
	bool bUpdateModule; 	//[Offset: 0x0, Size: 1]
	bool bFinalUpdateModule; 	//[Offset: 0x0, Size: 1]
	bool bUpdateForGPUEmitter; 	//[Offset: 0x0, Size: 1]
	bool bCurvesAsColor; 	//[Offset: 0x0, Size: 1]
	bool b3DDrawMode; 	//[Offset: 0x0, Size: 1]
	bool bSupported3DDrawMode; 	//[Offset: 0x0, Size: 1]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	bool bEditable; 	//[Offset: 0x0, Size: 1]
	bool LODDuplicate; 	//[Offset: 0x0, Size: 1]
	bool bSupportsRandomSeed; 	//[Offset: 0x0, Size: 1]
	bool bRequiresLoopingNotification; 	//[Offset: 0x0, Size: 1]
	byte LODValidity; //[Offset: 0x0, Size: 1]
Class: ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x7690375100
	bool bAlwaysInWorldSpace; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x769036f880
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bApplyOwnerScale; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x7690374e80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x7690374c00
	DistributionFloat* DragCoefficient; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x7690374980
	DistributionFloat* DragScale; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object, Addr: 0x7690374700
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleAttractorBase.ParticleModule.Object, Addr: 0x7690374480
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object, Addr: 0x7690374200
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object, Addr: 0x7690373f80
	FName EmitterName; 	//[Offset: 0x0, Size: 12]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bStrengthByDistance; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bAffectBaseVelocity; 	//[Offset: 0x0, Size: 1]
	enum EAttractorParticleSelectionMethod SelectionMethod { //[Offset: 0x0, Size: 1]
		EAPSM_Random = 0
		EAPSM_Sequential = 74007200000000
		EAPSM_MAX = 6f004d00000000
	};
	bool bRenewSource; 	//[Offset: 0x0, Size: 1]
	bool bInheritSourceVel; 	//[Offset: 0x0, Size: 1]
	int LastSelIndex; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object, Addr: 0x7690373d00
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool StrengthByDistance; 	//[Offset: 0x0, Size: 1]
	bool bAffectBaseVelocity; 	//[Offset: 0x0, Size: 1]
	bool bOverrideVelocity; 	//[Offset: 0x0, Size: 1]
	bool bUseWorldSpacePosition; 	//[Offset: 0x0, Size: 1]
	bool Positive_X; 	//[Offset: 0x0, Size: 1]
	bool Positive_Y; 	//[Offset: 0x0, Size: 1]
	bool Positive_Z; 	//[Offset: 0x0, Size: 1]
	bool Negative_X; 	//[Offset: 0x0, Size: 1]
	bool Negative_Y; 	//[Offset: 0x0, Size: 1]
	bool Negative_Z; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object, Addr: 0x7690373a80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Radius; 	//[Offset: 0x0, Size: 4]
	DistributionFloat* Strength; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleBeamBase.ParticleModule.Object, Addr: 0x7690373800
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object, Addr: 0x7690373580
	enum BeamModifierType ModifierType { //[Offset: 0x0, Size: 1]
		PEB2MT_Source = 0
		PEB2MT_Target = 32006d00000000
		PEB2MT_MAX = 74006500000000
	};
	BeamModifierOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	BeamModifierOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bAbsoluteTangent; 	//[Offset: 0x0, Size: 1]
	BeamModifierOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object, Addr: 0x7690373300
	bool bLowFreq_Enabled; 	//[Offset: 0x0, Size: 1]
	int Frequency; 	//[Offset: 0x0, Size: 4]
	int Frequency_LowRange; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bNRScaleEmitterTime; 	//[Offset: 0x0, Size: 1]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bSmooth; 	//[Offset: 0x0, Size: 1]
	float NoiseLockRadius; 	//[Offset: 0x0, Size: 4]
	bool bNoiseLock; 	//[Offset: 0x0, Size: 1]
	bool bOscillate; 	//[Offset: 0x0, Size: 1]
	float NoiseLockTime; 	//[Offset: 0x0, Size: 4]
	float NoiseTension; 	//[Offset: 0x0, Size: 4]
	bool bUseNoiseTangents; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	int NoiseTessellation; 	//[Offset: 0x0, Size: 4]
	bool bTargetNoise; 	//[Offset: 0x0, Size: 1]
	float FrequencyDistance; 	//[Offset: 0x0, Size: 4]
	bool bApplyNoiseScale; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object, Addr: 0x7690373080
	enum Beam2SourceTargetMethod SourceMethod { //[Offset: 0x0, Size: 1]
		PEB2STM_Default = 0
		PEB2STM_UserSet = 72006500000000
		PEB2STM_Emitter = 3a003a00000000
		PEB2STM_Particle = 65005300000000
		PEB2STM_Actor = 74006c00000000
		PEB2STM_MAX = 4d000000000000
	};
	FName SourceName; 	//[Offset: 0x0, Size: 12]
	bool bSourceAbsolute; 	//[Offset: 0x0, Size: 1]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bLockSource; 	//[Offset: 0x0, Size: 1]
	enum Beam2SourceTargetTangentMethod SourceTangentMethod { //[Offset: 0x0, Size: 1]
		PEB2STTM_Direct = 0
		PEB2STTM_UserSet = 72006500000000
		PEB2STTM_Distribution = 3a003a00000000
		PEB2STTM_Emitter = 61007400000000
		PEB2STTM_MAX = 6f006900000000
	};
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bLockSourceTangent; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bLockSourceStength; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object, Addr: 0x7690372e00
	enum Beam2SourceTargetMethod TargetMethod { //[Offset: 0x0, Size: 1]
		PEB2STM_Default = 0
		PEB2STM_UserSet = 72006500000000
		PEB2STM_Emitter = 3a003a00000000
		PEB2STM_Particle = 65005300000000
		PEB2STM_Actor = 74006c00000000
		PEB2STM_MAX = 4d000000000000
	};
	FName TargetName; 	//[Offset: 0x0, Size: 12]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bTargetAbsolute; 	//[Offset: 0x0, Size: 1]
	bool bLockTarget; 	//[Offset: 0x0, Size: 1]
	enum Beam2SourceTargetTangentMethod TargetTangentMethod { //[Offset: 0x0, Size: 1]
		PEB2STTM_Direct = 0
		PEB2STTM_UserSet = 72006500000000
		PEB2STTM_Distribution = 3a003a00000000
		PEB2STTM_Emitter = 61007400000000
		PEB2STTM_MAX = 6f006900000000
	};
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bLockTargetTangent; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bLockTargetStength; 	//[Offset: 0x0, Size: 1]
	float LockRadius; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleCameraBase.ParticleModule.Object, Addr: 0x7690372b80
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object, Addr: 0x7690372900
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bSpawnTimeOnly; 	//[Offset: 0x0, Size: 1]
	enum EParticleCameraOffsetUpdateMethod UpdateMethod { //[Offset: 0x0, Size: 1]
		EPCOUM_DirectSet = 0
		EPCOUM_Additive = 32006d00000000
		EPCOUM_Scalar = 74006500000000
		EPCOUM_MAX = 6f006800000000
	};
Class: ParticleModuleCollisionBase.ParticleModule.Object, Addr: 0x7690372400
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object, Addr: 0x7690372680
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EParticleCollisionComplete CollisionCompletionOption { //[Offset: 0x0, Size: 1]
		EPCC_Kill = 0
		EPCC_Freeze = 67006900000000
		EPCC_HaltCollisions = 61006500000000
		EPCC_FreezeTranslation = 74007200000000
		EPCC_FreezeRotation = 6e004900000000
		EPCC_FreezeMovement = 65006300000000
		EPCC_MAX = 58004100000000
	};
	CollisionTypes(ByteProperty)[] CollisionTypes; //[Offset: 0x0, Size: 16]
	bool bApplyPhysics; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreTriggerVolumes; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	float DirScalar; 	//[Offset: 0x0, Size: 4]
	bool bPawnsDoNotDecrementCount; 	//[Offset: 0x0, Size: 1]
	bool bOnlyVerticalNormalsDecrementCount; 	//[Offset: 0x0, Size: 1]
	float VerticalFudgeFactor; 	//[Offset: 0x0, Size: 4]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bDropDetail; 	//[Offset: 0x0, Size: 1]
	bool bCollideOnlyIfVisible; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreSourceActor; 	//[Offset: 0x0, Size: 1]
	float MaxCollisionDistance; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object, Addr: 0x7690372180
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	float Friction; 	//[Offset: 0x0, Size: 4]
	float RandomSpread; 	//[Offset: 0x0, Size: 4]
	float RandomDistribution; 	//[Offset: 0x0, Size: 4]
	float RadiusScale; 	//[Offset: 0x0, Size: 4]
	float RadiusBias; 	//[Offset: 0x0, Size: 4]
	enum EParticleCollisionResponse Response { //[Offset: 0x0, Size: 1]
		Bounce = 0
		Stop = 0
		Kill = 0
		EParticleCollisionResponse_MAX = 0
	};
	enum EParticleCollisionMode CollisionMode { //[Offset: 0x0, Size: 1]
		SceneDepth = 0
		DistanceField = 6e006f00000000
		EParticleCollisionMode_MAX = 0
	};
Class: ParticleModuleColorBase.ParticleModule.Object, Addr: 0x7690371c80
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object, Addr: 0x7690371f00
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bClampAlpha; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object, Addr: 0x7690371a00
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object, Addr: 0x7690371780
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bClampAlpha; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object, Addr: 0x7690371500
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bEmitterTime; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleEventBase.ParticleModule.Object, Addr: 0x7690371280
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object, Addr: 0x7690371000
	structParticleEvent_GenerateInfo[] Events; //[Offset: 0x0, Size: 16]
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object, Addr: 0x7690370d80
	enum EParticleEventType EventGeneratorType { //[Offset: 0x0, Size: 1]
		EPET_Any = 0
		EPET_Spawn = 67006900000000
		EPET_Death = 61006500000000
		EPET_Collision = 74007200000000
		EPET_Burst = 6e004900000000
		EPET_Blueprint = 65006300000000
		EPET_MAX = 58004100000000
	};
	FName EventName; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object, Addr: 0x7690370b00
	bool bStopSpawning; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object, Addr: 0x7690370880
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bUseParticleTime; 	//[Offset: 0x0, Size: 1]
	bool bUsePSysLocation; 	//[Offset: 0x0, Size: 1]
	bool bInheritVelocity; 	//[Offset: 0x0, Size: 1]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	PhysicalMaterial*[] PhysicalMaterials; //[Offset: 0x0, Size: 16]
	bool bBanPhysicalMaterials; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleEventSendToGame.Object, Addr: 0x7690370600
Class: ParticleModuleKillBase.ParticleModule.Object, Addr: 0x7690370380
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object, Addr: 0x7690370100
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bAbsolute; 	//[Offset: 0x0, Size: 1]
	bool bKillInside; 	//[Offset: 0x0, Size: 1]
	bool bAxisAlignedAndFixedSize; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object, Addr: 0x769037a380
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bAbsolute; 	//[Offset: 0x0, Size: 1]
	bool bFloor; 	//[Offset: 0x0, Size: 1]
	bool bApplyPSysScale; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleLifetimeBase.ParticleModule.Object, Addr: 0x7690379e80
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object, Addr: 0x769037a100
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object, Addr: 0x7690379c00
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleLightBase.ParticleModule.Object, Addr: 0x7690379700
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object, Addr: 0x7690379980
	bool bUseInverseSquaredFalloff; 	//[Offset: 0x0, Size: 1]
	bool bAffectsTranslucency; 	//[Offset: 0x0, Size: 1]
	bool bPreviewLightRadius; 	//[Offset: 0x0, Size: 1]
	float SpawnFraction; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	LightingChannels StructProperty; 	//[Offset: 0x0, Size: 1]
	float VolumetricScatteringIntensity; 	//[Offset: 0x0, Size: 4]
	bool bHighQualityLights; 	//[Offset: 0x0, Size: 1]
	bool bShadowCastingLights; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object, Addr: 0x7690379480
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378f80
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690379200
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	float DistributeOverNPoints; 	//[Offset: 0x0, Size: 4]
	float DistributeThreshold; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378d00
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378a80
	enum ELocationBoneSocketSource SourceType { //[Offset: 0x0, Size: 1]
		BONESOCKETSOURCE_Bones = 0
		BONESOCKETSOURCE_Sockets = 0
		BONESOCKETSOURCE_MAX = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	structLocationBoneSocketInfo[] SourceLocations; //[Offset: 0x0, Size: 16]
	enum ELocationBoneSocketSelectionMethod SelectionMethod { //[Offset: 0x0, Size: 1]
		BONESOCKETSEL_Sequential = 0
		BONESOCKETSEL_Random = 0
		BONESOCKETSEL_MAX = 0
	};
	bool bUpdatePositionEachFrame; 	//[Offset: 0x0, Size: 1]
	bool bOrientMeshEmitters; 	//[Offset: 0x0, Size: 1]
	bool bInheritBoneVelocity; 	//[Offset: 0x0, Size: 1]
	float InheritVelocityScale; 	//[Offset: 0x0, Size: 4]
	FName SkelMeshActorParamName; 	//[Offset: 0x0, Size: 12]
	int NumPreSelectedIndices; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378800
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378580
	FName EmitterName; 	//[Offset: 0x0, Size: 12]
	enum ELocationEmitterSelectionMethod SelectionMethod { //[Offset: 0x0, Size: 1]
		ELESM_Random = 0
		ELESM_Sequential = 0
		ELESM_MAX = 0
	};
	bool InheritSourceVelocity; 	//[Offset: 0x0, Size: 1]
	float InheritSourceVelocityScale; 	//[Offset: 0x0, Size: 4]
	bool bInheritSourceRotation; 	//[Offset: 0x0, Size: 1]
	float InheritSourceRotationScale; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378300
	FName EmitterName; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690378080
	bool Positive_X; 	//[Offset: 0x0, Size: 1]
	bool Positive_Y; 	//[Offset: 0x0, Size: 1]
	bool Positive_Z; 	//[Offset: 0x0, Size: 1]
	bool Negative_X; 	//[Offset: 0x0, Size: 1]
	bool Negative_Y; 	//[Offset: 0x0, Size: 1]
	bool Negative_Z; 	//[Offset: 0x0, Size: 1]
	bool SurfaceOnly; 	//[Offset: 0x0, Size: 1]
	bool Velocity; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377e00
	bool RadialVelocity; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	enum CylinderHeightAxis HeightAxis { //[Offset: 0x0, Size: 1]
		PMLPC_HEIGHTAXIS_X = 0
		PMLPC_HEIGHTAXIS_Y = 61006300000000
		PMLPC_HEIGHTAXIS_Z = 53007200000000
		PMLPC_HEIGHTAXIS_MAX = 68007400000000
	};
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377b80
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377900
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377680
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377400
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690377180
	enum ELocationSkelVertSurfaceSource SourceType { //[Offset: 0x0, Size: 1]
		VERTSURFACESOURCE_Vert = 0
		VERTSURFACESOURCE_Surface = 6e006900000000
		VERTSURFACESOURCE_MAX = 69007800000000
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUpdatePositionEachFrame; 	//[Offset: 0x0, Size: 1]
	bool bOrientMeshEmitters; 	//[Offset: 0x0, Size: 1]
	bool bInheritBoneVelocity; 	//[Offset: 0x0, Size: 1]
	float InheritVelocityScale; 	//[Offset: 0x0, Size: 4]
	FName SkelMeshActorParamName; 	//[Offset: 0x0, Size: 12]
	FName[] ValidAssociatedBones; //[Offset: 0x0, Size: 16]
	bool bEnforceNormalCheck; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float NormalCheckToleranceDegrees; 	//[Offset: 0x0, Size: 4]
	float NormalCheckTolerance; 	//[Offset: 0x0, Size: 4]
	int[] ValidMaterialIndices; //[Offset: 0x0, Size: 16]
	bool bInheritVertexColor; 	//[Offset: 0x0, Size: 1]
	bool bInheritUV; 	//[Offset: 0x0, Size: 1]
	uint32 InheritUVChannel; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690376f00
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x7690376c80
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleMaterialBase.ParticleModule.Object, Addr: 0x7690376a00
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object, Addr: 0x7690376780
	MaterialInterface*[] MeshMaterials; //[Offset: 0x0, Size: 16]
Class: ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x7690376280
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x7690376500
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bInheritParent; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x7690376000
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x7690375b00
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x7690375d80
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x7690375880
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x7690375600
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x7690375380
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bScaleRotRate; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleOrbitBase.ParticleModule.Object, Addr: 0x769037f380
	bool bUseEmitterTime; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object, Addr: 0x769037f600
	enum EOrbitChainMode ChainMode { //[Offset: 0x0, Size: 1]
		EOChainMode_Add = 0
		EOChainMode_Scale = 61006300000000
		EOChainMode_Link = 74007200000000
		EOChainMode_MAX = 63007200000000
	};
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	OrbitOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	OrbitOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	OrbitOptions StructProperty; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleOrientationBase.ParticleModule.Object, Addr: 0x769037ee80
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object, Addr: 0x769037f100
	enum EParticleAxisLock LockAxisFlags { //[Offset: 0x0, Size: 1]
		EPAL_NONE = 0
		EPAL_X = 3000600000000
		EPAL_Y = 3000e00000000
		EPAL_Z = 3001800000000
		EPAL_NEGATIVE_X = 3002100000000
		EPAL_NEGATIVE_Y = 3002d00000000
		EPAL_NEGATIVE_Z = 3003800000000
		EPAL_ROTATE_X = 3004200000000
		EPAL_ROTATE_Y = 3004e00000000
		EPAL_ROTATE_Z = 3005700000000
		EPAL_MAX = 3005e00000000
	};
Class: ParticleModuleParameterBase.ParticleModule.Object, Addr: 0x769037ec00
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object, Addr: 0x769037e980
	structEmitterDynamicParameter[] DynamicParams; //[Offset: 0x0, Size: 16]
	int UpdateFlags; 	//[Offset: 0x0, Size: 4]
	bool bUsesVelocity; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object, Addr: 0x769037e700
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x769037e480
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: ParticleModuleRequired.ParticleModule.Object, Addr: 0x769037e200
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	float MinFacingCameraBlendDistance; 	//[Offset: 0x0, Size: 4]
	float MaxFacingCameraBlendDistance; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	enum EParticleScreenAlignment ScreenAlignment { //[Offset: 0x0, Size: 1]
		PSA_FacingCameraPosition = 0
		PSA_Square = 67006900000000
		PSA_Rectangle = 61006500000000
		PSA_Velocity = 74007200000000
		PSA_AwayFromCenter = 6e004900000000
		PSA_TypeSpecific = 65006300000000
		PSA_FacingCameraDistanceBlend = 58004100000000
		PSA_MAX = 58004100000000
	};
	bool bUseLocalSpace; 	//[Offset: 0x0, Size: 1]
	bool bKillOnDeactivate; 	//[Offset: 0x0, Size: 1]
	bool bKillOnCompleted; 	//[Offset: 0x0, Size: 1]
	enum EParticleSortMode SortMode { //[Offset: 0x0, Size: 1]
		PSORTMODE_None = 0
		PSORTMODE_ViewProjDepth = 72006500000000
		PSORTMODE_DistanceToView = 3a003a00000000
		PSORTMODE_Age_OldestFirst = 65005300000000
		PSORTMODE_Age_NewestFirst = 74006c00000000
		PSORTMODE_MAX = 4d000000000000
	};
	bool bUseLegacyEmitterTime; 	//[Offset: 0x0, Size: 1]
	bool bRemoveHMDRoll; 	//[Offset: 0x0, Size: 1]
	bool bEmitterDurationUseRange; 	//[Offset: 0x0, Size: 1]
	float EmitterDuration; 	//[Offset: 0x0, Size: 4]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	structParticleBurst[] BurstList; //[Offset: 0x0, Size: 16]
	float EmitterDelay; 	//[Offset: 0x0, Size: 4]
	float EmitterDelayLow; 	//[Offset: 0x0, Size: 4]
	bool bDelayFirstLoopOnly; 	//[Offset: 0x0, Size: 1]
	enum EParticleSubUVInterpMethod InterpolationMethod { //[Offset: 0x0, Size: 1]
		PSUVIM_None = 0
		PSUVIM_Linear = 72006500000000
		PSUVIM_Linear_Blend = 3a003a00000000
		PSUVIM_Random = 65005300000000
		PSUVIM_Random_Blend = 74006c00000000
		PSUVIM_MAX = 4d000000000000
	};
	bool bScaleUV; 	//[Offset: 0x0, Size: 1]
	bool bEmitterDelayUseRange; 	//[Offset: 0x0, Size: 1]
	enum EParticleBurstMethod ParticleBurstMethod { //[Offset: 0x0, Size: 1]
		EPBM_Instant = 0
		EPBM_Interpolated = 74007200000000
		EPBM_MAX = 74006500000000
	};
	bool bOverrideSystemMacroUV; 	//[Offset: 0x0, Size: 1]
	bool bUseMaxDrawCount; 	//[Offset: 0x0, Size: 1]
	enum EOpacitySourceMode OpacitySourceMode { //[Offset: 0x0, Size: 1]
		OSM_Alpha = 0
		OSM_ColorBrightness = 68006500000000
		OSM_RedChannel = 6e007500000000
		OSM_GreenChannel = 67006e00000000
		OSM_BlueChannel = 58004100000000
		OSM_MAX = 0
	};
	enum EEmitterNormalsMode EmitterNormalsMode { //[Offset: 0x0, Size: 1]
		ENM_CameraFacing = 0
		ENM_Spherical = 74006900000000
		ENM_Cylindrical = 61005000000000
		ENM_MAX = 65007500000000
	};
	bool bOrbitModuleAffectsVelocityAlignment; 	//[Offset: 0x0, Size: 1]
	int SubImages_Horizontal; 	//[Offset: 0x0, Size: 4]
	int SubImages_Vertical; 	//[Offset: 0x0, Size: 4]
	float RandomImageTime; 	//[Offset: 0x0, Size: 4]
	int RandomImageChanges; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float MacroUVRadius; 	//[Offset: 0x0, Size: 4]
	enum EParticleUVFlipMode UVFlippingMode { //[Offset: 0x0, Size: 1]
		None = 0
		FlipUV = 67006900000000
		FlipUOnly = 61006500000000
		FlipVOnly = 74007200000000
		RandomFlipUV = 6e004900000000
		RandomFlipUOnly = 65006300000000
		RandomFlipVOnly = 58004100000000
		RandomFlipUVIndependent = 58004100000000
		EParticleUVFlipMode_MAX = 0
	};
	enum ESubUVBoundingVertexCount BoundingMode { //[Offset: 0x0, Size: 1]
		BVC_FourVertices = 0
		BVC_EightVertices = 7500000000
		BVC_MAX = 0
	};
	bool bDurationRecalcEachLoop; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float AlphaThreshold; 	//[Offset: 0x0, Size: 4]
	int EmitterLoops; 	//[Offset: 0x0, Size: 4]
	Texture2D* CutoutTexture; 	//[Offset: 0x0, Size: 8]
	int MaxDrawCount; 	//[Offset: 0x0, Size: 4]
	float EmitterDurationLow; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	FName[] NamedMaterialOverrides; //[Offset: 0x0, Size: 16]
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x769037df80
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x769037dd00
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object, Addr: 0x769037da80
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool Scale; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x769037d800
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x769037d580
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object, Addr: 0x769037d300
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037ce00
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037d080
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037cb80
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037c900
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool MultiplyX; 	//[Offset: 0x0, Size: 1]
	bool MultiplyY; 	//[Offset: 0x0, Size: 1]
	bool MultiplyZ; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037c680
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool EnableX; 	//[Offset: 0x0, Size: 1]
	bool EnableY; 	//[Offset: 0x0, Size: 1]
	bool EnableZ; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object, Addr: 0x769037c400
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object, Addr: 0x769037c180
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleSpawnBase.ParticleModule.Object, Addr: 0x769037bc80
	bool bProcessSpawnRate; 	//[Offset: 0x0, Size: 1]
	bool bProcessBurstList; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object, Addr: 0x769037bf00
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EParticleBurstMethod ParticleBurstMethod { //[Offset: 0x0, Size: 1]
		EPBM_Instant = 0
		EPBM_Interpolated = 74007200000000
		EPBM_MAX = 74006500000000
	};
	structParticleBurst[] BurstList; //[Offset: 0x0, Size: 16]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bApplyGlobalSpawnRateScale; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object, Addr: 0x769037ba00
	float UnitScalar; 	//[Offset: 0x0, Size: 4]
	float MovementTolerance; 	//[Offset: 0x0, Size: 4]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	float MaxFrameDistance; 	//[Offset: 0x0, Size: 4]
	bool bIgnoreSpawnRateWhenMoving; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreMovementAlongX; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreMovementAlongY; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreMovementAlongZ; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSubUVBase.ParticleModule.Object, Addr: 0x769037b500
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object, Addr: 0x769037b780
	SubUVAnimation* Animation; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bUseRealTime; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object, Addr: 0x769037b280
	bool bUseEmitterTime; 	//[Offset: 0x0, Size: 1]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	int StartingFrame; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleTrailBase.ParticleModule.Object, Addr: 0x769037b000
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object, Addr: 0x769037ad80
	enum ETrail2SourceMethod SourceMethod { //[Offset: 0x0, Size: 1]
		PET2SRCM_Default = 0
		PET2SRCM_Particle = 3a006500000000
		PET2SRCM_Actor = 56005500000000
		PET2SRCM_MAX = 58004100000000
	};
	FName SourceName; 	//[Offset: 0x0, Size: 12]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bLockSourceStength; 	//[Offset: 0x0, Size: 1]
	int SourceOffsetCount; 	//[Offset: 0x0, Size: 4]
	structVector[] SourceOffsetDefaults; //[Offset: 0x0, Size: 16]
	enum EParticleSourceSelectionMethod SelectionMethod { //[Offset: 0x0, Size: 1]
		EPSSM_Random = 0
		EPSSM_Sequential = 74007200000000
		EPSSM_MAX = 6f004d00000000
	};
	bool bInheritRotation; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037a880
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037ab00
	bool bDeadTrailsOnDeactivate; 	//[Offset: 0x0, Size: 1]
	bool bEnablePreviousTangentRecalculation; 	//[Offset: 0x0, Size: 1]
	bool bTangentRecalculationEveryFrame; 	//[Offset: 0x0, Size: 1]
	float TilingDistance; 	//[Offset: 0x0, Size: 4]
	float DistanceTessellationStepSize; 	//[Offset: 0x0, Size: 4]
	float TangentTessellationStepSize; 	//[Offset: 0x0, Size: 4]
	float WidthTessellationStepSize; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037a600
	enum EBeam2Method BeamMethod { //[Offset: 0x0, Size: 1]
		PEB2M_Distance = 0
		PEB2M_Target = 3a006500000000
		PEB2M_Branch = 56005500000000
		PEB2M_MAX = 58004100000000
	};
	int TextureTile; 	//[Offset: 0x0, Size: 4]
	float TextureTileDistance; 	//[Offset: 0x0, Size: 4]
	int Sheets; 	//[Offset: 0x0, Size: 4]
	int MaxBeamCount; 	//[Offset: 0x0, Size: 4]
	float Speed; 	//[Offset: 0x0, Size: 4]
	int InterpolationPoints; 	//[Offset: 0x0, Size: 4]
	bool bAlwaysOn; 	//[Offset: 0x0, Size: 1]
	int UpVectorStepSize; 	//[Offset: 0x0, Size: 4]
	FName BranchParentName; 	//[Offset: 0x0, Size: 12]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EBeamTaperMethod TaperMethod { //[Offset: 0x0, Size: 1]
		PEBTM_None = 0
		PEBTM_Full = 3a006500000000
		PEBTM_Partial = 56005500000000
		PEBTM_MAX = 58004100000000
	};
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	bool RenderGeometry; 	//[Offset: 0x0, Size: 1]
	bool RenderDirectLine; 	//[Offset: 0x0, Size: 1]
	bool RenderLines; 	//[Offset: 0x0, Size: 1]
	bool RenderTessellation; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037fd80
	GPUSpriteEmitterInfo StructProperty; 	//[Offset: 0x0, Size: 624]
	GPUSpriteResourceData StructProperty; 	//[Offset: 0x0, Size: 352]
	float CameraMotionBlurAmount; 	//[Offset: 0x0, Size: 4]
	bool bClearExistingParticlesOnInit; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037fb00
	StaticMesh* Mesh; 	//[Offset: 0x0, Size: 8]
	float LODSizeScale; 	//[Offset: 0x0, Size: 4]
	bool bUseStaticMeshLODs; 	//[Offset: 0x0, Size: 1]
	bool CastShadows; 	//[Offset: 0x0, Size: 1]
	bool DoCollisions; 	//[Offset: 0x0, Size: 1]
	enum EMeshScreenAlignment MeshAlignment { //[Offset: 0x0, Size: 1]
		PSMA_MeshFaceCameraWithRoll = 0
		PSMA_MeshFaceCameraWithSpin = 3a006500000000
		PSMA_MeshFaceCameraWithLockedAxis = 56005500000000
		PSMA_MAX = 58004100000000
	};
	bool bOverrideMaterial; 	//[Offset: 0x0, Size: 1]
	bool bOverrideDefaultMotionBlurSettings; 	//[Offset: 0x0, Size: 1]
	bool bEnableMotionBlur; 	//[Offset: 0x0, Size: 1]
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	enum EParticleAxisLock AxisLockOption { //[Offset: 0x0, Size: 1]
		EPAL_NONE = 0
		EPAL_X = 3000600000000
		EPAL_Y = 3000e00000000
		EPAL_Z = 3001800000000
		EPAL_NEGATIVE_X = 3002100000000
		EPAL_NEGATIVE_Y = 3002d00000000
		EPAL_NEGATIVE_Z = 3003800000000
		EPAL_ROTATE_X = 3004200000000
		EPAL_ROTATE_Y = 3004e00000000
		EPAL_ROTATE_Z = 3005700000000
		EPAL_MAX = 3005e00000000
	};
	bool bCameraFacing; 	//[Offset: 0x0, Size: 1]
	enum EMeshCameraFacingUpAxis CameraFacingUpAxisOption { //[Offset: 0x0, Size: 1]
		CameraFacing_NoneUP = 0
		CameraFacing_ZUp = 72006500000000
		CameraFacing_NegativeZUp = 3a003a00000000
		CameraFacing_YUp = 65005300000000
		CameraFacing_NegativeYUp = 74006c00000000
		CameraFacing_MAX = 4d000000000000
	};
	enum EMeshCameraFacingOptions CameraFacingOption { //[Offset: 0x0, Size: 1]
		XAxisFacing_NoUp = 0
		XAxisFacing_ZUp = 0
		XAxisFacing_NegativeZUp = 0
		XAxisFacing_YUp = 0
		XAxisFacing_NegativeYUp = 0
		LockedAxis_ZAxisFacing = 0
		LockedAxis_NegativeZAxisFacing = 0
		LockedAxis_YAxisFacing = 700000000
		LockedAxis_NegativeYAxisFacing = 100000000
		VelocityAligned_ZAxisFacing = 0
		VelocityAligned_NegativeZAxisFacing = 0
		VelocityAligned_YAxisFacing = 0
		VelocityAligned_NegativeYAxisFacing = 0
		EMeshCameraFacingOptions_MAX = 0
	};
	bool bApplyParticleRotationAsSpin; 	//[Offset: 0x0, Size: 1]
	bool bFaceCameraDirectionRatherThanPosition; 	//[Offset: 0x0, Size: 1]
	bool bCollisionsConsiderPartilceSize; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object, Addr: 0x769037f880
	int MaxTessellationBetweenParticles; 	//[Offset: 0x0, Size: 4]
	int SheetsPerTrail; 	//[Offset: 0x0, Size: 4]
	int MaxTrailCount; 	//[Offset: 0x0, Size: 4]
	int MaxParticleInTrailCount; 	//[Offset: 0x0, Size: 4]
	bool bDeadTrailsOnDeactivate; 	//[Offset: 0x0, Size: 1]
	bool bDeadTrailsOnSourceLoss; 	//[Offset: 0x0, Size: 1]
	bool bClipSourceSegement; 	//[Offset: 0x0, Size: 1]
	bool bEnablePreviousTangentRecalculation; 	//[Offset: 0x0, Size: 1]
	bool bTangentRecalculationEveryFrame; 	//[Offset: 0x0, Size: 1]
	bool bSpawnInitialParticle; 	//[Offset: 0x0, Size: 1]
	enum ETrailsRenderAxisOption RenderAxis { //[Offset: 0x0, Size: 1]
		Trails_CameraUp = 0
		Trails_SourceUp = 3a006500000000
		Trails_WorldUp = 56005500000000
		Trails_MAX = 58004100000000
	};
	float TangentSpawningScalar; 	//[Offset: 0x0, Size: 4]
	bool bRenderGeometry; 	//[Offset: 0x0, Size: 1]
	bool bRenderSpawnPoints; 	//[Offset: 0x0, Size: 1]
	bool bRenderTangents; 	//[Offset: 0x0, Size: 1]
	bool bRenderTessellation; 	//[Offset: 0x0, Size: 1]
	float TilingDistance; 	//[Offset: 0x0, Size: 4]
	float DistanceTessellationStepSize; 	//[Offset: 0x0, Size: 4]
	bool bEnableTangentDiffInterpScale; 	//[Offset: 0x0, Size: 1]
	float TangentTessellationScalar; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690385100
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384e80
	bool bOverrideGlobalVectorFieldTightness; 	//[Offset: 0x0, Size: 1]
	float GlobalVectorFieldScale; 	//[Offset: 0x0, Size: 4]
	float GlobalVectorFieldTightness; 	//[Offset: 0x0, Size: 4]
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384c00
	VectorField* VectorField; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	float Tightness; 	//[Offset: 0x0, Size: 4]
	bool bIgnoreComponentTransform; 	//[Offset: 0x0, Size: 1]
	bool bTileX; 	//[Offset: 0x0, Size: 1]
	bool bTileY; 	//[Offset: 0x0, Size: 1]
	bool bTileZ; 	//[Offset: 0x0, Size: 1]
	bool bUseFixDT; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384980
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384700
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384480
	DistributionFloat* VectorFieldScale; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object, Addr: 0x7690384200
	DistributionFloat* VectorFieldScaleOverLife; 	//[Offset: 0x0, Size: 8]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383d00
	bool bInWorldSpace; 	//[Offset: 0x0, Size: 1]
	bool bApplyOwnerScale; 	//[Offset: 0x0, Size: 1]
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383f80
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383a80
	ParticleRandomSeedInfo StructProperty; 	//[Offset: 0x0, Size: 32]
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383800
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	RawDistributionFloat StructProperty; 	//[Offset: 0x0, Size: 48]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383580
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object, Addr: 0x7690383300
	RawDistributionVector StructProperty; 	//[Offset: 0x0, Size: 72]
	bool Absolute; 	//[Offset: 0x0, Size: 1]
Class: ParticleSpriteEmitter.ParticleEmitter.Object, Addr: 0x7690383080
Class: FXSystemAsset.Object, Addr: 0x7690244980
	uint32 MaxPoolSize; 	//[Offset: 0x0, Size: 4]
	uint32 PoolPrimeSize; 	//[Offset: 0x0, Size: 4]
Class: ParticleSystem.FXSystemAsset.Object, Addr: 0x7690382e00
	float UpdateTime_FPS; 	//[Offset: 0x0, Size: 4]
	float UpdateTime_Delta; 	//[Offset: 0x0, Size: 4]
	float WarmupTime; 	//[Offset: 0x0, Size: 4]
	float WarmupTickRate; 	//[Offset: 0x0, Size: 4]
	ParticleEmitter*[] Emitters; //[Offset: 0x0, Size: 16]
	ParticleSystemComponent* PreviewComponent; 	//[Offset: 0x0, Size: 8]
	InterpCurveEdSetup* CurveEdSetup; 	//[Offset: 0x0, Size: 8]
	float LODDistanceCheckTime; 	//[Offset: 0x0, Size: 4]
	float MacroUVRadius; 	//[Offset: 0x0, Size: 4]
	float[] LODDistances; //[Offset: 0x0, Size: 16]
	structParticleSystemLOD[] LODSettings; //[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	float SecondsBeforeInactive; 	//[Offset: 0x0, Size: 4]
	float Delay; 	//[Offset: 0x0, Size: 4]
	float DelayLow; 	//[Offset: 0x0, Size: 4]
	bool bOrientZAxisTowardCamera; 	//[Offset: 0x0, Size: 1]
	bool bUseFixedRelativeBoundingBox; 	//[Offset: 0x0, Size: 1]
	bool bShouldResetPeakCounts; 	//[Offset: 0x0, Size: 1]
	bool bHasPhysics; 	//[Offset: 0x0, Size: 1]
	bool bUseRealtimeThumbnail; 	//[Offset: 0x0, Size: 1]
	bool ThumbnailImageOutOfDate; 	//[Offset: 0x0, Size: 1]
	bool bUseDelayRange; 	//[Offset: 0x0, Size: 1]
	bool bAllowManagedTicking; 	//[Offset: 0x0, Size: 1]
	bool bAutoDeactivate; 	//[Offset: 0x0, Size: 1]
	bool bRegenerateLODDuplicate; 	//[Offset: 0x0, Size: 1]
	enum EParticleSystemUpdateMode SystemUpdateMode { //[Offset: 0x0, Size: 1]
		EPSUM_RealTime = 0
		EPSUM_FixedTime = f00000000
		EPSUM_MAX = 0
	};
	enum ParticleSystemLODMethod LODMethod { //[Offset: 0x0, Size: 1]
		PARTICLESYSTEMLODMETHOD_Automatic = 0
		PARTICLESYSTEMLODMETHOD_DirectSet = 69007400000000
		PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 44004f00000000
		PARTICLESYSTEMLODMETHOD_MAX = 0
	};
	enum EParticleSystemInsignificanceReaction InsignificantReaction { //[Offset: 0x0, Size: 1]
		Auto = 0
		Complete = 72006500000000
		DisableTick = 3a003a00000000
		DisableTickAndKill = 61007400000000
		Num = 6f006900000000
		EParticleSystemInsignificanceReaction_MAX = 0
	};
	enum EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod { //[Offset: 0x0, Size: 1]
		EPSOBM_None = 0
		EPSOBM_ParticleBounds = 74007200000000
		EPSOBM_CustomBounds = 6c004100000000
		EPSOBM_MAX = 0
	};
	enum EParticleSignificanceLevel MaxSignificanceLevel { //[Offset: 0x0, Size: 1]
		Low = 0
		Medium = 72006500000000
		High = 3a003a00000000
		Critical = 61007400000000
		Num = 6f006900000000
		EParticleSignificanceLevel_MAX = 0
	};
	uint32 MinTimeBetweenTicks; 	//[Offset: 0x0, Size: 4]
	float InsignificanceDelay; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	structLODSoloTrack[] SoloTracking; //[Offset: 0x0, Size: 16]
	structNamedEmitterMaterial[] NamedMaterialSlots; //[Offset: 0x0, Size: 16]
	bool ContainsEmitterType(classObject TypeData); //Addr 0x75ee16d250 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac350100
Class: ParticleSystemReplay.Object, Addr: 0x7690382b80
	int ClipIDNumber; 	//[Offset: 0x0, Size: 4]
Class: PathFollowingAgentInterface.Interface.Object, Addr: 0x7690382900
Class: PawnNoiseEmitterComponent.ActorComponent.Object, Addr: 0x7690382680
	bool bAIPerceptionSystemCompatibilityMode; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float NoiseLifetime; 	//[Offset: 0x0, Size: 4]
	float LastRemoteNoiseVolume; 	//[Offset: 0x0, Size: 4]
	float LastRemoteNoiseTime; 	//[Offset: 0x0, Size: 4]
	float LastLocalNoiseVolume; 	//[Offset: 0x0, Size: 4]
	float LastLocalNoiseTime; 	//[Offset: 0x0, Size: 4]
	Void MakeNoise(Actor* NoiseMaker, float Loudness, constoutrefstructVector NoiseLocation); //Addr 0x75ee175d20 [BlueprintAuthorityOly|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac354200
Class: PhysicalAnimationComponent.ActorComponent.Object, Addr: 0x7690382400
	float StrengthMultiplyer; 	//[Offset: 0x0, Size: 4]
	SkeletalMeshComponent* SkeletalMeshComponent; 	//[Offset: 0x0, Size: 8]
	Void SetStrengthMultiplyer(float InStrengthMultiplyer); //Addr 0x75ee1769e4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac353c00
Class: PhysicalMaterialMask.Object, Addr: 0x7690382180
	int UVChannelIndex; 	//[Offset: 0x0, Size: 4]
	enum TextureAddress AddressX { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressY { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
Class: PhysicsAsset.Object, Addr: 0x7690381f00
	int[] BoundsBodies; //[Offset: 0x0, Size: 16]
	SkeletalBodySetup*[] SkeletalBodySetups; //[Offset: 0x0, Size: 16]
	PhysicsConstraintTemplate*[] ConstraintSetup; //[Offset: 0x0, Size: 16]
	SolverIterations StructProperty; 	//[Offset: 0x0, Size: 28]
	bool bNotForDedicatedServer; 	//[Offset: 0x0, Size: 1]
	ThumbnailInfo* ThumbnailInfo; 	//[Offset: 0x0, Size: 8]
	BodySetup*[] BodySetup; //[Offset: 0x0, Size: 16]
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object, Addr: 0x7690381c80
	bool bSkipScaleFromAnimation; 	//[Offset: 0x0, Size: 1]
	structPhysicalAnimationProfile[] PhysicalAnimationData; //[Offset: 0x0, Size: 16]
Class: PhysicsCollisionHandler.Object, Addr: 0x7690381a00
	float ImpactThreshold; 	//[Offset: 0x0, Size: 4]
	float ImpactReFireDelay; 	//[Offset: 0x0, Size: 4]
	SoundBase* DefaultImpactSound; 	//[Offset: 0x0, Size: 8]
	float LastImpactSoundTime; 	//[Offset: 0x0, Size: 4]
Class: RigidBodyBase.Actor.Object, Addr: 0x7690381500
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object, Addr: 0x7690381780
	PhysicsConstraintComponent* ConstraintComp; 	//[Offset: 0x0, Size: 8]
	Actor* ConstraintActor1; 	//[Offset: 0x0, Size: 8]
	Actor* ConstraintActor2; 	//[Offset: 0x0, Size: 8]
	bool bDisableCollision; 	//[Offset: 0x0, Size: 1]
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690381280
	Actor* ConstraintActor1; 	//[Offset: 0x0, Size: 8]
	ConstrainComponentPropName StructProperty; 	//[Offset: 0x0, Size: 12]
	Actor* ConstraintActor2; 	//[Offset: 0x0, Size: 8]
	ConstrainComponentPropName StructProperty; 	//[Offset: 0x0, Size: 12]
	PhysicsConstraintTemplate* ConstraintSetup; 	//[Offset: 0x0, Size: 8]
	delegate OnConstraintBroken; 	//[Offset: 0x0, Size: 16]
	ConstraintInstance StructProperty; 	//[Offset: 0x0, Size: 464]
	Void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); //Addr 0x75ee1797ac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac355c00
Class: PhysicsConstraintTemplate.Object, Addr: 0x7690381000
	ConstraintInstance StructProperty; 	//[Offset: 0x0, Size: 464]
	structPhysicsConstraintProfileHandle[] ProfileHandles; //[Offset: 0x0, Size: 16]
	ConstraintProfileProperties StructProperty; 	//[Offset: 0x0, Size: 268]
Class: PhysicsHandleComponent.ActorComponent.Object, Addr: 0x7690380d80
	PrimitiveComponent* GrabbedComponent; 	//[Offset: 0x0, Size: 8]
	bool bSoftAngularConstraint; 	//[Offset: 0x0, Size: 1]
	bool bSoftLinearConstraint; 	//[Offset: 0x0, Size: 1]
	bool bInterpolateTarget; 	//[Offset: 0x0, Size: 1]
	float LinearDamping; 	//[Offset: 0x0, Size: 4]
	float LinearStiffness; 	//[Offset: 0x0, Size: 4]
	float AngularDamping; 	//[Offset: 0x0, Size: 4]
	float AngularStiffness; 	//[Offset: 0x0, Size: 4]
	float InterpolationSpeed; 	//[Offset: 0x0, Size: 4]
	Void SetTargetRotation(structRotator NewRotation); //Addr 0x75ee17e6c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac354e00
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690380880
	float SpringStiffness; 	//[Offset: 0x0, Size: 4]
	float SpringDamping; 	//[Offset: 0x0, Size: 4]
	float SpringLengthAtRest; 	//[Offset: 0x0, Size: 4]
	float SpringRadius; 	//[Offset: 0x0, Size: 4]
	enum ECollisionChannel SpringChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	bool bIgnoreSelf; 	//[Offset: 0x0, Size: 1]
	float SpringCompression; 	//[Offset: 0x0, Size: 4]
	structVector GetSpringRestingPoint(); //Addr 0x75ee17f964 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac354a00
Class: PhysicsThruster.RigidBodyBase.Actor.Object, Addr: 0x7690380600
	PhysicsThrusterComponent* ThrusterComponent; 	//[Offset: 0x0, Size: 8]
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690380380
	float ThrustStrength; 	//[Offset: 0x0, Size: 4]
Class: SceneCapture.Actor.Object, Addr: 0x769038a380
	StaticMeshComponent* MeshComp; 	//[Offset: 0x0, Size: 8]
	SceneComponent* SceneComponent; 	//[Offset: 0x0, Size: 8]
Class: PlanarReflection.SceneCapture.Actor.Object, Addr: 0x7690380100
	PlanarReflectionComponent* PlanarReflectionComponent; 	//[Offset: 0x0, Size: 8]
	bool bShowPreviewPlane; 	//[Offset: 0x0, Size: 1]
	Void OnInterpToggle(bool bEnable); //Addr 0x75ee180374 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac354900
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901f1780
	enum ESceneCapturePrimitiveRenderMode PrimitiveRenderMode { //[Offset: 0x0, Size: 1]
		PRM_LegacySceneCapture = 0
		PRM_RenderScenePrimitives = 74007000000000
		PRM_UseShowOnlyList = 68007400000000
		PRM_MAX = 0
	};
	enum ESceneCaptureSource CaptureSource { //[Offset: 0x0, Size: 1]
		SCS_SceneColorHDR = 0
		SCS_SceneColorHDRNoAlpha = 0
		SCS_FinalColorLDR = 0
		SCS_SceneColorSceneDepth = 0
		SCS_SceneDepth = 0
		SCS_DeviceDepth = 0
		SCS_Normal = 0
		SCS_BaseColor = 0
		SCS_FinalColorHDR = 0
		SCS_FinalToneCurveHDR = 0
		SCS_MAX = 0
	};
	int TextureTargetMipLevel; 	//[Offset: 0x0, Size: 4]
	bool bCaptureEveryFrame; 	//[Offset: 0x0, Size: 1]
	bool bCaptureOnMovement; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysPersistRenderingState; 	//[Offset: 0x0, Size: 1]
	PrimitiveComponent*[] HiddenComponents; //[Offset: 0x0, Size: 16]
	Actor*[] HiddenActors; //[Offset: 0x0, Size: 16]
	byte HiddenChannel; //[Offset: 0x0, Size: 1]
	PrimitiveComponent*[] ShowOnlyComponents; //[Offset: 0x0, Size: 16]
	Actor*[] ShowOnlyActors; //[Offset: 0x0, Size: 16]
	float LODDistanceFactor; 	//[Offset: 0x0, Size: 4]
	float MaxViewDistanceOverride; 	//[Offset: 0x0, Size: 4]
	int CaptureSortPriority; 	//[Offset: 0x0, Size: 4]
	bool bUseRayTracingIfEnabled; 	//[Offset: 0x0, Size: 1]
	structEngineShowFlagsSetting[] ShowFlagSettings; //[Offset: 0x0, Size: 16]
	delegate OnCaptureStart; 	//[Offset: 0x0, Size: 16]
	delegate OnCaptureEnded; 	//[Offset: 0x0, Size: 16]
	bool bIsManualPlanarReflectionCapture; 	//[Offset: 0x0, Size: 1]
	bool bShareMainRendererShadowmap; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreTranslucency; 	//[Offset: 0x0, Size: 1]
	bool bIsRealtimeCubeCapture; 	//[Offset: 0x0, Size: 1]
	StrProperty ProfilingEventName; 	//[Offset: 0x0, Size: 16]
	Void UpdateShowFlags(); //Addr 0x75ee1c041c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6a8000
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x769038a100
	BoxComponent* PreviewBox; 	//[Offset: 0x0, Size: 8]
	float NormalDistortionStrength; 	//[Offset: 0x0, Size: 4]
	float PrefilterRoughness; 	//[Offset: 0x0, Size: 4]
	float PrefilterRoughnessDistance; 	//[Offset: 0x0, Size: 4]
	int ScreenPercentage; 	//[Offset: 0x0, Size: 4]
	float ExtraFOV; 	//[Offset: 0x0, Size: 4]
	float DistanceFromPlaneFadeStart; 	//[Offset: 0x0, Size: 4]
	float DistanceFromPlaneFadeEnd; 	//[Offset: 0x0, Size: 4]
	float DistanceFromPlaneFadeoutStart; 	//[Offset: 0x0, Size: 4]
	float DistanceFromPlaneFadeoutEnd; 	//[Offset: 0x0, Size: 4]
	float AngleFromPlaneFadeStart; 	//[Offset: 0x0, Size: 4]
	float AngleFromPlaneFadeEnd; 	//[Offset: 0x0, Size: 4]
	bool bShowPreviewPlane; 	//[Offset: 0x0, Size: 1]
	bool bRenderSceneTwoSided; 	//[Offset: 0x0, Size: 1]
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object, Addr: 0x7690389e80
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690389c00
	float InfluenceRadiusScale; 	//[Offset: 0x0, Size: 4]
	DrawSphereComponent* PreviewInfluenceRadius; 	//[Offset: 0x0, Size: 8]
	BoxComponent* PreviewCaptureBox; 	//[Offset: 0x0, Size: 8]
Class: PlatformEventsComponent.ActorComponent.Object, Addr: 0x7690389980
	delegate PlatformChangedToLaptopModeDelegate; 	//[Offset: 0x0, Size: 16]
	delegate PlatformChangedToTabletModeDelegate; 	//[Offset: 0x0, Size: 16]
	bool SupportsConvertibleLaptops(); //Addr 0x75ee180e54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x759aeecb00
Class: PlatformInterfaceWebResponse.Object, Addr: 0x7690389700
	StrProperty OriginalURL; 	//[Offset: 0x0, Size: 16]
	int ResponseCode; 	//[Offset: 0x0, Size: 4]
	int Tag; 	//[Offset: 0x0, Size: 4]
	StrProperty StringResponse; 	//[Offset: 0x0, Size: 16]
	BinaryResponse(ByteProperty)[] BinaryResponse; //[Offset: 0x0, Size: 16]
	int GetNumHeaders(); //Addr 0x75ee181960 [Native] // UFieldProperty addr: 0x75ac354600
Class: PlayerCameraManager.Actor.Object, Addr: 0x7690389480
	PlayerController* PCOwner; 	//[Offset: 0x0, Size: 8]
	SceneComponent* TransformComponent; 	//[Offset: 0x0, Size: 8]
	float DefaultFOV; 	//[Offset: 0x0, Size: 4]
	float DefaultOrthoWidth; 	//[Offset: 0x0, Size: 4]
	float DefaultAspectRatio; 	//[Offset: 0x0, Size: 4]
	CameraCacheEntry StructProperty; 	//[Offset: 0x0, Size: 1776]
	CameraCacheEntry StructProperty; 	//[Offset: 0x0, Size: 1776]
	TViewTarget StructProperty; 	//[Offset: 0x0, Size: 1792]
	TViewTarget StructProperty; 	//[Offset: 0x0, Size: 1792]
	CameraCacheEntry StructProperty; 	//[Offset: 0x0, Size: 1776]
	CameraCacheEntry StructProperty; 	//[Offset: 0x0, Size: 1776]
	CameraModifier*[] ModifierList; //[Offset: 0x0, Size: 16]
	classCameraModifier[] DefaultModifiers; //[Offset: 0x0, Size: 16]
	float FreeCamDistance; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	delegate OnAudioFadeChangeEvent; 	//[Offset: 0x0, Size: 16]
	EmitterCameraLensEffectBase*[] CameraLensEffects; //[Offset: 0x0, Size: 16]
	CameraModifier_CameraShake* CachedCameraShakeMod; 	//[Offset: 0x0, Size: 8]
	CameraAnimInst* AnimInstPool; 	//[Offset: 0x0, Size: 8]
	structPostProcessSettings[] PostProcessBlendCache; //[Offset: 0x0, Size: 16]
	CameraAnimInst*[] ActiveAnims; //[Offset: 0x0, Size: 16]
	CameraAnimInst*[] FreeAnims; //[Offset: 0x0, Size: 16]
	CameraActor* AnimCameraActor; 	//[Offset: 0x0, Size: 8]
	bool bIsOrthographic; 	//[Offset: 0x0, Size: 1]
	bool bDefaultConstrainAspectRatio; 	//[Offset: 0x0, Size: 1]
	bool bClientSimulatingViewTarget; 	//[Offset: 0x0, Size: 1]
	bool bUseClientSideCameraUpdates; 	//[Offset: 0x0, Size: 1]
	bool bGameCameraCutThisFrame; 	//[Offset: 0x0, Size: 1]
	float ViewPitchMin; 	//[Offset: 0x0, Size: 4]
	float ViewPitchMax; 	//[Offset: 0x0, Size: 4]
	float ViewYawMin; 	//[Offset: 0x0, Size: 4]
	float ViewYawMax; 	//[Offset: 0x0, Size: 4]
	float ViewRollMin; 	//[Offset: 0x0, Size: 4]
	float ViewRollMax; 	//[Offset: 0x0, Size: 4]
	float ServerUpdateCameraTimeout; 	//[Offset: 0x0, Size: 4]
	bool bEnableSTMB; 	//[Offset: 0x0, Size: 1]
	float DeltaForSTMB; 	//[Offset: 0x0, Size: 4]
	Void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); //Addr 0x75ee1847dc [Final|Native] // UFieldProperty addr: 0x75ac356600
Class: PlayerInput.Object, Addr: 0x7690389200
	structKeyBind[] DebugExecBindings; //[Offset: 0x0, Size: 16]
	FName[] InvertedAxis; //[Offset: 0x0, Size: 16]
	Void SetMouseSensitivity(constfloat Sensitivity); //Addr 0x75ee1971b0 [Final|Native] // UFieldProperty addr: 0x75ac35a300
Class: PlayerStart.NavigationObjectBase.Actor.Object, Addr: 0x7690388f80
	FName PlayerStartTag; 	//[Offset: 0x0, Size: 12]
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object, Addr: 0x7690388d00
Class: PlayerState.Info.Actor.Object, Addr: 0x7690388a80
	float Score; 	//[Offset: 0x43476, Size: 4]
	int PlayerId; 	//[Offset: 0x4346b, Size: 4]
	byte Ping; //[Offset: 0x0, Size: 1]
	bool bShouldUpdateReplicatedPing; 	//[Offset: 0x0, Size: 1]
	bool bIsSpectator; 	//[Offset: 0x0, Size: 1]
	bool bOnlySpectator; 	//[Offset: 0x0, Size: 1]
	bool bIsABot; 	//[Offset: 0x0, Size: 1]
	bool bIsInactive; 	//[Offset: 0x43465, Size: 1]
	bool bFromPreviousLevel; 	//[Offset: 0x0, Size: 1]
	int StartTime; 	//[Offset: 0x0, Size: 4]
	LocalMessage* EngineMessageClass; 	//[Offset: 0x0, Size: 8]
	StrProperty SavedNetworkAddress; 	//[Offset: 0x0, Size: 16]
	UniqueNetIdRepl StructProperty; 	//[Offset: 0x4347b, Size: 40]
	Pawn* PawnPrivate; 	//[Offset: 0x0, Size: 8]
	StrProperty PlayerNamePrivate; 	//[Offset: 0x43470, Size: 16]
	Void ReceiveOverrideWith(PlayerState* OldPlayerState); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac359b00
Class: PluginCommandlet.Commandlet.Object, Addr: 0x7690388800
Class: PointLight.Light.Actor.Object, Addr: 0x7690388580
	PointLightComponent* PointLightComponent; 	//[Offset: 0x0, Size: 8]
	Void SetRadius(float newRadius); //Addr 0x75ee198a68 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac359900
Class: Polys.Object, Addr: 0x7690388080
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690387e00
	Void SetBoneTransformByName(FName BoneName, constoutrefstructTransform InTransform, BoneSpace(ByteProperty) BoneSpace); //Addr 0x75ee19a0e0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35db00
Class: PoseAsset.AnimationAsset.Object, Addr: 0x7690387b80
	PoseDataContainer StructProperty; 	//[Offset: 0x0, Size: 144]
	bool bAdditivePose; 	//[Offset: 0x0, Size: 1]
	int BasePoseIndex; 	//[Offset: 0x0, Size: 4]
	FName RetargetSource; 	//[Offset: 0x0, Size: 12]
Class: PoseWatch.Object, Addr: 0x7690387900
	EdGraphNode* Node; 	//[Offset: 0x0, Size: 8]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
Class: PostProcessComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690387680
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	float Priority; 	//[Offset: 0x0, Size: 4]
	float BlendRadius; 	//[Offset: 0x0, Size: 4]
	float BlendWeight; 	//[Offset: 0x0, Size: 4]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	bool bUnbound; 	//[Offset: 0x0, Size: 1]
	Void AddOrUpdateBlendable(interface classBlendableInterface InBlendableObject, float InWeight); //Addr 0x75ee19afb0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35da00
Class: PostProcessVolume.Volume.Brush.Actor.Object, Addr: 0x7690387400
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	float Priority; 	//[Offset: 0x0, Size: 4]
	float BlendRadius; 	//[Offset: 0x0, Size: 4]
	float BlendWeight; 	//[Offset: 0x0, Size: 4]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	bool bUnbound; 	//[Offset: 0x0, Size: 1]
	enum EPostProcessVolumeRenderingLevel RenderingLevel { //[Offset: 0x0, Size: 1]
		Default = 0
		ES3 = 6d006900000000
		SM5 = 79005400000000
		EPostProcessVolumeRenderingLevel_MAX = 0
	};
	Void AddOrUpdateBlendable(interface classBlendableInterface InBlendableObject, float InWeight); //Addr 0x75ee19b440 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35d900
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object, Addr: 0x7690387180
	Actor*[] OverrideVisibleActors; //[Offset: 0x0, Size: 16]
	Actor*[] OverrideInvisibleActors; //[Offset: 0x0, Size: 16]
	FName[] OverrideInvisibleLevels; //[Offset: 0x0, Size: 16]
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object, Addr: 0x7690386f00
Class: PreviewCollectionInterface.Interface.Object, Addr: 0x7690386c80
Class: PreviewMeshCollection.DataAsset.Object, Addr: 0x7690386a00
	Skeleton* Skeleton; 	//[Offset: 0x0, Size: 8]
	structPreviewMeshCollectionEntry[] SkeletalMeshes; //[Offset: 0x0, Size: 16]
	structPreviewStaticMeshCollectionEntry[] StaticMeshes; //[Offset: 0x0, Size: 16]
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object, Addr: 0x7690386780
	PrimaryAssetRules StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bLabelAssetsInMyDirectory; 	//[Offset: 0x0, Size: 1]
	bool bIsRuntimeLabel; 	//[Offset: 0x0, Size: 1]
	Object*[] ExplicitAssets; //[Offset: 0x0, Size: 16]
	classObject[] ExplicitBlueprints; //[Offset: 0x0, Size: 16]
	CollectionReference StructProperty; 	//[Offset: 0x0, Size: 12]
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x7690386500
	float InitialSpeed; 	//[Offset: 0x0, Size: 4]
	float MaxSpeed; 	//[Offset: 0x0, Size: 4]
	bool bRotationFollowsVelocity; 	//[Offset: 0x0, Size: 1]
	bool bRotationRemainsVertical; 	//[Offset: 0x0, Size: 1]
	bool bShouldBounce; 	//[Offset: 0x0, Size: 1]
	bool bInitialVelocityInLocalSpace; 	//[Offset: 0x0, Size: 1]
	bool bForceSubStepping; 	//[Offset: 0x0, Size: 1]
	bool bSimulationEnabled; 	//[Offset: 0x0, Size: 1]
	bool bSweepCollision; 	//[Offset: 0x0, Size: 1]
	bool bIsHomingProjectile; 	//[Offset: 0x0, Size: 1]
	bool bBounceAngleAffectsFriction; 	//[Offset: 0x0, Size: 1]
	bool bIsSliding; 	//[Offset: 0x0, Size: 1]
	bool bInterpMovement; 	//[Offset: 0x0, Size: 1]
	bool bInterpRotation; 	//[Offset: 0x0, Size: 1]
	float PreviousHitTime; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ProjectileGravityScale; 	//[Offset: 0x0, Size: 4]
	float Buoyancy; 	//[Offset: 0x0, Size: 4]
	float Bounciness; 	//[Offset: 0x0, Size: 4]
	float Friction; 	//[Offset: 0x0, Size: 4]
	float BounceVelocityStopSimulatingThreshold; 	//[Offset: 0x0, Size: 4]
	float MinFrictionFraction; 	//[Offset: 0x0, Size: 4]
	delegate OnProjectileBounce; 	//[Offset: 0x0, Size: 16]
	delegate OnProjectileStop; 	//[Offset: 0x0, Size: 16]
	float HomingAccelerationMagnitude; 	//[Offset: 0x0, Size: 4]
	SceneComponent* HomingTargetComponent; 	//[Offset: 0x0, Size: 8]
	float MaxSimulationTimeStep; 	//[Offset: 0x0, Size: 4]
	int MaxSimulationIterations; 	//[Offset: 0x0, Size: 4]
	int BounceAdditionalIterations; 	//[Offset: 0x0, Size: 4]
	float InterpLocationTime; 	//[Offset: 0x0, Size: 4]
	float InterpRotationTime; 	//[Offset: 0x0, Size: 4]
	float InterpLocationMaxLagDistance; 	//[Offset: 0x0, Size: 4]
	float InterpLocationSnapToTargetDistance; 	//[Offset: 0x0, Size: 4]
	Void StopSimulating(constoutrefstructHitResult HitResult); //Addr 0x75ee1ad288 [Native|BlueprintCallabl] // UFieldProperty addr: 0x7616ea2000
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object, Addr: 0x7690386280
	FName ProxyLODMeshReductionModuleName; 	//[Offset: 0x0, Size: 12]
Class: RadialForceActor.RigidBodyBase.Actor.Object, Addr: 0x7690386000
	RadialForceComponent* ForceComponent; 	//[Offset: 0x0, Size: 8]
	Void ToggleForce(); //Addr 0x75ee1ae380 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35d500
Class: RadialForceComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690385d80
	float Radius; 	//[Offset: 0x0, Size: 4]
	enum ERadialImpulseFalloff Falloff { //[Offset: 0x0, Size: 1]
		RIF_Constant = 0
		RIF_Linear = 2f006500000000
		RIF_MAX = 79006c00000000
	};
	float ImpulseStrength; 	//[Offset: 0x0, Size: 4]
	bool bImpulseVelChange; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreOwningActor; 	//[Offset: 0x0, Size: 1]
	float ForceStrength; 	//[Offset: 0x0, Size: 4]
	float DestructibleDamage; 	//[Offset: 0x0, Size: 4]
	ObjectTypesToAffect(ByteProperty)[] ObjectTypesToAffect; //[Offset: 0x0, Size: 16]
	Void RemoveObjectTypeToAffect(ObjectType(ByteProperty) ObjectType); //Addr 0x75ee1ae87c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35d200
Class: RectLight.Light.Actor.Object, Addr: 0x7690385b00
	RectLightComponent* RectLightComponent; 	//[Offset: 0x0, Size: 8]
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x7690385880
	float SourceWidth; 	//[Offset: 0x0, Size: 4]
	float SourceHeight; 	//[Offset: 0x0, Size: 4]
	float BarnDoorAngle; 	//[Offset: 0x0, Size: 4]
	float BarnDoorLength; 	//[Offset: 0x0, Size: 4]
	Texture* SourceTexture; 	//[Offset: 0x0, Size: 8]
	Void SetSourceWidth(float bNewValue); //Addr 0x75ee1af444 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35cd00
Class: RendererSettings.DeveloperSettings.Object, Addr: 0x7690385600
	bool bMobileDisableVertexFog; 	//[Offset: 0x0, Size: 1]
	int MaxMobileCascades; 	//[Offset: 0x0, Size: 4]
	enum EMobileMSAASampleCount MobileMSAASampleCount { //[Offset: 0x0, Size: 1]
		One = 0
		Two = 45003a00000000
		Four = 6c006500000000
		Eight = 74006100000000
		EMobileMSAASampleCount_MAX = 0
	};
	bool bMobileAllowDitheredLODTransition; 	//[Offset: 0x0, Size: 1]
	bool bMobileAllowSoftwareOcclusionCulling; 	//[Offset: 0x0, Size: 1]
	bool bMobileVirtualTextures; 	//[Offset: 0x0, Size: 1]
	bool bDiscardUnusedQualityLevels; 	//[Offset: 0x0, Size: 1]
	bool bOcclusionCulling; 	//[Offset: 0x0, Size: 1]
	float MinScreenRadiusForLights; 	//[Offset: 0x0, Size: 4]
	float MinScreenRadiusForEarlyZPass; 	//[Offset: 0x0, Size: 4]
	float MinScreenRadiusForCSMdepth; 	//[Offset: 0x0, Size: 4]
	bool bPrecomputedVisibilityWarning; 	//[Offset: 0x0, Size: 1]
	bool bTextureStreaming; 	//[Offset: 0x0, Size: 1]
	bool bUseDXT5NormalMaps; 	//[Offset: 0x0, Size: 1]
	bool bVirtualTextures; 	//[Offset: 0x0, Size: 1]
	bool bVirtualTexturedLightmaps; 	//[Offset: 0x0, Size: 1]
	uint32 VirtualTextureTileSize; 	//[Offset: 0x0, Size: 4]
	uint32 VirtualTextureTileBorderSize; 	//[Offset: 0x0, Size: 4]
	uint32 VirtualTextureFeedbackFactor; 	//[Offset: 0x0, Size: 4]
	bool bVirtualTextureEnableCompressZlib; 	//[Offset: 0x0, Size: 1]
	bool bVirtualTextureEnableCompressCrunch; 	//[Offset: 0x0, Size: 1]
	bool bClearCoatEnableSecondNormal; 	//[Offset: 0x0, Size: 1]
	int ReflectionCaptureResolution; 	//[Offset: 0x0, Size: 4]
	bool bReflectionCaptureCompression; 	//[Offset: 0x0, Size: 1]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness; 	//[Offset: 0x0, Size: 1]
	bool bForwardShading; 	//[Offset: 0x0, Size: 1]
	bool bVertexFoggingForOpaque; 	//[Offset: 0x0, Size: 1]
	bool bAllowStaticLighting; 	//[Offset: 0x0, Size: 1]
	bool bUseNormalMapsForStaticLighting; 	//[Offset: 0x0, Size: 1]
	bool bGenerateMeshDistanceFields; 	//[Offset: 0x0, Size: 1]
	bool bEightBitMeshDistanceFields; 	//[Offset: 0x0, Size: 1]
	bool bGenerateLandscapeGIData; 	//[Offset: 0x0, Size: 1]
	bool bCompressMeshDistanceFields; 	//[Offset: 0x0, Size: 1]
	float TessellationAdaptivePixelsPerTriangle; 	//[Offset: 0x0, Size: 4]
	bool bSeparateTranslucency; 	//[Offset: 0x0, Size: 1]
	enum ETranslucentSortPolicy TranslucentSortPolicy { //[Offset: 0x0, Size: 1]
		SortByDistance = 0
		SortByProjectedZ = 6e006100000000
		SortAlongAxis = 50007400000000
		ETranslucentSortPolicy_MAX = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ECustomDepthStencil CustomDepthStencil { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Enabled = 45003a00000000
		EnabledOnDemand = 6c006500000000
		EnabledWithStencil = 74006100000000
		ECustomDepthStencil_MAX = 0
	};
	bool bCustomDepthTaaJitter; 	//[Offset: 0x0, Size: 1]
	enum EAlphaChannelMode bEnableAlphaChannelInPostProcessing { //[Offset: 0x0, Size: 1]
		Disabled = 0
		LinearColorSpaceOnly = 68007000000000
		AllowThroughTonemapper = 65006400000000
		EAlphaChannelMode_MAX = 0
	};
	bool bDefaultFeatureBloom; 	//[Offset: 0x0, Size: 1]
	bool bDefaultFeatureAmbientOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction; 	//[Offset: 0x0, Size: 1]
	bool bDefaultFeatureAutoExposure; 	//[Offset: 0x0, Size: 1]
	enum EAutoExposureMethodUI DefaultFeatureAutoExposure { //[Offset: 0x0, Size: 1]
		AEM_Histogram = 0
		AEM_Basic = 61006600000000
		AEM_Manual = 65006600000000
		AEM_MAX = 74006100000000
	};
	float DefaultFeatureAutoExposureBias; 	//[Offset: 0x0, Size: 4]
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings; 	//[Offset: 0x0, Size: 1]
	bool bUsePreExposure; 	//[Offset: 0x0, Size: 1]
	bool bEnablePreExposureOnlyInTheEditor; 	//[Offset: 0x0, Size: 1]
	bool bDefaultFeatureMotionBlur; 	//[Offset: 0x0, Size: 1]
	bool bDefaultFeatureLensFlare; 	//[Offset: 0x0, Size: 1]
	bool bTemporalUpsampling; 	//[Offset: 0x0, Size: 1]
	bool bSSGI; 	//[Offset: 0x0, Size: 1]
	enum EAntiAliasingMethod DefaultFeatureAntiAliasing { //[Offset: 0x0, Size: 1]
		AAM_None = 0
		AAM_FXAA = 74006300000000
		AAM_TemporalAA = 6f004d00000000
		AAM_MSAA = 65005200000000
		AAM_MAX = 65006400000000
	};
	enum ELightUnits DefaultLightUnits { //[Offset: 0x0, Size: 1]
		Unitless = 0
		Candelas = 52004500000000
		Lumens = 79005400000000
		ELightUnits_MAX = 0
	};
	enum EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat { //[Offset: 0x0, Size: 1]
		DBBPF_B8G8R8A8 = 0
		DBBPF_A16B16G16R16_DEPRECATED = 72006500000000
		DBBPF_FloatRGB_DEPRECATED = 3a003a00000000
		DBBPF_FloatRGBA = 65005300000000
		DBBPF_A2B10G10R10 = 74006c00000000
		DBBPF_MAX = 4d000000000000
	};
	bool bRenderUnbuiltPreviewShadowsInGame; 	//[Offset: 0x0, Size: 1]
	bool bStencilForLODDither; 	//[Offset: 0x0, Size: 1]
	enum EEarlyZPass EarlyZPass { //[Offset: 0x0, Size: 1]
		None = 0
		OpaqueOnly = 45003a00000000
		OpaqueAndMasked = 6c006500000000
		Auto = 74006100000000
		EEarlyZPass_MAX = 0
	};
	bool bEarlyZPassOnlyMaterialMasking; 	//[Offset: 0x0, Size: 1]
	bool bDBuffer; 	//[Offset: 0x0, Size: 1]
	enum EClearSceneOptions ClearSceneMethod { //[Offset: 0x0, Size: 1]
		NoClear = 0
		HardwareClear = 61006500000000
		QuadAtMaxZ = 6e006f00000000
		EClearSceneOptions_MAX = 0
	};
	bool bBasePassOutputsVelocity; 	//[Offset: 0x0, Size: 1]
	bool bVertexDeformationOutputsVelocity; 	//[Offset: 0x0, Size: 1]
	bool bSelectiveBasePassOutputs; 	//[Offset: 0x0, Size: 1]
	bool bDefaultParticleCutouts; 	//[Offset: 0x0, Size: 1]
	int GPUSimulationTextureSizeX; 	//[Offset: 0x0, Size: 4]
	int GPUSimulationTextureSizeY; 	//[Offset: 0x0, Size: 4]
	bool bGlobalClipPlane; 	//[Offset: 0x0, Size: 1]
	enum EGBufferFormat GBufferFormat { //[Offset: 0x0, Size: 1]
		Force8BitsPerChannel = 0
		Default = 65007400000000
		HighPrecisionNormals = 61006c00000000
		Force16BitsPerChannel = 58004100000000
		EGBufferFormat_MAX = 0
	};
	bool bUseGPUMorphTargets; 	//[Offset: 0x0, Size: 1]
	bool bNvidiaAftermathEnabled; 	//[Offset: 0x0, Size: 1]
	bool bMultiView; 	//[Offset: 0x0, Size: 1]
	bool bMobilePostProcessing; 	//[Offset: 0x0, Size: 1]
	bool bMobileMultiView; 	//[Offset: 0x0, Size: 1]
	bool bMobileUseHWsRGBEncoding; 	//[Offset: 0x0, Size: 1]
	bool bRoundRobinOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bODSCapture; 	//[Offset: 0x0, Size: 1]
	bool bMeshStreaming; 	//[Offset: 0x0, Size: 1]
	float WireframeCullThreshold; 	//[Offset: 0x0, Size: 4]
	bool bEnableRayTracing; 	//[Offset: 0x0, Size: 1]
	bool bEnableRayTracingTextureLOD; 	//[Offset: 0x0, Size: 1]
	bool bEnableHybridTranslucency; 	//[Offset: 0x0, Size: 1]
	bool bSupportStationarySkylight; 	//[Offset: 0x0, Size: 1]
	bool bSupportLowQualityLightmaps; 	//[Offset: 0x0, Size: 1]
	bool bSupportPointLightWholeSceneShadows; 	//[Offset: 0x0, Size: 1]
	bool bSupportAtmosphericFog; 	//[Offset: 0x0, Size: 1]
	bool bSupportSkyAtmosphere; 	//[Offset: 0x0, Size: 1]
	bool bSupportSkyAtmosphereAffectsHeightFog; 	//[Offset: 0x0, Size: 1]
	bool bSupportSkinCacheShaders; 	//[Offset: 0x0, Size: 1]
	enum ESkinCacheDefaultBehavior DefaultSkinCacheBehavior { //[Offset: 0x0, Size: 1]
		Exclusive = 0
		Inclusive = 41004d00000000
		ESkinCacheDefaultBehavior_MAX = 0
	};
	float SkinCacheSceneMemoryLimitInMB; 	//[Offset: 0x0, Size: 4]
	bool bMobileEnableStaticAndCSMShadowReceivers; 	//[Offset: 0x0, Size: 1]
	bool bMobileEnableMovableLightCSMShaderCulling; 	//[Offset: 0x0, Size: 1]
	bool bMobileAllowDistanceFieldShadows; 	//[Offset: 0x0, Size: 1]
	bool bMobileAllowMovableDirectionalLights; 	//[Offset: 0x0, Size: 1]
	uint32 MobileNumDynamicPointLights; 	//[Offset: 0x0, Size: 4]
	bool bMobileDynamicPointLightsUseStaticBranch; 	//[Offset: 0x0, Size: 1]
	bool bMobileAllowMovableSpotlights; 	//[Offset: 0x0, Size: 1]
	bool bMobileAllowMovableSpotlightShadows; 	//[Offset: 0x0, Size: 1]
	bool bSupport16BitBoneIndex; 	//[Offset: 0x0, Size: 1]
	bool bGPUSkinLimit2BoneInfluences; 	//[Offset: 0x0, Size: 1]
	bool bSupportDepthOnlyIndexBuffers; 	//[Offset: 0x0, Size: 1]
	bool bSupportReversedIndexBuffers; 	//[Offset: 0x0, Size: 1]
	bool bLPV; 	//[Offset: 0x0, Size: 1]
	bool bMobileAmbientOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bUseUnlimitedBoneInfluences; 	//[Offset: 0x0, Size: 1]
	int UnlimitedBonInfluencesThreshold; 	//[Offset: 0x0, Size: 4]
	enum EMobilePlanarReflectionMode MobilePlanarReflectionMode { //[Offset: 0x0, Size: 1]
		Usual = 0
		MobilePPRExclusive = 65007400000000
		MobilePPR = 51006e00000000
		EMobilePlanarReflectionMode_MAX = 0
	};
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
Class: RendererOverrideSettings.DeveloperSettings.Object, Addr: 0x7690385380
	bool bSupportAllShaderPermutations; 	//[Offset: 0x0, Size: 1]
	bool bForceRecomputeTangents; 	//[Offset: 0x0, Size: 1]
Class: ReplayNetConnection.NetConnection.Player.Object, Addr: 0x769038f600
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object, Addr: 0x769038f380
Class: ReplicationDriver.Object, Addr: 0x769038f100
Class: ReplicationConnectionDriver.Object, Addr: 0x769038ee80
Class: ReporterBase.Object, Addr: 0x769038ec00
Class: ReporterGraph.ReporterBase.Object, Addr: 0x769038e980
Class: ReverbEffect.Object, Addr: 0x769038e700
	bool bBypassEarlyReflections; 	//[Offset: 0x0, Size: 1]
	float ReflectionsDelay; 	//[Offset: 0x0, Size: 4]
	float GainHF; 	//[Offset: 0x0, Size: 4]
	float ReflectionsGain; 	//[Offset: 0x0, Size: 4]
	bool bBypassLateReflections; 	//[Offset: 0x0, Size: 1]
	float LateDelay; 	//[Offset: 0x0, Size: 4]
	float DecayTime; 	//[Offset: 0x0, Size: 4]
	float Density; 	//[Offset: 0x0, Size: 4]
	float Diffusion; 	//[Offset: 0x0, Size: 4]
	float AirAbsorptionGainHF; 	//[Offset: 0x0, Size: 4]
	float DecayHFRatio; 	//[Offset: 0x0, Size: 4]
	float LateGain; 	//[Offset: 0x0, Size: 4]
	float Gain; 	//[Offset: 0x0, Size: 4]
	float RoomRolloffFactor; 	//[Offset: 0x0, Size: 4]
Class: Rig.Object, Addr: 0x769038e480
	structTransformBase[] TransformBases; //[Offset: 0x0, Size: 16]
	structNode[] Nodes; //[Offset: 0x0, Size: 16]
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x769038e200
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bRotationInLocalSpace; 	//[Offset: 0x0, Size: 1]
Class: RuntimeOptionsBase.Object, Addr: 0x769038df80
Class: RuntimeVirtualTexture.Object, Addr: 0x769038dd00
	int TileCount; 	//[Offset: 0x0, Size: 4]
	int TileSize; 	//[Offset: 0x0, Size: 4]
	int TileBorderSize; 	//[Offset: 0x0, Size: 4]
	enum ERuntimeVirtualTextureMaterialType MaterialType { //[Offset: 0x0, Size: 1]
		BaseColor = 0
		BaseColor_Normal_DEPRECATED = 74006500000000
		BaseColor_Normal_Specular = 3a003a00000000
		BaseColor_Normal_Specular_YCoCg = 65007600000000
		BaseColor_Normal_Specular_Mask_YCoCg = 6b006300000000
		WorldHeight = 65006300000000
		Count = 58004100000000
		ERuntimeVirtualTextureMaterialType_MAX = 0
	};
	bool bCompressTextures; 	//[Offset: 0x0, Size: 1]
	bool bClearTextures; 	//[Offset: 0x0, Size: 1]
	bool bSinglePhysicalSpace; 	//[Offset: 0x0, Size: 1]
	bool bPrivateSpace; 	//[Offset: 0x0, Size: 1]
	bool bAdaptive; 	//[Offset: 0x0, Size: 1]
	bool bContinuousUpdate; 	//[Offset: 0x0, Size: 1]
	int RemoveLowMips; 	//[Offset: 0x0, Size: 4]
	enum TextureGroup LODGroup { //[Offset: 0x0, Size: 1]
		TEXTUREGROUP_World = 0
		TEXTUREGROUP_WorldNormalMap = 7500000000
		TEXTUREGROUP_WorldSpecular = 7500000000
		TEXTUREGROUP_Character = 7500000000
		TEXTUREGROUP_CharacterNormalMap = 7500000000
		TEXTUREGROUP_CharacterSpecular = 7500000000
		TEXTUREGROUP_Weapon = 7500000000
		TEXTUREGROUP_WeaponNormalMap = 7500000000
		TEXTUREGROUP_WeaponSpecular = 7500000000
		TEXTUREGROUP_Vehicle = 7500000000
		TEXTUREGROUP_VehicleNormalMap = 7500000000
		TEXTUREGROUP_VehicleSpecular = 7500000000
		TEXTUREGROUP_Cinematic = 7500000000
		TEXTUREGROUP_Effects = 7500000000
		TEXTUREGROUP_EffectsNotFiltered = 7500000000
		TEXTUREGROUP_Skybox = 7500000000
		TEXTUREGROUP_UI = 7500000000
		TEXTUREGROUP_Lightmap = 7500000000
		TEXTUREGROUP_RenderTarget = 7500000000
		TEXTUREGROUP_MobileFlattened = 7500000000
		TEXTUREGROUP_ProcBuilding_Face = 7500000000
		TEXTUREGROUP_ProcBuilding_LightMap = 7500000000
		TEXTUREGROUP_Shadowmap = 7500000000
		TEXTUREGROUP_ColorLookupTable = 7500000000
		TEXTUREGROUP_Terrain_Heightmap = 7500000000
		TEXTUREGROUP_Terrain_Weightmap = 7500000000
		TEXTUREGROUP_Bokeh = 7500000000
		TEXTUREGROUP_IESLightProfile = 7500000000
		TEXTUREGROUP_Pixels2D = 7500000000
		TEXTUREGROUP_HierarchicalLOD = 7500000000
		TEXTUREGROUP_Impostor = 7500000000
		TEXTUREGROUP_ImpostorNormalDepth = 7500000000
		TEXTUREGROUP_8BitData = 7500000000
		TEXTUREGROUP_16BitData = 7500000000
		TEXTUREGROUP_Project01 = 7500000000
		TEXTUREGROUP_Project02 = 7500000000
		TEXTUREGROUP_Project03 = 7500000000
		TEXTUREGROUP_Project04 = 7500000000
		TEXTUREGROUP_Project05 = 7500000000
		TEXTUREGROUP_Project06 = 7500000000
		TEXTUREGROUP_Project07 = 7500000000
		TEXTUREGROUP_Project08 = 7500000000
		TEXTUREGROUP_Project09 = 7500000000
		TEXTUREGROUP_Project10 = 7500000000
		TEXTUREGROUP_Project11 = 7500000000
		TEXTUREGROUP_Project12 = 7500000000
		TEXTUREGROUP_Project13 = 7500000000
		TEXTUREGROUP_Project14 = 7500000000
		TEXTUREGROUP_Project15 = 7500000000
		TEXTUREGROUP_MAX = 7500000000
	};
	int Size; 	//[Offset: 0x0, Size: 4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture; 	//[Offset: 0x0, Size: 8]
	int GetTileSize(); //Addr 0x75ee1b5a50 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac35c800
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object, Addr: 0x769038da80
	Actor* BoundsAlignActor; 	//[Offset: 0x0, Size: 48]
	bool bSetBoundsButton; 	//[Offset: 0x0, Size: 1]
	bool bSnapBoundsToLandscape; 	//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* VirtualTexture; 	//[Offset: 0x0, Size: 8]
	bool bEnableScalability; 	//[Offset: 0x0, Size: 1]
	uint32 ScalabilityGroup; 	//[Offset: 0x0, Size: 4]
	bool bHidePrimitives; 	//[Offset: 0x0, Size: 1]
	VirtualTextureBuilder* StreamingTexture; 	//[Offset: 0x0, Size: 8]
	int StreamLowMips; 	//[Offset: 0x0, Size: 4]
	bool bBuildStreamingMipsButton; 	//[Offset: 0x0, Size: 1]
	bool bEnableCompressCrunch; 	//[Offset: 0x0, Size: 1]
	bool bUseStreamingLowMipsInEditor; 	//[Offset: 0x0, Size: 1]
	bool bBuildDebugStreamingMips; 	//[Offset: 0x0, Size: 1]
	Void Invalidate(constoutrefstructBoxSphereBounds WorldBounds); //Addr 0x75ee1b6014 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35c700
Class: RuntimeVirtualTextureVolume.Actor.Object, Addr: 0x769038d800
	RuntimeVirtualTextureComponent* VirtualTextureComponent; 	//[Offset: 0x0, Size: 8]
Class: RVOAvoidanceInterface.Interface.Object, Addr: 0x769038d580
Class: SaveGame.Object, Addr: 0x769024e700
Class: Scene.Object, Addr: 0x769038d300
Class: SceneCapture2D.SceneCapture.Actor.Object, Addr: 0x769038d080
	SceneCaptureComponent2D* CaptureComponent2D; 	//[Offset: 0x0, Size: 8]
	Void OnInterpToggle(bool bEnable); //Addr 0x75ee1bfd2c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35ff00
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901f1a00
	enum ECameraProjectionMode ProjectionType { //[Offset: 0x0, Size: 1]
		Perspective = 0
		Orthographic = 4f006700000000
		ECameraProjectionMode_MAX = 0
	};
	float FOVAngle; 	//[Offset: 0x0, Size: 4]
	float OrthoWidth; 	//[Offset: 0x0, Size: 4]
	TextureRenderTarget2D* TextureTarget; 	//[Offset: 0x0, Size: 8]
	enum ESceneCaptureCompositeMode CompositeMode { //[Offset: 0x0, Size: 1]
		SCCM_Overwrite = 0
		SCCM_Additive = 75004200000000
		SCCM_Composite = 4d005f00000000
		SCCM_MAX = 0
	};
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	float PostProcessBlendWeight; 	//[Offset: 0x0, Size: 4]
	bool bOverride_CustomNearClippingPlane; 	//[Offset: 0x0, Size: 1]
	float CustomNearClippingPlane; 	//[Offset: 0x0, Size: 4]
	bool bUseCustomProjectionMatrix; 	//[Offset: 0x0, Size: 1]
	Matrix StructProperty; 	//[Offset: 0x0, Size: 64]
	bool bEnableClipPlane; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bCameraCutThisFrame; 	//[Offset: 0x0, Size: 1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent; 	//[Offset: 0x0, Size: 1]
	bool bDisableFlipCopyGLES; 	//[Offset: 0x0, Size: 1]
	Void CaptureScene(); //Addr 0x75ee1c0fa4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6a7e00
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x769038ce00
	TextureRenderTargetCube* TextureTarget; 	//[Offset: 0x0, Size: 8]
	bool bCaptureRotation; 	//[Offset: 0x0, Size: 1]
	TextureRenderTargetCube* TextureTargetLeft; 	//[Offset: 0x0, Size: 8]
	TextureRenderTargetCube* TextureTargetRight; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* TextureTargetODS; 	//[Offset: 0x0, Size: 8]
	float IPD; 	//[Offset: 0x0, Size: 4]
	Void CaptureScene(); //Addr 0x75ee1c1408 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35fe00
Class: SceneCaptureCube.SceneCapture.Actor.Object, Addr: 0x769038cb80
	SceneCaptureComponentCube* CaptureComponentCube; 	//[Offset: 0x0, Size: 8]
	Void OnInterpToggle(bool bEnable); //Addr 0x75ee1c17d0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35fd00
Class: SceneCaptureVisibilityOverrideVolume.Volume.Brush.Actor.Object, Addr: 0x769038c900
	float Priority; 	//[Offset: 0x0, Size: 4]
	structSceneCaptureVisibilityOverrideActorInfo[] OverrideActorInfos; //[Offset: 0x0, Size: 16]
Class: SCS_Node.Object, Addr: 0x769038c680
	Object* ComponentClass; 	//[Offset: 0x0, Size: 8]
	ActorComponent* ComponentTemplate; 	//[Offset: 0x0, Size: 8]
	BlueprintCookedComponentInstancingData StructProperty; 	//[Offset: 0x0, Size: 80]
	FName AttachToName; 	//[Offset: 0x0, Size: 12]
	FName ParentComponentOrVariableName; 	//[Offset: 0x0, Size: 12]
	FName ParentComponentOwnerClassName; 	//[Offset: 0x0, Size: 12]
	bool bIsParentComponentNative; 	//[Offset: 0x0, Size: 1]
	SCS_Node*[] ChildNodes; //[Offset: 0x0, Size: 16]
	structBPVariableMetaDataEntry[] MetaDataArray; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	FName InternalVariableName; 	//[Offset: 0x0, Size: 12]
Class: Selection.Object, Addr: 0x769038c400
Class: ServerStatReplicator.Info.Actor.Object, Addr: 0x769038c180
	bool bUpdateStatNet; 	//[Offset: 0x0, Size: 1]
	bool bOverwriteClientStats; 	//[Offset: 0x0, Size: 1]
	uint32 Channels; 	//[Offset: 0x0, Size: 4]
	uint32 InRate; 	//[Offset: 0x0, Size: 4]
	uint32 OutRate; 	//[Offset: 0x0, Size: 4]
	uint32 MaxPacketOverhead; 	//[Offset: 0x0, Size: 4]
	uint32 InRateClientMax; 	//[Offset: 0x0, Size: 4]
	uint32 InRateClientMin; 	//[Offset: 0x0, Size: 4]
	uint32 InRateClientAvg; 	//[Offset: 0x0, Size: 4]
	uint32 InPacketsClientMax; 	//[Offset: 0x0, Size: 4]
	uint32 InPacketsClientMin; 	//[Offset: 0x0, Size: 4]
	uint32 InPacketsClientAvg; 	//[Offset: 0x0, Size: 4]
	uint32 OutRateClientMax; 	//[Offset: 0x0, Size: 4]
	uint32 OutRateClientMin; 	//[Offset: 0x0, Size: 4]
	uint32 OutRateClientAvg; 	//[Offset: 0x0, Size: 4]
	uint32 OutPacketsClientMax; 	//[Offset: 0x0, Size: 4]
	uint32 OutPacketsClientMin; 	//[Offset: 0x0, Size: 4]
	uint32 OutPacketsClientAvg; 	//[Offset: 0x0, Size: 4]
	uint32 NetNumClients; 	//[Offset: 0x0, Size: 4]
	uint32 InPackets; 	//[Offset: 0x0, Size: 4]
	uint32 OutPackets; 	//[Offset: 0x0, Size: 4]
	uint32 InBunches; 	//[Offset: 0x0, Size: 4]
	uint32 OutBunches; 	//[Offset: 0x0, Size: 4]
	uint32 OutLoss; 	//[Offset: 0x0, Size: 4]
	uint32 InLoss; 	//[Offset: 0x0, Size: 4]
	uint32 VoiceBytesSent; 	//[Offset: 0x0, Size: 4]
	uint32 VoiceBytesRecv; 	//[Offset: 0x0, Size: 4]
	uint32 VoicePacketsSent; 	//[Offset: 0x0, Size: 4]
	uint32 VoicePacketsRecv; 	//[Offset: 0x0, Size: 4]
	uint32 PercentInVoice; 	//[Offset: 0x0, Size: 4]
	uint32 PercentOutVoice; 	//[Offset: 0x0, Size: 4]
	uint32 NumActorChannels; 	//[Offset: 0x0, Size: 4]
	uint32 NumConsideredActors; 	//[Offset: 0x0, Size: 4]
	uint32 PrioritizedActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumRelevantActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumRelevantDeletedActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumReplicatedActorAttempts; 	//[Offset: 0x0, Size: 4]
	uint32 NumReplicatedActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumNetActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumDormantActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumInitiallyDormantActors; 	//[Offset: 0x0, Size: 4]
	uint32 NumNetGUIDsAckd; 	//[Offset: 0x0, Size: 4]
	uint32 NumNetGUIDsPending; 	//[Offset: 0x0, Size: 4]
	uint32 NumNetGUIDsUnAckd; 	//[Offset: 0x0, Size: 4]
	uint32 ObjPathBytes; 	//[Offset: 0x0, Size: 4]
	uint32 NetGUIDOutRate; 	//[Offset: 0x0, Size: 4]
	uint32 NetGUIDInRate; 	//[Offset: 0x0, Size: 4]
	uint32 NetSaturated; 	//[Offset: 0x0, Size: 4]
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x769038bf00
	enum EShadowMapFlags ShadowmapFlags { //[Offset: 0x0, Size: 1]
		SMF_None = 0
		SMF_Streamed = 4d003a00000000
		SMF_MAX = 0
	};
Class: SimpleConstructionScript.Object, Addr: 0x769038bc80
	SCS_Node*[] RootNodes; //[Offset: 0x0, Size: 16]
	SCS_Node*[] AllNodes; //[Offset: 0x0, Size: 16]
	SCS_Node* DefaultSceneRootNode; 	//[Offset: 0x0, Size: 8]
Class: SkeletalMesh.StreamableRenderAsset.Object, Addr: 0x769038ba00
	Skeleton* Skeleton; 	//[Offset: 0x0, Size: 8]
	StrProperty GameTypeID; 	//[Offset: 0x0, Size: 16]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	structSkeletalMaterial[] Materials; //[Offset: 0x0, Size: 16]
	structBoneMirrorInfo[] SkelMirrorTable; //[Offset: 0x0, Size: 16]
	structSkeletalMeshLODInfo[] LODInfo; //[Offset: 0x0, Size: 16]
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bOverrideGlobalNumReduceLODs; 	//[Offset: 0x0, Size: 1]
	int NumReduceLODs_UltraLow; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Low; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Mid; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_High; 	//[Offset: 0x0, Size: 4]
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EAxis SkelMirrorAxis { //[Offset: 0x0, Size: 1]
		None = 0
		X = 74006100000000
		Y = 75007100000000
		Z = 4e006e00000000
		EAxis_MAX = 0
	};
	enum EAxis SkelMirrorFlipAxis { //[Offset: 0x0, Size: 1]
		None = 0
		X = 74006100000000
		Y = 75007100000000
		Z = 4e006e00000000
		EAxis_MAX = 0
	};
	bool bUseFullPrecisionUVs; 	//[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis; 	//[Offset: 0x0, Size: 1]
	bool bHasBeenSimplified; 	//[Offset: 0x0, Size: 1]
	bool bHasVertexColors; 	//[Offset: 0x0, Size: 1]
	bool bEnablePerPolyCollision; 	//[Offset: 0x0, Size: 1]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	PhysicsAsset* PhysicsAsset; 	//[Offset: 0x0, Size: 8]
	PhysicsAsset* ShadowPhysicsAsset; 	//[Offset: 0x0, Size: 8]
	NodeMappingContainer*[] NodeMappingData; //[Offset: 0x0, Size: 16]
	MorphTarget*[] MorphTargets; //[Offset: 0x0, Size: 16]
	AnimInstance* PostProcessAnimBlueprint; 	//[Offset: 0x0, Size: 8]
	ClothingAssetBase*[] MeshClothingAssets; //[Offset: 0x0, Size: 16]
	SkeletalMeshSamplingInfo StructProperty; 	//[Offset: 0x0, Size: 48]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	SkeletalMeshSocket*[] Sockets; //[Offset: 0x0, Size: 16]
	structSkinWeightProfileInfo[] SkinWeightProfiles; //[Offset: 0x0, Size: 16]
	Void SetLODSettings(SkeletalMeshLODSettings* InLODSettings); //Addr 0x75ee1cd060 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac35f000
Class: SkeletalMeshActor.Actor.Object, Addr: 0x769038b780
	bool bShouldDoAnimNotifies; 	//[Offset: 0x0, Size: 1]
	bool bWakeOnLevelStart; 	//[Offset: 0x0, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent; 	//[Offset: 0x0, Size: 8]
	SkeletalMesh* ReplicatedMesh; 	//[Offset: 0x43702, Size: 8]
	PhysicsAsset* ReplicatedPhysAsset; 	//[Offset: 0x43709, Size: 8]
	MaterialInterface* ReplicatedMaterial0; 	//[Offset: 0x436f2, Size: 8]
	MaterialInterface* ReplicatedMaterial1; 	//[Offset: 0x436fa, Size: 8]
	Void OnRep_ReplicatedPhysAsset(); //Addr 0x75ee1d0b28 [Native] // UFieldProperty addr: 0x75ac35eb00
Class: SkeletalMeshEditorData.Object, Addr: 0x769038b500
Class: SkeletalMeshLODSettings.DataAsset.Object, Addr: 0x769038b280
	bool bOverrideGlobalNumReduceLODs; 	//[Offset: 0x0, Size: 1]
	int NumReduceLODs_UltraLow; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Low; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_Mid; 	//[Offset: 0x0, Size: 4]
	int NumReduceLODs_High; 	//[Offset: 0x0, Size: 4]
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	bool bOverrideLODStreamingSettings; 	//[Offset: 0x0, Size: 1]
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	structSkeletalMeshLODGroupSettings[] LODGroups; //[Offset: 0x0, Size: 16]
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object, Addr: 0x769038b000
	FName SkeletalMeshReductionModuleName; 	//[Offset: 0x0, Size: 12]
Class: SkeletalMeshSocket.Object, Addr: 0x769038ad80
	FName SocketName; 	//[Offset: 0x0, Size: 12]
	FName BoneName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bForceAlwaysAnimated; 	//[Offset: 0x0, Size: 1]
	Void InitializeSocketFromLocation(constSkeletalMeshComponent* SkelComp, structVector WorldLocation, structVector WorldNormal); //Addr 0x75ee1dae7c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbb8400
Class: Skeleton.Object, Addr: 0x76902dee80
	structBoneNode[] BoneTree; //[Offset: 0x0, Size: 16]
	structTransform[] RefLocalPoses; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	structVirtualBone[] VirtualBones; //[Offset: 0x0, Size: 16]
	SkeletalMeshSocket*[] Sockets; //[Offset: 0x0, Size: 16]
	SmartNameContainer StructProperty; 	//[Offset: 0x0, Size: 80]
	BlendProfile*[] BlendProfiles; //[Offset: 0x0, Size: 16]
	structAnimSlotGroup[] SlotGroups; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object, Addr: 0x769038ab00
	enum ESkyAtmosphereTransformMode TransformMode { //[Offset: 0x0, Size: 1]
		PlanetTopAtAbsoluteWorldOrigin = 0
		PlanetTopAtComponentTransform = 65006e00000000
		PlanetCenterAtComponentTransform = 74005300000000
		ESkyAtmosphereTransformMode_MAX = 0
	};
	float BottomRadius; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float AtmosphereHeight; 	//[Offset: 0x0, Size: 4]
	float MultiScatteringFactor; 	//[Offset: 0x0, Size: 4]
	float TraceSampleCountScale; 	//[Offset: 0x0, Size: 4]
	float RayleighScatteringScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float RayleighExponentialDistribution; 	//[Offset: 0x0, Size: 4]
	float MieScatteringScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float MieAbsorptionScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float MieAnisotropy; 	//[Offset: 0x0, Size: 4]
	float MieExponentialDistribution; 	//[Offset: 0x0, Size: 4]
	float OtherAbsorptionScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	TentDistribution StructProperty; 	//[Offset: 0x0, Size: 12]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float AerialPespectiveViewDistanceScale; 	//[Offset: 0x0, Size: 4]
	float HeightFogContribution; 	//[Offset: 0x0, Size: 4]
	float TransmittanceMinLightElevationAngle; 	//[Offset: 0x0, Size: 4]
	float AerialPerspectiveStartDepth; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSkyLuminanceFactor(structLinearColor NewValue); //Addr 0x75ee1e4b24 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbb7500
Class: SkyAtmosphere.Info.Actor.Object, Addr: 0x769038a880
	SkyAtmosphereComponent* SkyAtmosphereComponent; 	//[Offset: 0x0, Size: 8]
Class: SkyLight.Info.Actor.Object, Addr: 0x7690275380
	SkyLightComponent* LightComponent; 	//[Offset: 0x0, Size: 8]
	bool bEnabled; 	//[Offset: 0x3c74b, Size: 1]
	Void OnRep_bEnabled(); //Addr 0x75ee1e5dbc [Native] // UFieldProperty addr: 0x75ac052300
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object, Addr: 0x769038a600
	bool bRealTimeCapture; 	//[Offset: 0x0, Size: 1]
	enum ESkyLightSourceType SourceType { //[Offset: 0x0, Size: 1]
		SLS_CapturedScene = 0
		SLS_SpecifiedCubemap = 4c007900000000
		SLS_MAX = 79005400000000
	};
	TextureCube* Cubemap; 	//[Offset: 0x0, Size: 8]
	float SourceCubemapAngle; 	//[Offset: 0x0, Size: 4]
	int CubemapResolution; 	//[Offset: 0x0, Size: 4]
	float SkyDistanceThreshold; 	//[Offset: 0x0, Size: 4]
	bool bCaptureEmissiveOnly; 	//[Offset: 0x0, Size: 1]
	bool bLowerHemisphereIsBlack; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float OcclusionMaxDistance; 	//[Offset: 0x0, Size: 4]
	float Contrast; 	//[Offset: 0x0, Size: 4]
	float OcclusionExponent; 	//[Offset: 0x0, Size: 4]
	float MinOcclusion; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bCloudAmbientOcclusion; 	//[Offset: 0x0, Size: 1]
	float CloudAmbientOcclusionStrength; 	//[Offset: 0x0, Size: 4]
	float CloudAmbientOcclusionExtent; 	//[Offset: 0x0, Size: 4]
	float CloudAmbientOcclusionMapResolutionScale; 	//[Offset: 0x0, Size: 4]
	float CloudAmbientOcclusionApertureScale; 	//[Offset: 0x0, Size: 4]
	enum EOcclusionCombineMode OcclusionCombineMode { //[Offset: 0x0, Size: 1]
		OCM_Minimum = 0
		OCM_Multiply = 6c006300000000
		OCM_MAX = 65006e00000000
	};
	TextureCube* BlendDestinationCubemap; 	//[Offset: 0x0, Size: 8]
	Void SetVolumetricScatteringIntensity(float NewIntensity); //Addr 0x75ee1e689c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbb6900
Class: SlateBrushAsset.Object, Addr: 0x769038fd80
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
Class: SlateTextureAtlasInterface.Interface.Object, Addr: 0x769038fb00
Class: SmokeTestCommandlet.Commandlet.Object, Addr: 0x769038f880
Class: SoundAttenuation.Object, Addr: 0x7690395100
	SoundAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 928]
Class: SoundConcurrency.Object, Addr: 0x7690394c00
	SoundConcurrencySettings StructProperty; 	//[Offset: 0x0, Size: 36]
Class: SoundCue.SoundBase.Object, Addr: 0x7690394980
	bool bPrimeOnLoad; 	//[Offset: 0x0, Size: 1]
	SoundNode* FirstNode; 	//[Offset: 0x0, Size: 8]
	float VolumeMultiplier; 	//[Offset: 0x0, Size: 4]
	float PitchMultiplier; 	//[Offset: 0x0, Size: 4]
	SoundAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 928]
	float SubtitlePriority; 	//[Offset: 0x0, Size: 4]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
	bool bExcludeFromRandomNodeBranchCulling; 	//[Offset: 0x0, Size: 1]
	int CookedQualityIndex; 	//[Offset: 0x0, Size: 4]
	bool bHasPlayWhenSilent; 	//[Offset: 0x0, Size: 1]
Class: SoundEffectPreset.Object, Addr: 0x769025d800
Class: SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025da80
Class: SoundEffectSourcePresetChain.Object, Addr: 0x7690394700
	structSourceEffectChainEntry[] Chain; //[Offset: 0x0, Size: 16]
	bool bPlayEffectChainTails; 	//[Offset: 0x0, Size: 1]
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025ad80
Class: SoundGroups.Object, Addr: 0x7690394480
	structSoundGroup[] SoundGroupProfiles; //[Offset: 0x0, Size: 16]
Class: SoundMix.Object, Addr: 0x7690394200
	bool bApplyEQ; 	//[Offset: 0x0, Size: 1]
	float EQPriority; 	//[Offset: 0x0, Size: 4]
	AudioEQEffect StructProperty; 	//[Offset: 0x0, Size: 64]
	structSoundClassAdjuster[] SoundClassEffects; //[Offset: 0x0, Size: 16]
	float InitialDelay; 	//[Offset: 0x0, Size: 4]
	float fadeInTime; 	//[Offset: 0x0, Size: 4]
	float Duration; 	//[Offset: 0x0, Size: 4]
	float FadeOutTime; 	//[Offset: 0x0, Size: 4]
Class: SoundNode.Object, Addr: 0x7690393f80
	SoundNode*[] ChildNodes; //[Offset: 0x0, Size: 16]
Class: SoundNodeAssetReferencer.SoundNode.Object, Addr: 0x7690393d00
Class: SoundNodeAttenuation.SoundNode.Object, Addr: 0x7690393a80
	SoundAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	SoundAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 928]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
Class: SoundNodeBranch.SoundNode.Object, Addr: 0x7690393800
	FName BoolParameterName; 	//[Offset: 0x0, Size: 12]
Class: SoundNodeConcatenator.SoundNode.Object, Addr: 0x7690393580
	float[] InputVolume; //[Offset: 0x0, Size: 16]
Class: SoundNodeDelay.SoundNode.Object, Addr: 0x7690393300
	float DelayMin; 	//[Offset: 0x0, Size: 4]
	float DelayMax; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeDialoguePlayer.SoundNode.Object, Addr: 0x7690393080
	DialogueWaveParameter StructProperty; 	//[Offset: 0x0, Size: 32]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
Class: SoundNodeDistanceCrossFade.SoundNode.Object, Addr: 0x7690392e00
	structDistanceDatum[] CrossFadeInput; //[Offset: 0x0, Size: 16]
Class: SoundNodeDoppler.SoundNode.Object, Addr: 0x7690392b80
	float DopplerIntensity; 	//[Offset: 0x0, Size: 4]
	bool bUseSmoothing; 	//[Offset: 0x0, Size: 1]
	float SmoothingInterpSpeed; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeEnveloper.SoundNode.Object, Addr: 0x7690392900
	float LoopStart; 	//[Offset: 0x0, Size: 4]
	float LoopEnd; 	//[Offset: 0x0, Size: 4]
	float DurationAfterLoop; 	//[Offset: 0x0, Size: 4]
	int LoopCount; 	//[Offset: 0x0, Size: 4]
	bool bLoopIndefinitely; 	//[Offset: 0x0, Size: 1]
	bool bLoop; 	//[Offset: 0x0, Size: 1]
	DistributionFloatConstantCurve* VolumeInterpCurve; 	//[Offset: 0x0, Size: 8]
	DistributionFloatConstantCurve* PitchInterpCurve; 	//[Offset: 0x0, Size: 8]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float PitchMin; 	//[Offset: 0x0, Size: 4]
	float PitchMax; 	//[Offset: 0x0, Size: 4]
	float VolumeMin; 	//[Offset: 0x0, Size: 4]
	float VolumeMax; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeGroupControl.SoundNode.Object, Addr: 0x7690392680
	int[] GroupSizes; //[Offset: 0x0, Size: 16]
Class: SoundNodeLooping.SoundNode.Object, Addr: 0x7690392400
	int LoopCount; 	//[Offset: 0x0, Size: 4]
	bool bLoopIndefinitely; 	//[Offset: 0x0, Size: 1]
Class: SoundNodeMature.SoundNode.Object, Addr: 0x7690392180
Class: SoundNodeMixer.SoundNode.Object, Addr: 0x7690391f00
	float[] InputVolume; //[Offset: 0x0, Size: 16]
Class: SoundNodeModulator.SoundNode.Object, Addr: 0x7690391c80
	float PitchMin; 	//[Offset: 0x0, Size: 4]
	float PitchMax; 	//[Offset: 0x0, Size: 4]
	float VolumeMin; 	//[Offset: 0x0, Size: 4]
	float VolumeMax; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeModulatorContinuous.SoundNode.Object, Addr: 0x7690391a00
	ModulatorContinuousParams StructProperty; 	//[Offset: 0x0, Size: 36]
	ModulatorContinuousParams StructProperty; 	//[Offset: 0x0, Size: 36]
Class: SoundNodeOscillator.SoundNode.Object, Addr: 0x7690391780
	bool bModulateVolume; 	//[Offset: 0x0, Size: 1]
	bool bModulatePitch; 	//[Offset: 0x0, Size: 1]
	float AmplitudeMin; 	//[Offset: 0x0, Size: 4]
	float AmplitudeMax; 	//[Offset: 0x0, Size: 4]
	float FrequencyMin; 	//[Offset: 0x0, Size: 4]
	float FrequencyMax; 	//[Offset: 0x0, Size: 4]
	float OffsetMin; 	//[Offset: 0x0, Size: 4]
	float OffsetMax; 	//[Offset: 0x0, Size: 4]
	float CenterMin; 	//[Offset: 0x0, Size: 4]
	float CenterMax; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object, Addr: 0x7690391500
	FName ParamName; 	//[Offset: 0x0, Size: 12]
Class: SoundNodeQualityLevel.SoundNode.Object, Addr: 0x7690391280
	int CookedQualityLevelIndex; 	//[Offset: 0x0, Size: 4]
Class: SoundNodeRandom.SoundNode.Object, Addr: 0x7690391000
	float[] Weights; //[Offset: 0x0, Size: 16]
	bool[] HasBeenUsed; //[Offset: 0x0, Size: 16]
	int NumRandomUsed; 	//[Offset: 0x0, Size: 4]
	int PreselectAtLevelLoad; 	//[Offset: 0x0, Size: 4]
	bool bShouldExcludeFromBranchCulling; 	//[Offset: 0x0, Size: 1]
	bool bSoundCueExcludedFromBranchCulling; 	//[Offset: 0x0, Size: 1]
	bool bRandomizeWithoutReplacement; 	//[Offset: 0x0, Size: 1]
Class: SoundNodeSoundClass.SoundNode.Object, Addr: 0x7690390d80
	SoundClass* SoundClassOverride; 	//[Offset: 0x0, Size: 8]
Class: SoundNodeSwitch.SoundNode.Object, Addr: 0x7690390b00
	FName IntParameterName; 	//[Offset: 0x0, Size: 12]
Class: SoundNodeWaveParam.SoundNode.Object, Addr: 0x7690390880
	FName WaveParameterName; 	//[Offset: 0x0, Size: 12]
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object, Addr: 0x7690390600
	SoundWave* SoundWaveAssetPtr; 	//[Offset: 0x0, Size: 48]
	SoundWave* SoundWave; 	//[Offset: 0x0, Size: 8]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
Class: SoundWave.SoundBase.Object, Addr: 0x7690285600
	int CompressionQuality; 	//[Offset: 0x0, Size: 4]
	int StreamingPriority; 	//[Offset: 0x0, Size: 4]
	enum ESoundwaveSampleRateSettings SampleRateQuality { //[Offset: 0x0, Size: 1]
		Max = 0
		High = 74006e00000000
		Medium = 69007400000000
		Low = 61006300000000
		Min = 74006e00000000
		MatchDevice = 69007400000000
		ESoundwaveSampleRateSettings_MAX = 0
	};
	enum ESoundGroup SoundGroup { //[Offset: 0x0, Size: 1]
		SOUNDGROUP_Default = 0
		SOUNDGROUP_Effects = 0
		SOUNDGROUP_UI = 0
		SOUNDGROUP_Music = 0
		SOUNDGROUP_Voice = 0
		SOUNDGROUP_GameSoundGroup1 = 0
		SOUNDGROUP_GameSoundGroup2 = 0
		SOUNDGROUP_GameSoundGroup3 = 0
		SOUNDGROUP_GameSoundGroup4 = 0
		SOUNDGROUP_GameSoundGroup5 = 0
		SOUNDGROUP_GameSoundGroup6 = 0
		SOUNDGROUP_GameSoundGroup7 = 0
		SOUNDGROUP_GameSoundGroup8 = 0
		SOUNDGROUP_GameSoundGroup9 = 0
		SOUNDGROUP_GameSoundGroup10 = 0
		SOUNDGROUP_GameSoundGroup11 = 0
		SOUNDGROUP_GameSoundGroup12 = 0
		SOUNDGROUP_GameSoundGroup13 = 0
		SOUNDGROUP_GameSoundGroup14 = 0
		SOUNDGROUP_GameSoundGroup15 = 0
		SOUNDGROUP_GameSoundGroup16 = 0
		SOUNDGROUP_GameSoundGroup17 = 0
		SOUNDGROUP_GameSoundGroup18 = 0
		SOUNDGROUP_GameSoundGroup19 = 0
		SOUNDGROUP_GameSoundGroup20 = 0
		SOUNDGROUP_MAX = 0
	};
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bStreaming; 	//[Offset: 0x0, Size: 1]
	bool bSeekableStreaming; 	//[Offset: 0x0, Size: 1]
	enum ESoundWaveLoadingBehavior LoadingBehavior { //[Offset: 0x0, Size: 1]
		Inherited = 0
		RetainOnLoad = 43006c00000000
		PrimeOnLoad = 64006f00000000
		LoadOnDemand = 73007500000000
		ForceInline = 6e006f00000000
		Uninitialized = 4d005f00000000
		ESoundWaveLoadingBehavior_MAX = 0
	};
	bool bMature; 	//[Offset: 0x0, Size: 1]
	bool bManualWordWrap; 	//[Offset: 0x0, Size: 1]
	bool bSingleLine; 	//[Offset: 0x0, Size: 1]
	bool bIsAmbisonics; 	//[Offset: 0x0, Size: 1]
	float[] FrequenciesToAnalyze; //[Offset: 0x0, Size: 16]
	structSoundWaveSpectralTimeData[] CookedSpectralTimeData; //[Offset: 0x0, Size: 16]
	structSoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData; //[Offset: 0x0, Size: 16]
	int InitialChunkSize; 	//[Offset: 0x0, Size: 4]
	StrProperty SpokenText; 	//[Offset: 0x0, Size: 16]
	float SubtitlePriority; 	//[Offset: 0x0, Size: 4]
	float Volume; 	//[Offset: 0x0, Size: 4]
	float Pitch; 	//[Offset: 0x0, Size: 4]
	int NumChannels; 	//[Offset: 0x0, Size: 4]
	int SampleRate; 	//[Offset: 0x0, Size: 4]
	structSubtitleCue[] Subtitles; //[Offset: 0x0, Size: 16]
	CurveTable* Curves; 	//[Offset: 0x0, Size: 8]
	CurveTable* InternalCurves; 	//[Offset: 0x0, Size: 8]
Class: SoundSourceBus.SoundWave.SoundBase.Object, Addr: 0x7690390380
	enum ESourceBusChannels SourceBusChannels { //[Offset: 0x0, Size: 1]
		Mono = 0
		Stereo = 3a003a00000000
		ESourceBusChannels_MAX = 0
	};
	float SourceBusDuration; 	//[Offset: 0x0, Size: 4]
	AudioBus* AudioBus; 	//[Offset: 0x0, Size: 8]
	bool bAutoDeactivateWhenSilent; 	//[Offset: 0x0, Size: 1]
Class: SoundSubmixBase.Object, Addr: 0x7690390100
	SoundSubmixBase*[] ChildSubmixes; //[Offset: 0x0, Size: 16]
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object, Addr: 0x769039a380
	SoundSubmixBase* ParentSubmix; 	//[Offset: 0x0, Size: 8]
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object, Addr: 0x769039a100
	bool bMuteWhenBackgrounded; 	//[Offset: 0x0, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain; //[Offset: 0x0, Size: 16]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; 	//[Offset: 0x0, Size: 8]
	int EnvelopeFollowerAttackTime; 	//[Offset: 0x0, Size: 4]
	int EnvelopeFollowerReleaseTime; 	//[Offset: 0x0, Size: 4]
	enum EGainParamMode GainMode { //[Offset: 0x0, Size: 1]
		Linear = 0
		Decibels = 3a003a00000000
		EGainParamMode_MAX = 0
	};
	float OutputVolume; 	//[Offset: 0x0, Size: 4]
	float WetLevel; 	//[Offset: 0x0, Size: 4]
	float DryLevel; 	//[Offset: 0x0, Size: 4]
	delegate OnSubmixRecordedFileDone; 	//[Offset: 0x0, Size: 16]
	Void StopSpectralAnalysis(constObject* WorldContextObject); //Addr 0x75ee1f5314 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbba100
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object, Addr: 0x7690399e80
	FName SoundfieldEncodingFormat; 	//[Offset: 0x0, Size: 12]
	SoundfieldEncodingSettingsBase* EncodingSettings; 	//[Offset: 0x0, Size: 8]
	SoundfieldEffectBase*[] SoundfieldEffectChain; //[Offset: 0x0, Size: 16]
	SoundfieldEncodingSettingsBase* EncodingSettingsClass; 	//[Offset: 0x0, Size: 8]
Class: EndpointSubmix.SoundSubmixBase.Object, Addr: 0x7690399c00
	FName EndpointType; 	//[Offset: 0x0, Size: 12]
	AudioEndpointSettingsBase* EndpointSettingsClass; 	//[Offset: 0x0, Size: 8]
	AudioEndpointSettingsBase* EndpointSettings; 	//[Offset: 0x0, Size: 8]
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object, Addr: 0x7690399980
	FName SoundfieldEndpointType; 	//[Offset: 0x0, Size: 12]
	AudioEndpointSettingsBase* EndpointSettingsClass; 	//[Offset: 0x0, Size: 8]
	SoundfieldEndpointSettingsBase* EndpointSettings; 	//[Offset: 0x0, Size: 8]
	SoundfieldEncodingSettingsBase* EncodingSettingsClass; 	//[Offset: 0x0, Size: 8]
	SoundfieldEncodingSettingsBase* EncodingSettings; 	//[Offset: 0x0, Size: 8]
	SoundfieldEffectBase*[] SoundfieldEffectChain; //[Offset: 0x0, Size: 16]
Class: SoundWaveProcedural.SoundWave.SoundBase.Object, Addr: 0x7690285880
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object, Addr: 0x7690399700
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x7690399480
	bool bIgnoreTimeDilation; 	//[Offset: 0x0, Size: 1]
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object, Addr: 0x7690399200
	DrawSphereComponent* DrawCaptureRadius; 	//[Offset: 0x0, Size: 8]
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690398f80
	float InfluenceRadius; 	//[Offset: 0x0, Size: 4]
	float CaptureDistanceScale; 	//[Offset: 0x0, Size: 4]
	DrawSphereComponent* PreviewInfluenceRadius; 	//[Offset: 0x0, Size: 8]
Class: SplineMetadata.Object, Addr: 0x7690398d00
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901eb280
	SplineCurves StructProperty; 	//[Offset: 0x0, Size: 112]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveQuat StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveFloat StructProperty; 	//[Offset: 0x0, Size: 24]
	bool bAllowSplineEditingPerInstance; 	//[Offset: 0x0, Size: 1]
	int ReparamStepsPerSegment; 	//[Offset: 0x0, Size: 4]
	float Duration; 	//[Offset: 0x0, Size: 4]
	bool bStationaryEndpoints; 	//[Offset: 0x0, Size: 1]
	bool bSplineHasBeenEdited; 	//[Offset: 0x0, Size: 1]
	bool bModifiedByConstructionScript; 	//[Offset: 0x0, Size: 1]
	bool bInputSplinePointsToConstructionScript; 	//[Offset: 0x0, Size: 1]
	bool bDrawDebug; 	//[Offset: 0x0, Size: 1]
	bool bClosedLoop; 	//[Offset: 0x0, Size: 1]
	bool bLoopPositionOverride; 	//[Offset: 0x0, Size: 1]
	float LoopPosition; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Void UpdateSpline(); //Addr 0x75ee202a30 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5dfd00
Class: SplineMeshActor.Actor.Object, Addr: 0x7690398a80
	SplineMeshComponent* SplineMeshComponent; 	//[Offset: 0x0, Size: 8]
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690398800
	SplineMeshParams StructProperty; 	//[Offset: 0x0, Size: 88]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float SplineBoundaryMin; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	float SplineBoundaryMax; 	//[Offset: 0x0, Size: 4]
	bool bAllowSplineEditingPerInstance; 	//[Offset: 0x0, Size: 1]
	bool bSmoothInterpRollScale; 	//[Offset: 0x0, Size: 1]
	bool bMeshDirty; 	//[Offset: 0x0, Size: 1]
	enum ESplineMeshAxis ForwardAxis { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 53004500000000
		Z = 79005400000000
		ESplineMeshAxis_MAX = 0
	};
	float VirtualTextureMainPassMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
	Void UpdateMesh(); //Addr 0x75ee207da0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbc500
Class: SpringArmComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690269c00
	float TargetArmLength; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ViewPitchMin; 	//[Offset: 0x0, Size: 4]
	float ViewPitchMax; 	//[Offset: 0x0, Size: 4]
	float ViewYawMin; 	//[Offset: 0x0, Size: 4]
	float ViewYawMax; 	//[Offset: 0x0, Size: 4]
	float ViewRollMin; 	//[Offset: 0x0, Size: 4]
	float ViewRollMax; 	//[Offset: 0x0, Size: 4]
	float ProbeSize; 	//[Offset: 0x0, Size: 4]
	enum ECollisionChannel ProbeChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	bool bDoCollisionTest; 	//[Offset: 0x0, Size: 1]
	bool bUsePawnControlRotation; 	//[Offset: 0x0, Size: 1]
	bool bInheritPitch; 	//[Offset: 0x0, Size: 1]
	bool bInheritYaw; 	//[Offset: 0x0, Size: 1]
	bool bInheritRoll; 	//[Offset: 0x0, Size: 1]
	bool bEnableCameraLag; 	//[Offset: 0x0, Size: 1]
	bool bEnableCameraRotationLag; 	//[Offset: 0x0, Size: 1]
	bool bUseCameraLagSubstepping; 	//[Offset: 0x0, Size: 1]
	bool bDrawDebugLagMarkers; 	//[Offset: 0x0, Size: 1]
	float CameraLagSpeed; 	//[Offset: 0x0, Size: 4]
	float CameraRotationLagSpeed; 	//[Offset: 0x0, Size: 4]
	float CameraLagMaxTimeStep; 	//[Offset: 0x0, Size: 4]
	float CameraLagMaxDistance; 	//[Offset: 0x0, Size: 4]
	Void SetPreviousDesiredRot(structRotator Rot); //Addr 0x75ee2093e4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac025200
Class: StaticMeshActor.Actor.Object, Addr: 0x7690284980
	StaticMeshComponent* StaticMeshComponent; 	//[Offset: 0x0, Size: 8]
	bool bStaticMeshReplicateMovement; 	//[Offset: 0x0, Size: 1]
	enum ENavDataGatheringMode NavigationGeometryGatheringMode { //[Offset: 0x0, Size: 1]
		Default = 0
		Instant = 44007600000000
		Lazy = 67006e00000000
		ENavDataGatheringMode_MAX = 0
	};
	Void SetMobility(InMobility(ByteProperty) InMobility); //Addr 0x75ee20d800 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05de00
Class: StaticMeshSocket.Object, Addr: 0x7690398080
	FName SocketName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	StrProperty Tag; 	//[Offset: 0x0, Size: 16]
Class: StereoLayerShape.Object, Addr: 0x7690397e00
Class: StereoLayerShapeQuad.StereoLayerShape.Object, Addr: 0x7690397b80
Class: StereoLayerShapeCylinder.StereoLayerShape.Object, Addr: 0x7690397900
	float Radius; 	//[Offset: 0x0, Size: 4]
	float OverlayArc; 	//[Offset: 0x0, Size: 4]
	int Height; 	//[Offset: 0x0, Size: 4]
	Void SetRadius(float InRadius); //Addr 0x75ee20fa2c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbb200
Class: StereoLayerShapeCubemap.StereoLayerShape.Object, Addr: 0x7690397680
Class: StereoLayerShapeEquirect.StereoLayerShape.Object, Addr: 0x7690397400
	Box2D StructProperty; 	//[Offset: 0x0, Size: 20]
	Box2D StructProperty; 	//[Offset: 0x0, Size: 20]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetEquirectProps(structEquirectProps InScaleBiases); //Addr 0x75ee210094 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbb100
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690397180
	bool bLiveTexture; 	//[Offset: 0x0, Size: 1]
	bool bSupportsDepth; 	//[Offset: 0x0, Size: 1]
	bool bNoAlphaChannel; 	//[Offset: 0x0, Size: 1]
	Texture* Texture; 	//[Offset: 0x0, Size: 8]
	Texture* LeftTexture; 	//[Offset: 0x0, Size: 8]
	bool bQuadPreserveTextureRatio; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Box2D StructProperty; 	//[Offset: 0x0, Size: 20]
	float CylinderRadius; 	//[Offset: 0x0, Size: 4]
	float CylinderOverlayArc; 	//[Offset: 0x0, Size: 4]
	int CylinderHeight; 	//[Offset: 0x0, Size: 4]
	EquirectProps StructProperty; 	//[Offset: 0x0, Size: 72]
	enum EStereoLayerType StereoLayerType { //[Offset: 0x0, Size: 1]
		SLT_WorldLocked = 0
		SLT_TrackerLocked = 6e007500000000
		SLT_FaceLocked = 67006e00000000
		SLT_MAX = 6500000000
	};
	enum EStereoLayerShape StereoLayerShape { //[Offset: 0x0, Size: 1]
		SLSH_QuadLayer = 0
		SLSH_CylinderLayer = 68006500000000
		SLSH_CubemapLayer = 6e007500000000
		SLSH_EquirectLayer = 67006e00000000
		SLSH_MAX = 58004100000000
	};
	StereoLayerShape* Shape; 	//[Offset: 0x0, Size: 8]
	int Priority; 	//[Offset: 0x0, Size: 4]
	Void SetUVRect(structBox2D InUVRect); //Addr 0x75ee210690 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbe700
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690396f00
	Void ShowSplashScreen(); //Addr 0x75ee2110bc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbbe300
Class: StringTable.Object, Addr: 0x7690396c80
Class: SubsurfaceProfile.Object, Addr: 0x7690396a00
	SubsurfaceProfileStruct StructProperty; 	//[Offset: 0x0, Size: 140]
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690396780
	WorldSubsystem* GetWorldSubsystem(Object* ContextObject, classWorldSubsystem Class); //Addr 0x75ee215638 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abbbde00
Class: SubUVAnimation.Object, Addr: 0x7690396500
	Texture2D* SubUVTexture; 	//[Offset: 0x0, Size: 8]
	int SubImages_Horizontal; 	//[Offset: 0x0, Size: 4]
	int SubImages_Vertical; 	//[Offset: 0x0, Size: 4]
	enum ESubUVBoundingVertexCount BoundingMode { //[Offset: 0x0, Size: 1]
		BVC_FourVertices = 0
		BVC_EightVertices = 7500000000
		BVC_MAX = 0
	};
	enum EOpacitySourceMode OpacitySourceMode { //[Offset: 0x0, Size: 1]
		OSM_Alpha = 0
		OSM_ColorBrightness = 68006500000000
		OSM_RedChannel = 6e007500000000
		OSM_GreenChannel = 67006e00000000
		OSM_BlueChannel = 58004100000000
		OSM_MAX = 0
	};
	float AlphaThreshold; 	//[Offset: 0x0, Size: 4]
Class: TimecodeProvider.Object, Addr: 0x76901fc900
	float FrameDelay; 	//[Offset: 0x0, Size: 4]
	structTimecode GetTimecode(); //Addr 0x75ee21db7c [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac6f1d00
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object, Addr: 0x7690396280
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bGenerateFullFrame; 	//[Offset: 0x0, Size: 1]
	bool bUseHighPerformanceClock; 	//[Offset: 0x0, Size: 1]
Class: TargetPoint.Actor.Object, Addr: 0x7690396000
Class: TextPropertyTestObject.Object, Addr: 0x7690395d80
	FText DefaultedText; 	//[Offset: 0x0, Size: 24]
	FText UndefaultedText; 	//[Offset: 0x0, Size: 24]
	FText TransientText; 	//[Offset: 0x0, Size: 24]
Class: TextRenderActor.Actor.Object, Addr: 0x7690395b00
	TextRenderComponent* TextRender; 	//[Offset: 0x0, Size: 8]
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690395880
	FText Text; 	//[Offset: 0x0, Size: 24]
	MaterialInterface* TextMaterial; 	//[Offset: 0x0, Size: 8]
	Font* Font; 	//[Offset: 0x0, Size: 8]
	enum EHorizTextAligment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		EHTA_Left = 0
		EHTA_Center = 69007200000000
		EHTA_Right = 6e006500000000
		EHTA_MAX = 0
	};
	enum EVerticalTextAligment VerticalAlignment { //[Offset: 0x0, Size: 1]
		EVRTA_TextTop = 0
		EVRTA_TextCenter = 55006200000000
		EVRTA_TextBottom = 72006500000000
		EVRTA_QuadTop = 6500000000
		EVRTA_MAX = 0
	};
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float XScale; 	//[Offset: 0x0, Size: 4]
	float YScale; 	//[Offset: 0x0, Size: 4]
	float WorldSize; 	//[Offset: 0x0, Size: 4]
	float InvDefaultSize; 	//[Offset: 0x0, Size: 4]
	float HorizSpacingAdjust; 	//[Offset: 0x0, Size: 4]
	float VertSpacingAdjust; 	//[Offset: 0x0, Size: 4]
	bool bAlwaysRenderAsText; 	//[Offset: 0x0, Size: 1]
	Void SetYScale(float Value); //Addr 0x75ee216ed0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbd000
Class: Texture2DArray.Texture.StreamableRenderAsset.Object, Addr: 0x7690395600
	enum TextureAddress AddressX { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressY { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressZ { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object, Addr: 0x7690395380
	enum EPixelFormat Format { //[Offset: 0x0, Size: 1]
		PF_Unknown = 0
		PF_A32B32G32R32F = 0
		PF_B8G8R8A8 = 0
		PF_G8 = 0
		PF_G16 = 0
		PF_DXT1 = 0
		PF_DXT3 = 0
		PF_DXT5 = 0
		PF_UYVY = 0
		PF_FloatRGB = 0
		PF_FloatRGBA = 0
		PF_DepthStencil = 0
		PF_ShadowDepth = 0
		PF_R32_FLOAT = 0
		PF_G16R16 = 0
		PF_G16R16F = 0
		PF_G16R16F_FILTER = 0
		PF_G32R32F = 0
		PF_A2B10G10R10 = 0
		PF_A16B16G16R16 = 0
		PF_D24 = 0
		PF_R16F = 0
		PF_R16F_FILTER = 0
		PF_BC5 = 0
		PF_V8U8 = 0
		PF_A1 = 0
		PF_FloatR11G11B10 = 0
		PF_A8 = 0
		PF_R32_UINT = 0
		PF_R32_SINT = 0
		PF_PVRTC2 = 0
		PF_PVRTC4 = 0
		PF_R16_UINT = 0
		PF_R16_SINT = 0
		PF_R16G16B16A16_UINT = 0
		PF_R16G16B16A16_SINT = 0
		PF_R5G6B5_UNORM = 0
		PF_R8G8B8A8 = 0
		PF_A8R8G8B8 = 0
		PF_BC4 = 0
		PF_R8G8 = 0
		PF_ATC_RGB = 0
		PF_ATC_RGBA_E = 0
		PF_ATC_RGBA_I = 0
		PF_X24_G8 = 0
		PF_ETC1 = 0
		PF_ETC2_RGB = 0
		PF_ETC2_RGBA = 0
		PF_R32G32B32A32_UINT = 0
		PF_R16G16_UINT = 0
		PF_ASTC_4x4 = 0
		PF_ASTC_6x6 = 0
		PF_ASTC_8x8 = 0
		PF_ASTC_10x10 = 0
		PF_ASTC_12x12 = 0
		PF_BC6H = 0
		PF_BC7 = 0
		PF_R8_UINT = 0
		PF_L8 = 0
		PF_XGXR8 = 0
		PF_R8G8B8A8_UINT = 0
		PF_R8G8B8A8_SNORM = 0
		PF_R16G16B16A16_UNORM = 0
		PF_R16G16B16A16_SNORM = 0
		PF_PLATFORM_HDR = 1
		PF_PLATFORM_HDR = 2
		PF_PLATFORM_HDR = 3
		PF_NV12 = 0
		PF_R32G32_UINT = 0
		PF_ETC2_R11_EAC = 0
		PF_ETC2_RG11_EAC = 0
		PF_MAX = 0
	};
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x769039f600
	float Brightness; 	//[Offset: 0x0, Size: 4]
	float TextureMultiplier; 	//[Offset: 0x0, Size: 4]
Class: TextureMipDataProviderFactory.AssetUserData.Object, Addr: 0x769039f380
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x769039f100
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	int Slices; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EPixelFormat OverrideFormat { //[Offset: 0x0, Size: 1]
		PF_Unknown = 0
		PF_A32B32G32R32F = 0
		PF_B8G8R8A8 = 0
		PF_G8 = 0
		PF_G16 = 0
		PF_DXT1 = 0
		PF_DXT3 = 0
		PF_DXT5 = 0
		PF_UYVY = 0
		PF_FloatRGB = 0
		PF_FloatRGBA = 0
		PF_DepthStencil = 0
		PF_ShadowDepth = 0
		PF_R32_FLOAT = 0
		PF_G16R16 = 0
		PF_G16R16F = 0
		PF_G16R16F_FILTER = 0
		PF_G32R32F = 0
		PF_A2B10G10R10 = 0
		PF_A16B16G16R16 = 0
		PF_D24 = 0
		PF_R16F = 0
		PF_R16F_FILTER = 0
		PF_BC5 = 0
		PF_V8U8 = 0
		PF_A1 = 0
		PF_FloatR11G11B10 = 0
		PF_A8 = 0
		PF_R32_UINT = 0
		PF_R32_SINT = 0
		PF_PVRTC2 = 0
		PF_PVRTC4 = 0
		PF_R16_UINT = 0
		PF_R16_SINT = 0
		PF_R16G16B16A16_UINT = 0
		PF_R16G16B16A16_SINT = 0
		PF_R5G6B5_UNORM = 0
		PF_R8G8B8A8 = 0
		PF_A8R8G8B8 = 0
		PF_BC4 = 0
		PF_R8G8 = 0
		PF_ATC_RGB = 0
		PF_ATC_RGBA_E = 0
		PF_ATC_RGBA_I = 0
		PF_X24_G8 = 0
		PF_ETC1 = 0
		PF_ETC2_RGB = 0
		PF_ETC2_RGBA = 0
		PF_R32G32B32A32_UINT = 0
		PF_R16G16_UINT = 0
		PF_ASTC_4x4 = 0
		PF_ASTC_6x6 = 0
		PF_ASTC_8x8 = 0
		PF_ASTC_10x10 = 0
		PF_ASTC_12x12 = 0
		PF_BC6H = 0
		PF_BC7 = 0
		PF_R8_UINT = 0
		PF_L8 = 0
		PF_XGXR8 = 0
		PF_R8G8B8A8_UINT = 0
		PF_R8G8B8A8_SNORM = 0
		PF_R16G16B16A16_UNORM = 0
		PF_R16G16B16A16_SNORM = 0
		PF_PLATFORM_HDR = 1
		PF_PLATFORM_HDR = 2
		PF_PLATFORM_HDR = 3
		PF_NV12 = 0
		PF_R32G32_UINT = 0
		PF_ETC2_R11_EAC = 0
		PF_ETC2_RG11_EAC = 0
		PF_MAX = 0
	};
	bool bHDR; 	//[Offset: 0x0, Size: 1]
	bool bForceLinearGamma; 	//[Offset: 0x0, Size: 1]
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x769039ee80
	int SizeX; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EPixelFormat OverrideFormat { //[Offset: 0x0, Size: 1]
		PF_Unknown = 0
		PF_A32B32G32R32F = 0
		PF_B8G8R8A8 = 0
		PF_G8 = 0
		PF_G16 = 0
		PF_DXT1 = 0
		PF_DXT3 = 0
		PF_DXT5 = 0
		PF_UYVY = 0
		PF_FloatRGB = 0
		PF_FloatRGBA = 0
		PF_DepthStencil = 0
		PF_ShadowDepth = 0
		PF_R32_FLOAT = 0
		PF_G16R16 = 0
		PF_G16R16F = 0
		PF_G16R16F_FILTER = 0
		PF_G32R32F = 0
		PF_A2B10G10R10 = 0
		PF_A16B16G16R16 = 0
		PF_D24 = 0
		PF_R16F = 0
		PF_R16F_FILTER = 0
		PF_BC5 = 0
		PF_V8U8 = 0
		PF_A1 = 0
		PF_FloatR11G11B10 = 0
		PF_A8 = 0
		PF_R32_UINT = 0
		PF_R32_SINT = 0
		PF_PVRTC2 = 0
		PF_PVRTC4 = 0
		PF_R16_UINT = 0
		PF_R16_SINT = 0
		PF_R16G16B16A16_UINT = 0
		PF_R16G16B16A16_SINT = 0
		PF_R5G6B5_UNORM = 0
		PF_R8G8B8A8 = 0
		PF_A8R8G8B8 = 0
		PF_BC4 = 0
		PF_R8G8 = 0
		PF_ATC_RGB = 0
		PF_ATC_RGBA_E = 0
		PF_ATC_RGBA_I = 0
		PF_X24_G8 = 0
		PF_ETC1 = 0
		PF_ETC2_RGB = 0
		PF_ETC2_RGBA = 0
		PF_R32G32B32A32_UINT = 0
		PF_R16G16_UINT = 0
		PF_ASTC_4x4 = 0
		PF_ASTC_6x6 = 0
		PF_ASTC_8x8 = 0
		PF_ASTC_10x10 = 0
		PF_ASTC_12x12 = 0
		PF_BC6H = 0
		PF_BC7 = 0
		PF_R8_UINT = 0
		PF_L8 = 0
		PF_XGXR8 = 0
		PF_R8G8B8A8_UINT = 0
		PF_R8G8B8A8_SNORM = 0
		PF_R16G16B16A16_UNORM = 0
		PF_R16G16B16A16_SNORM = 0
		PF_PLATFORM_HDR = 1
		PF_PLATFORM_HDR = 2
		PF_PLATFORM_HDR = 3
		PF_NV12 = 0
		PF_R32G32_UINT = 0
		PF_ETC2_R11_EAC = 0
		PF_ETC2_RG11_EAC = 0
		PF_MAX = 0
	};
	bool bHDR; 	//[Offset: 0x0, Size: 1]
	enum ETextureRenderTargetFormat RenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	bool bAutoGenerateMips; 	//[Offset: 0x0, Size: 1]
	bool bForceLinearGamma; 	//[Offset: 0x0, Size: 1]
	Void SetSizeX(int InSizeX); //Addr 0x75ee21ce90 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbcf00
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object, Addr: 0x769039ec00
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	int SizeZ; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EPixelFormat OverrideFormat { //[Offset: 0x0, Size: 1]
		PF_Unknown = 0
		PF_A32B32G32R32F = 0
		PF_B8G8R8A8 = 0
		PF_G8 = 0
		PF_G16 = 0
		PF_DXT1 = 0
		PF_DXT3 = 0
		PF_DXT5 = 0
		PF_UYVY = 0
		PF_FloatRGB = 0
		PF_FloatRGBA = 0
		PF_DepthStencil = 0
		PF_ShadowDepth = 0
		PF_R32_FLOAT = 0
		PF_G16R16 = 0
		PF_G16R16F = 0
		PF_G16R16F_FILTER = 0
		PF_G32R32F = 0
		PF_A2B10G10R10 = 0
		PF_A16B16G16R16 = 0
		PF_D24 = 0
		PF_R16F = 0
		PF_R16F_FILTER = 0
		PF_BC5 = 0
		PF_V8U8 = 0
		PF_A1 = 0
		PF_FloatR11G11B10 = 0
		PF_A8 = 0
		PF_R32_UINT = 0
		PF_R32_SINT = 0
		PF_PVRTC2 = 0
		PF_PVRTC4 = 0
		PF_R16_UINT = 0
		PF_R16_SINT = 0
		PF_R16G16B16A16_UINT = 0
		PF_R16G16B16A16_SINT = 0
		PF_R5G6B5_UNORM = 0
		PF_R8G8B8A8 = 0
		PF_A8R8G8B8 = 0
		PF_BC4 = 0
		PF_R8G8 = 0
		PF_ATC_RGB = 0
		PF_ATC_RGBA_E = 0
		PF_ATC_RGBA_I = 0
		PF_X24_G8 = 0
		PF_ETC1 = 0
		PF_ETC2_RGB = 0
		PF_ETC2_RGBA = 0
		PF_R32G32B32A32_UINT = 0
		PF_R16G16_UINT = 0
		PF_ASTC_4x4 = 0
		PF_ASTC_6x6 = 0
		PF_ASTC_8x8 = 0
		PF_ASTC_10x10 = 0
		PF_ASTC_12x12 = 0
		PF_BC6H = 0
		PF_BC7 = 0
		PF_R8_UINT = 0
		PF_L8 = 0
		PF_XGXR8 = 0
		PF_R8G8B8A8_UINT = 0
		PF_R8G8B8A8_SNORM = 0
		PF_R16G16B16A16_UNORM = 0
		PF_R16G16B16A16_SNORM = 0
		PF_PLATFORM_HDR = 1
		PF_PLATFORM_HDR = 2
		PF_PLATFORM_HDR = 3
		PF_NV12 = 0
		PF_R32G32_UINT = 0
		PF_ETC2_R11_EAC = 0
		PF_ETC2_RG11_EAC = 0
		PF_MAX = 0
	};
	bool bHDR; 	//[Offset: 0x0, Size: 1]
	bool bForceLinearGamma; 	//[Offset: 0x0, Size: 1]
Class: ThumbnailInfo.Object, Addr: 0x769039e980
Class: TimelineComponent.ActorComponent.Object, Addr: 0x769039e700
	Timeline StructProperty; 	//[Offset: 0x43b7e, Size: 168]
	bool bIgnoreTimeDilation; 	//[Offset: 0x0, Size: 1]
	Void Stop(); //Addr 0x75ee21f2d8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbf100
Class: TimelineTemplate.Object, Addr: 0x769039e480
	float TimelineLength; 	//[Offset: 0x0, Size: 4]
	enum ETimelineLengthMode LengthMode { //[Offset: 0x0, Size: 1]
		TL_TimelineLength = 0
		TL_LastKeyFrame = 7500000000
		TL_MAX = 0
	};
	bool bAutoPlay; 	//[Offset: 0x0, Size: 1]
	bool bLoop; 	//[Offset: 0x0, Size: 1]
	bool bReplicated; 	//[Offset: 0x0, Size: 1]
	bool bIgnoreTimeDilation; 	//[Offset: 0x0, Size: 1]
	structTTEventTrack[] EventTracks; //[Offset: 0x0, Size: 16]
	structTTFloatTrack[] FloatTracks; //[Offset: 0x0, Size: 16]
	structTTVectorTrack[] VectorTracks; //[Offset: 0x0, Size: 16]
	structTTLinearColorTrack[] LinearColorTracks; //[Offset: 0x0, Size: 16]
	structBPVariableMetaDataEntry[] MetaDataArray; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	FName VariableName; 	//[Offset: 0x0, Size: 12]
	FName DirectionPropertyName; 	//[Offset: 0x0, Size: 12]
	FName UpdateFunctionName; 	//[Offset: 0x0, Size: 12]
	FName FinishedFunctionName; 	//[Offset: 0x0, Size: 12]
Class: TireType.DataAsset.Object, Addr: 0x769039e200
	float FrictionScale; 	//[Offset: 0x0, Size: 4]
Class: TouchInterface.Object, Addr: 0x769039df80
	structTouchInputControl[] Controls; //[Offset: 0x0, Size: 16]
	float ActiveOpacity; 	//[Offset: 0x0, Size: 4]
	float InactiveOpacity; 	//[Offset: 0x0, Size: 4]
	float TimeUntilDeactive; 	//[Offset: 0x0, Size: 4]
	float TimeUntilReset; 	//[Offset: 0x0, Size: 4]
	float ActivationDelay; 	//[Offset: 0x0, Size: 4]
	bool bPreventRecenter; 	//[Offset: 0x0, Size: 1]
	float StartupDelay; 	//[Offset: 0x0, Size: 4]
Class: TriggerBase.Actor.Object, Addr: 0x769039dd00
	ShapeComponent* CollisionComponent; 	//[Offset: 0x0, Size: 8]
Class: TriggerBox.TriggerBase.Actor.Object, Addr: 0x769039da80
Class: TriggerCapsule.TriggerBase.Actor.Object, Addr: 0x769039d800
Class: TriggerSphere.TriggerBase.Actor.Object, Addr: 0x769039d580
Class: TriggerVolume.Volume.Brush.Actor.Object, Addr: 0x769039d300
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object, Addr: 0x769039d080
	bool TwitterRequest(FString URL, constoutrefFString[] ParamKeysAndValues, RequestMethod(ByteProperty) RequestMethod, int AccountIndex); //Addr 0x75ee224b9c [Native] // UFieldProperty addr: 0x75abbbea00
Class: UserDefinedEnum.Enum.Field.Object, Addr: 0x769039ce00
	<FName, FText> DisplayNameMap; //[Offset: 0x0, Size: 80]
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object, Addr: 0x769039cb80
	enum EUserDefinedStructureStatus Status { //[Offset: 0x0, Size: 1]
		UDSS_UpToDate = 0
		UDSS_Dirty = 65005300000000
		UDSS_Error = 74007800000000
		UDSS_Duplicate = 77005400000000
		UDSS_MAX = 58004100000000
	};
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: UserInterfaceSettings.DeveloperSettings.Object, Addr: 0x769039c900
	enum ERenderFocusRule RenderFocusRule { //[Offset: 0x0, Size: 1]
		Always = 0
		NonPointer = 72006500000000
		NavigationOnly = 63007500000000
		Never = 6e000000000000
		ERenderFocusRule_MAX = 0
	};
	<HardwareCursors_Key(ByteProperty), structHardwareCursorReference> HardwareCursors; //[Offset: 0x0, Size: 80]
	<SoftwareCursors_Key(ByteProperty), structSoftClassPath> SoftwareCursors; //[Offset: 0x0, Size: 80]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	float ApplicationScale; 	//[Offset: 0x0, Size: 4]
	enum EUIScalingRule UIScaleRule { //[Offset: 0x0, Size: 1]
		ShortestSide = 0
		LongestSide = 43006c00000000
		Horizontal = 64006f00000000
		Vertical = 73007500000000
		ScaleToFit = 6e006f00000000
		Custom = 4d005f00000000
		EUIScalingRule_MAX = 0
	};
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	bool bAllowHighDPIInGameMode; 	//[Offset: 0x0, Size: 1]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bLoadWidgetsOnDedicatedServer; 	//[Offset: 0x0, Size: 1]
	Object*[] CursorClasses; //[Offset: 0x0, Size: 16]
	Object* CustomScalingRuleClassInstance; 	//[Offset: 0x0, Size: 8]
	DPICustomScalingRule* CustomScalingRule; 	//[Offset: 0x0, Size: 8]
Class: VectorField.Object, Addr: 0x769039c680
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	float Intensity; 	//[Offset: 0x0, Size: 4]
Class: VectorFieldAnimated.VectorField.Object, Addr: 0x769039c400
	Texture2D* Texture; 	//[Offset: 0x0, Size: 8]
	enum EVectorFieldConstructionOp ConstructionOp { //[Offset: 0x0, Size: 1]
		VFCO_Extrude = 0
		VFCO_Revolve = 52004500000000
		VFCO_MAX = 75005200000000
	};
	int VolumeSizeX; 	//[Offset: 0x0, Size: 4]
	int VolumeSizeY; 	//[Offset: 0x0, Size: 4]
	int VolumeSizeZ; 	//[Offset: 0x0, Size: 4]
	int SubImagesX; 	//[Offset: 0x0, Size: 4]
	int SubImagesY; 	//[Offset: 0x0, Size: 4]
	int FrameCount; 	//[Offset: 0x0, Size: 4]
	float FramesPerSecond; 	//[Offset: 0x0, Size: 4]
	bool bLoop; 	//[Offset: 0x0, Size: 1]
	VectorFieldStatic* NoiseField; 	//[Offset: 0x0, Size: 8]
	float NoiseScale; 	//[Offset: 0x0, Size: 4]
	float NoiseMax; 	//[Offset: 0x0, Size: 4]
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769039c180
	VectorField* VectorField; 	//[Offset: 0x0, Size: 8]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	float Tightness; 	//[Offset: 0x0, Size: 4]
	bool bPreviewVectorField; 	//[Offset: 0x0, Size: 1]
	Void SetIntensity(float NewIntensity); //Addr 0x75ee22654c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbbe900
Class: VectorFieldStatic.VectorField.Object, Addr: 0x769039bf00
	int SizeX; 	//[Offset: 0x0, Size: 4]
	int SizeY; 	//[Offset: 0x0, Size: 4]
	int SizeZ; 	//[Offset: 0x0, Size: 4]
	bool bAllowCPUAccess; 	//[Offset: 0x0, Size: 1]
Class: VectorFieldVolume.Actor.Object, Addr: 0x769039bc80
	VectorFieldComponent* VectorFieldComponent; 	//[Offset: 0x0, Size: 8]
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x769039ba00
	Void RemoveDisplayDelegate(constint IndexToRemove); //Addr 0x75ee226de4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf2000
Class: VirtualTexture.Object, Addr: 0x769039b780
Class: LightMapVirtualTexture.VirtualTexture.Object, Addr: 0x769039b500
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x769039b280
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object, Addr: 0x769039b000
	VirtualTextureBuildSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bContinuousUpdate; 	//[Offset: 0x0, Size: 1]
	bool bSinglePhysicalSpace; 	//[Offset: 0x0, Size: 1]
Class: VirtualTextureBuilder.Object, Addr: 0x769039ad80
	VirtualTexture2D* Texture; 	//[Offset: 0x0, Size: 8]
	uint64 BuildHash; 	//[Offset: 0x0, Size: 8]
Class: VirtualTexturePoolConfig.Object, Addr: 0x769039ab00
	int DefaultSizeInMegabyte; 	//[Offset: 0x0, Size: 4]
	structVirtualTextureSpacePoolConfig[] Pools; //[Offset: 0x0, Size: 16]
Class: VisualLoggerAutomationTests.Object, Addr: 0x769039a880
Class: VisualLoggerDebugSnapshotInterface.Interface.Object, Addr: 0x769039a600
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769039fd80
	Void RedirectVislog(Object* SourceOwner, Object* DestinationOwner); //Addr 0x75ee22d18c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf1a00
Class: VoiceChannel.Channel.Object, Addr: 0x769039fb00
Class: VOIPTalker.ActorComponent.Object, Addr: 0x769039f880
	VoiceSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	Void RegisterWithPlayerState(PlayerState* OwningState); //Addr 0x75ee22dbac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf1500
Class: VOIPStatics.BlueprintFunctionLibrary.Object, Addr: 0x76903a5100
	Void SetMicThreshold(float InThreshold); //Addr 0x75ee22e290 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf1400
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a4c00
	float LayerBottomAltitude; 	//[Offset: 0x0, Size: 4]
	float LayerHeight; 	//[Offset: 0x0, Size: 4]
	float TracingStartMaxDistance; 	//[Offset: 0x0, Size: 4]
	float TracingMaxDistance; 	//[Offset: 0x0, Size: 4]
	float PlanetRadius; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	bool bUsePerSampleAtmosphericLightTransmittance; 	//[Offset: 0x0, Size: 1]
	float SkyLightCloudBottomOcclusion; 	//[Offset: 0x0, Size: 4]
	float ViewSampleCountScale; 	//[Offset: 0x0, Size: 4]
	float ReflectionSampleCountScale; 	//[Offset: 0x0, Size: 4]
	float ShadowViewSampleCountScale; 	//[Offset: 0x0, Size: 4]
	float ShadowReflectionSampleCountScale; 	//[Offset: 0x0, Size: 4]
	float ShadowTracingDistance; 	//[Offset: 0x0, Size: 4]
	Void SetViewSampleCountScale(float NewValue); //Addr 0x75ee22edfc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf0600
Class: VolumetricCloud.Info.Actor.Object, Addr: 0x76903a4980
	VolumetricCloudComponent* VolumetricCloudComponent; 	//[Offset: 0x0, Size: 8]
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object, Addr: 0x76903a4700
	Int32Interval StructProperty; 	//[Offset: 0x0, Size: 8]
Class: WindDirectionalSource.Info.Actor.Object, Addr: 0x76903a4480
	WindDirectionalSourceComponent* Component; 	//[Offset: 0x0, Size: 8]
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a4200
	float Strength; 	//[Offset: 0x0, Size: 4]
	float Speed; 	//[Offset: 0x0, Size: 4]
	float MinGustAmount; 	//[Offset: 0x0, Size: 4]
	float MaxGustAmount; 	//[Offset: 0x0, Size: 4]
	float Radius; 	//[Offset: 0x0, Size: 4]
	bool bPointWind; 	//[Offset: 0x0, Size: 1]
	Void SetWindType(enum EWindSourceType InNewType); //Addr 0x75ee23029c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf4200
Class: World.Object, Addr: 0x76901e4200
	Level* PersistentLevel; 	//[Offset: 0x0, Size: 8]
	NetDriver* NetDriver; 	//[Offset: 0x0, Size: 8]
	LineBatchComponent* LineBatcher; 	//[Offset: 0x0, Size: 8]
	LineBatchComponent* PersistentLineBatcher; 	//[Offset: 0x0, Size: 8]
	LineBatchComponent* ForegroundLineBatcher; 	//[Offset: 0x0, Size: 8]
	GameNetworkManager* NetworkManager; 	//[Offset: 0x0, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandler; 	//[Offset: 0x0, Size: 8]
	Object*[] ExtraReferencedObjects; //[Offset: 0x0, Size: 16]
	Object*[] PerModuleDataObjects; //[Offset: 0x0, Size: 16]
	LevelStreaming*[] StreamingLevels; //[Offset: 0x0, Size: 16]
	StreamingLevelsToConsider StructProperty; 	//[Offset: 0x0, Size: 40]
	StrProperty StreamingLevelsPrefix; 	//[Offset: 0x0, Size: 16]
	Level* CurrentLevelPendingVisibility; 	//[Offset: 0x0, Size: 8]
	Level* CurrentLevelPendingInvisibility; 	//[Offset: 0x0, Size: 8]
	DemoNetDriver* DemoNetDriver; 	//[Offset: 0x0, Size: 8]
	ParticleEventManager* MyParticleEventManager; 	//[Offset: 0x0, Size: 8]
	PhysicsVolume* DefaultPhysicsVolume; 	//[Offset: 0x0, Size: 8]
	bool bAreConstraintsDirty; 	//[Offset: 0x0, Size: 1]
	NavigationSystemBase* NavigationSystem; 	//[Offset: 0x0, Size: 8]
	GameModeBase* AuthorityGameMode; 	//[Offset: 0x0, Size: 8]
	GameStateBase* GameState; 	//[Offset: 0x0, Size: 8]
	AISystemBase* AISystem; 	//[Offset: 0x0, Size: 8]
	AvoidanceManager* AvoidanceManager; 	//[Offset: 0x0, Size: 8]
	Level*[] Levels; //[Offset: 0x0, Size: 16]
	structLevelCollection[] LevelCollections; //[Offset: 0x0, Size: 16]
	GameInstance* OwningGameInstance; 	//[Offset: 0x0, Size: 8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances; //[Offset: 0x0, Size: 16]
	Canvas* CanvasForRenderingToTarget; 	//[Offset: 0x0, Size: 8]
	Canvas* CanvasForDrawMaterialToRenderTarget; 	//[Offset: 0x0, Size: 8]
	ActorComponent* ComponentsThatNeedPreEndOfFrameSync; //[Offset: 0x0, Size: 80]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate; //[Offset: 0x0, Size: 16]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread; //[Offset: 0x0, Size: 16]
	WorldComposition* WorldComposition; 	//[Offset: 0x0, Size: 8]
	WorldPSCPool StructProperty; 	//[Offset: 0x0, Size: 88]
	LevelPersistentResourceContainer* LevelPersistentResourceContainer; 	//[Offset: 0x0, Size: 8]
	WorldSettings* K2_GetWorldSettings(); //Addr 0x75ee231064 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf3d00
Class: LandscapeInfoMap.Object, Addr: 0x7690281780
Class: WorldComposition.Object, Addr: 0x76903a3f80
	LevelStreaming*[] TilesStreaming; //[Offset: 0x0, Size: 16]
	double TilesStreamingTimeThreshold; 	//[Offset: 0x0, Size: 8]
	bool bLoadAllTilesDuringCinematic; 	//[Offset: 0x0, Size: 1]
	bool bRebaseOriginIn3DSpace; 	//[Offset: 0x0, Size: 1]
	float LevelBoundsScale; 	//[Offset: 0x0, Size: 4]
	float RebaseOriginDistance; 	//[Offset: 0x0, Size: 4]
	bool bUseCustomStreamingRule; 	//[Offset: 0x0, Size: 1]
	<FName, structTileRouteInfo> RouteInfoMap; //[Offset: 0x0, Size: 80]
	delegate OnEvalCustomStreamingRule; 	//[Offset: 0x0, Size: 16]
	Void SetCurrentRouteId(int NewId); //Addr 0x75ee2316f8 [Final|Native] // UFieldProperty addr: 0x75abbf3b00
Class: HierarchicalLODSetup.Object, Addr: 0x76903a3d00
	structHierarchicalSimplification[] HierarchicalLODSetup; //[Offset: 0x0, Size: 16]
	MaterialInterface* OverrideBaseMaterial; 	//[Offset: 0x0, Size: 48]
Class: WorldSettings.Info.Actor.Object, Addr: 0x76903a3a80
	int VisibilityCellSize; 	//[Offset: 0x0, Size: 4]
	enum EVisibilityAggressiveness VisibilityAggressiveness { //[Offset: 0x0, Size: 1]
		VIS_LeastAggressive = 0
		VIS_ModeratelyAggressive = 69007300000000
		VIS_MostAggressive = 73006500000000
		VIS_Max = 6e000000000000
		VIS_Max = 0
	};
	bool bPrecomputeVisibility; 	//[Offset: 0x0, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks; 	//[Offset: 0x0, Size: 1]
	bool bEnableWorldBoundsChecks; 	//[Offset: 0x0, Size: 1]
	bool bEnableNavigationSystem; 	//[Offset: 0x0, Size: 1]
	bool bEnableAISystem; 	//[Offset: 0x0, Size: 1]
	bool bEnableWorldComposition; 	//[Offset: 0x0, Size: 1]
	bool bEnableCustomStreamingRule; 	//[Offset: 0x0, Size: 1]
	bool bEnableDropLightmapsWhenCooking; 	//[Offset: 0x0, Size: 1]
	bool bUseClientSideLevelStreamingVolumes; 	//[Offset: 0x0, Size: 1]
	bool bEnableWorldOriginRebasing; 	//[Offset: 0x0, Size: 1]
	bool bWorldGravitySet; 	//[Offset: 0x0, Size: 1]
	bool bGlobalGravitySet; 	//[Offset: 0x0, Size: 1]
	bool bMinimizeBSPSections; 	//[Offset: 0x0, Size: 1]
	bool bForceNoPrecomputedLighting; 	//[Offset: 0x0, Size: 1]
	bool bIgnorePrecomputedLighting; 	//[Offset: 0x0, Size: 1]
	bool bHighPriorityLoading; 	//[Offset: 0x0, Size: 1]
	bool bHighPriorityLoadingLocal; 	//[Offset: 0x0, Size: 1]
	bool bOverrideDefaultBroadphaseSettings; 	//[Offset: 0x0, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig; 	//[Offset: 0x0, Size: 8]
	NavigationSystemConfig* NavigationSystemConfigOverride; 	//[Offset: 0x0, Size: 8]
	float WorldToMeters; 	//[Offset: 0x0, Size: 4]
	float KillZ; 	//[Offset: 0x0, Size: 4]
	DamageType* KillZDamageType; 	//[Offset: 0x0, Size: 8]
	float WorldGravityZ; 	//[Offset: 0x43d8f, Size: 4]
	float GlobalGravityZ; 	//[Offset: 0x0, Size: 4]
	DefaultPhysicsVolume* DefaultPhysicsVolumeClass; 	//[Offset: 0x0, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandlerClass; 	//[Offset: 0x0, Size: 8]
	GameModeBase* DefaultGameMode; 	//[Offset: 0x0, Size: 8]
	GameNetworkManager* GameNetworkManagerClass; 	//[Offset: 0x0, Size: 8]
	int PackedLightAndShadowMapTextureSize; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance; 	//[Offset: 0x0, Size: 4]
	float GlobalDistanceFieldViewDistance; 	//[Offset: 0x0, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity; 	//[Offset: 0x0, Size: 4]
	bool bMobileEyeAdaptation; 	//[Offset: 0x0, Size: 1]
	float MobileEyeAdaptationExposureScaleFactor; 	//[Offset: 0x0, Size: 4]
	float MobileEyeAdaptationRadianceCenter; 	//[Offset: 0x0, Size: 4]
	float MobileEyeAdaptationViewDistance; 	//[Offset: 0x0, Size: 4]
	ReverbSettings StructProperty; 	//[Offset: 0x0, Size: 32]
	InteriorSettings StructProperty; 	//[Offset: 0x0, Size: 36]
	float MonoCullingDistance; 	//[Offset: 0x0, Size: 4]
	SoundMix* DefaultBaseSoundMix; 	//[Offset: 0x0, Size: 8]
	float timeDilation; 	//[Offset: 0x0, Size: 4]
	float MatineeTimeDilation; 	//[Offset: 0x0, Size: 4]
	float DemoPlayTimeDilation; 	//[Offset: 0x0, Size: 4]
	float MinGlobalTimeDilation; 	//[Offset: 0x0, Size: 4]
	float MaxGlobalTimeDilation; 	//[Offset: 0x0, Size: 4]
	float MinUndilatedFrameTime; 	//[Offset: 0x0, Size: 4]
	float MaxUndilatedFrameTime; 	//[Offset: 0x0, Size: 4]
	BroadphaseSettings StructProperty; 	//[Offset: 0x0, Size: 64]
	PlayerState* Pauser; 	//[Offset: 0x0, Size: 8]
	structNetViewer[] ReplicationViewers; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	PlayerState* PauserPlayerState; 	//[Offset: 0x0, Size: 8]
	int MaxNumberOfBookmarks; 	//[Offset: 0x0, Size: 4]
	BookmarkBase* DefaultBookmarkClass; 	//[Offset: 0x0, Size: 8]
	BookmarkBase*[] BookmarkArray; //[Offset: 0x0, Size: 16]
	BookmarkBase* LastBookmarkClass; 	//[Offset: 0x0, Size: 8]
	Void OnRep_WorldGravityZ(); //Addr 0x75ee235160 [Native] // UFieldProperty addr: 0x75abbf3a00
Class: DmgTypeBP_Environmental_C.DamageType.Object, Addr: 0x75aca66600
Class: EGOAudioManager.Object, Addr: 0x75a5275d80
	Void SetListener(AkComponent* InListenerComponent); //Addr 0x75eac3fb1c [Final|Native] // UFieldProperty addr: 0x75ac474900
Class: AkSettings.Object, Addr: 0x76901db280
	byte MaxSimultaneousReverbVolumes; //[Offset: 0x0, Size: 1]
	FilePath StructProperty; 	//[Offset: 0x0, Size: 16]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bAutoConnectToWAAPI; 	//[Offset: 0x0, Size: 1]
	enum ECollisionChannel DefaultOcclusionCollisionChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	enum ECollisionChannel DefaultFitToGeometryCollisionChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	<PhysicalMaterial*, structAkGeometrySurfacePropertiesToMap> AkGeometryMap; //[Offset: 0x0, Size: 80]
	float GlobalDecayAbsorption; 	//[Offset: 0x0, Size: 4]
	AkAuxBus* DefaultReverbAuxBus; 	//[Offset: 0x0, Size: 48]
	<float, AkAuxBus*> EnvironmentDecayAuxBusMap; //[Offset: 0x0, Size: 80]
	StrProperty HFDampingName; 	//[Offset: 0x0, Size: 16]
	StrProperty DecayEstimateName; 	//[Offset: 0x0, Size: 16]
	StrProperty TimeToFirstReflectionName; 	//[Offset: 0x0, Size: 16]
	AkRtpc* HFDampingRTPC; 	//[Offset: 0x0, Size: 48]
	AkRtpc* DecayEstimateRTPC; 	//[Offset: 0x0, Size: 48]
	AkRtpc* TimeToFirstReflectionRTPC; 	//[Offset: 0x0, Size: 48]
	AkAudioEvent* AudioInputEvent; 	//[Offset: 0x0, Size: 48]
	<structGuid, structAkAcousticTextureParams> AcousticTextureParamsMap; //[Offset: 0x0, Size: 80]
	bool SplitSwitchContainerMedia; 	//[Offset: 0x0, Size: 1]
	bool SplitMediaPerFolder; 	//[Offset: 0x0, Size: 1]
	bool UseEventBasedPackaging; 	//[Offset: 0x0, Size: 1]
	bool EnableAutomaticAssetSynchronization; 	//[Offset: 0x0, Size: 1]
	StrProperty CommandletCommitMessage; 	//[Offset: 0x0, Size: 16]
	<FString, FString> UnrealCultureToWwiseCulture; //[Offset: 0x0, Size: 80]
	bool AskedToUseNewAssetManagement; 	//[Offset: 0x0, Size: 1]
	bool bEnableMultiCoreRendering; 	//[Offset: 0x0, Size: 1]
	bool MigratedEnableMultiCoreRendering; 	//[Offset: 0x0, Size: 1]
	bool FixupRedirectorsDuringMigration; 	//[Offset: 0x0, Size: 1]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	FilePath StructProperty; 	//[Offset: 0x0, Size: 16]
Class: AkAndroidInitializationSettings.Object, Addr: 0x76901da380
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAndroidAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 56]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eaff1194 [Final|Native] // UFieldProperty addr: 0x75ac51fc00
Class: AngeliaSettings.Object, Addr: 0x76901f2e00
Class: NiagaraMergeable.Object, Addr: 0x7690234c00
Class: NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x7690231f00
	NiagaraPlatformSet StructProperty; 	//[Offset: 0x0, Size: 48]
	int SortOrderHint; 	//[Offset: 0x0, Size: 4]
	bool bIsEnabled; 	//[Offset: 0x0, Size: 1]
	bool bMotionBlurEnabled; 	//[Offset: 0x0, Size: 1]
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x769023d300
	bool bUseInverseSquaredFalloff; 	//[Offset: 0x0, Size: 1]
	bool bAffectsTranslucency; 	//[Offset: 0x0, Size: 1]
	float RadiusScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x7690244e80
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	enum ENiagaraRendererSourceDataMode SourceMode { //[Offset: 0x0, Size: 1]
		Particles = 0
		Emitter = 43007300000000
		ENiagaraRendererSourceDataMode_MAX = 0
	};
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	enum ENiagaraSpriteAlignment Alignment { //[Offset: 0x0, Size: 1]
		Unaligned = 0
		VelocityAligned = 61006900000000
		CustomAlignment = 6c004100000000
		ENiagaraSpriteAlignment_MAX = 20006e00000000
	};
	enum ENiagaraSpriteFacingMode FacingMode { //[Offset: 0x0, Size: 1]
		FaceCamera = 0
		FaceCameraPlane = 64006e00000000
		CustomFacingVector = 4e004500000000
		FaceCameraPosition = 65006c00000000
		FaceCameraDistanceBlend = 79005400000000
		ENiagaraSpriteFacingMode_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	enum ENiagaraSortMode SortMode { //[Offset: 0x0, Size: 1]
		None = 0
		ViewDepth = 6e006f00000000
		ViewDistance = 65007400000000
		CustomAscending = 6c006100000000
		CustomDecending = 4d005f00000000
		ENiagaraSortMode_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bSubImageBlend; 	//[Offset: 0x0, Size: 1]
	bool bRemoveHMDRollInVR; 	//[Offset: 0x0, Size: 1]
	bool bSortOnlyWhenTranslucent; 	//[Offset: 0x0, Size: 1]
	bool bGpuLowLatencyTranslucency; 	//[Offset: 0x0, Size: 1]
	float MinFacingCameraBlendDistance; 	//[Offset: 0x0, Size: 4]
	float MaxFacingCameraBlendDistance; 	//[Offset: 0x0, Size: 4]
	bool bEnableCameraDistanceCulling; 	//[Offset: 0x0, Size: 1]
	float MinCameraDistance; 	//[Offset: 0x0, Size: 4]
	float MaxCameraDistance; 	//[Offset: 0x0, Size: 4]
	uint32 RendererVisibility; 	//[Offset: 0x0, Size: 4]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	structNiagaraMaterialAttributeBinding[] MaterialParameterBindings; //[Offset: 0x0, Size: 16]
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x769023ab00
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	enum ENiagaraRibbonFacingMode FacingMode { //[Offset: 0x0, Size: 1]
		Screen = 0
		Custom = 66006600000000
		CustomSideVector = 61006300000000
		ENiagaraRibbonFacingMode_MAX = 0
	};
	NiagaraRibbonUVSettings StructProperty; 	//[Offset: 0x0, Size: 36]
	NiagaraRibbonUVSettings StructProperty; 	//[Offset: 0x0, Size: 36]
	enum ENiagaraRibbonDrawDirection DrawDirection { //[Offset: 0x0, Size: 1]
		FrontToBack = 0
		BackToFront = 41004d00000000
		ENiagaraRibbonDrawDirection_MAX = 0
	};
	float CurveTension; 	//[Offset: 0x0, Size: 4]
	enum ENiagaraRibbonTessellationMode TessellationMode { //[Offset: 0x0, Size: 1]
		Automatic = 0
		Custom = 65006700000000
		Disabled = 64006500000000
		ENiagaraRibbonTessellationMode_MAX = 0
	};
	int TessellationFactor; 	//[Offset: 0x0, Size: 4]
	bool bUseConstantFactor; 	//[Offset: 0x0, Size: 1]
	float TessellationAngle; 	//[Offset: 0x0, Size: 4]
	bool bScreenSpaceTessellation; 	//[Offset: 0x0, Size: 1]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x769023d080
	structNiagaraMeshRendererMeshProperties[] Meshes; //[Offset: 0x0, Size: 16]
	enum ENiagaraSortMode SortMode { //[Offset: 0x0, Size: 1]
		None = 0
		ViewDepth = 6e006f00000000
		ViewDistance = 65007400000000
		CustomAscending = 6c006100000000
		CustomDecending = 4d005f00000000
		ENiagaraSortMode_MAX = 0
	};
	bool bOverrideMaterials; 	//[Offset: 0x0, Size: 1]
	bool bSortOnlyWhenTranslucent; 	//[Offset: 0x0, Size: 1]
	bool bSubImageBlend; 	//[Offset: 0x0, Size: 1]
	bool bEnableFrustumCulling; 	//[Offset: 0x0, Size: 1]
	bool bEnableCameraDistanceCulling; 	//[Offset: 0x0, Size: 1]
	bool bEnableMeshFlipbook; 	//[Offset: 0x0, Size: 1]
	structNiagaraMeshMaterialOverride[] OverrideMaterials; //[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	enum ENiagaraMeshFacingMode FacingMode { //[Offset: 0x0, Size: 1]
		Default = 0
		Velocity = 61006900000000
		CameraPosition = 6f007600000000
		CameraPlane = 65006300000000
		ENiagaraMeshFacingMode_MAX = 0
	};
	bool bLockedAxisEnable; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ENiagaraMeshLockedAxisSpace LockedAxisSpace { //[Offset: 0x0, Size: 1]
		Simulation = 0
		World = 61006900000000
		Local = 65006400000000
		ENiagaraMeshLockedAxisSpace_MAX = 0
	};
	float MinCameraDistance; 	//[Offset: 0x0, Size: 4]
	float MaxCameraDistance; 	//[Offset: 0x0, Size: 4]
	uint32 RendererVisibility; 	//[Offset: 0x0, Size: 4]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	structNiagaraMaterialAttributeBinding[] MaterialParameterBindings; //[Offset: 0x0, Size: 16]
	StaticMesh* ParticleMesh; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ENiagaraMeshPivotOffsetSpace PivotOffsetSpace { //[Offset: 0x0, Size: 1]
		Mesh = 0
		Simulation = 61006900000000
		World = 6f007600000000
		Local = 65006300000000
		ENiagaraMeshPivotOffsetSpace_MAX = 0
	};
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object, Addr: 0x7690232180
	SceneComponent* ComponentType; 	//[Offset: 0x0, Size: 8]
	uint32 ComponentCountLimit; 	//[Offset: 0x0, Size: 4]
	NiagaraVariableAttributeBinding StructProperty; 	//[Offset: 0x0, Size: 88]
	bool bAssignComponentsOnParticleID; 	//[Offset: 0x0, Size: 1]
	bool bOnlyCreateComponentsOnParticleSpawn; 	//[Offset: 0x0, Size: 1]
	SceneComponent* TemplateComponent; 	//[Offset: 0x0, Size: 8]
	structNiagaraComponentPropertyBinding[] PropertyBindings; //[Offset: 0x0, Size: 16]
Class: WebBrowserAssetManager.Object, Addr: 0x7690242180
	Material* DefaultMaterial; 	//[Offset: 0x0, Size: 48]
Class: MediaTexture.Texture.StreamableRenderAsset.Object, Addr: 0x769028e480
	enum TextureAddress AddressX { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	enum TextureAddress AddressY { //[Offset: 0x0, Size: 1]
		TA_Wrap = 0
		TA_Clamp = 74007800000000
		TA_Mirror = 69007300000000
		TA_MAX = 6e007500000000
	};
	bool AutoClear; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool EnableGenMips; 	//[Offset: 0x0, Size: 1]
	byte NumMips; //[Offset: 0x0, Size: 1]
	bool NewStyleOutput; 	//[Offset: 0x0, Size: 1]
	enum MediaTextureOutputFormat OutputFormat { //[Offset: 0x0, Size: 1]
		MTOF_Default = 0
		MTOF_SRGB_LINOUT = 2f007300000000
		MTOF_MAX = 43006400000000
	};
	float CurrentAspectRatio; 	//[Offset: 0x0, Size: 4]
	enum MediaTextureOrientation CurrentOrientation { //[Offset: 0x0, Size: 1]
		MTORI_Original = 0
		MTORI_CW90 = 2f007300000000
		MTORI_CW180 = 65007200000000
		MTORI_CW270 = 6e00000000
		MTORI_MAX = 0
	};
	MediaPlayer* MediaPlayer; 	//[Offset: 0x0, Size: 8]
	Void SetMediaPlayer(MediaPlayer* NewMediaPlayer); //Addr 0x75ed1004f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac098900
Class: RichtapController.Object, Addr: 0x7690240380
Class: RichtapManager.Object, Addr: 0x769024a380
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Void RichtapUpdateLoopParam(int Amplitude, int Interval, int Frequency); //Addr 0x75eba687a0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb2900
Class: LiveLinkVirtualSubjectSourceSettings.LiveLinkSourceSettings.Object, Addr: 0x76901fc180
	FName SourceName; 	//[Offset: 0x0, Size: 12]
Class: LiveLinkSourceSettings.Object, Addr: 0x76901fd800
	enum ELiveLinkSourceMode mode { //[Offset: 0x0, Size: 1]
		Latest = 0
		EngineTime = 65006a00000000
		Timecode = 41004d00000000
		ELiveLinkSourceMode_MAX = 0
	};
	LiveLinkSourceBufferManagementSettings StructProperty; 	//[Offset: 0x0, Size: 88]
	StrProperty ConnectionString; 	//[Offset: 0x0, Size: 16]
	LiveLinkSourceFactory* Factory; 	//[Offset: 0x0, Size: 8]
Class: LiveLinkSettings.Object, Addr: 0x76901fce00
	structLiveLinkRoleProjectSetting[] DefaultRoleSettings; //[Offset: 0x0, Size: 16]
	LiveLinkFrameInterpolationProcessor* FrameInterpolationProcessor; 	//[Offset: 0x0, Size: 8]
	LiveLinkPreset* DefaultLiveLinkPreset; 	//[Offset: 0x0, Size: 48]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	float ClockOffsetCorrectionStep; 	//[Offset: 0x0, Size: 4]
	enum ELiveLinkSourceMode DefaultMessageBusSourceMode { //[Offset: 0x0, Size: 1]
		Latest = 0
		EngineTime = 65006a00000000
		Timecode = 41004d00000000
		ELiveLinkSourceMode_MAX = 0
	};
	double MessageBusPingRequestFrequency; 	//[Offset: 0x0, Size: 8]
	double MessageBusHeartbeatFrequency; 	//[Offset: 0x0, Size: 8]
	double MessageBusHeartbeatTimeout; 	//[Offset: 0x0, Size: 8]
	double MessageBusTimeBeforeRemovingInactiveSource; 	//[Offset: 0x0, Size: 8]
	double TimeWithoutFrameToBeConsiderAsInvalid; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	byte TextSizeSource; //[Offset: 0x0, Size: 1]
	byte TextSizeSubject; //[Offset: 0x0, Size: 1]
Class: LocationServicesAndroidImpl.LocationServicesImpl.Object, Addr: 0x7690243080
Class: LocationServicesImpl.Object, Addr: 0x7690242e00
	delegate OnLocationChanged; 	//[Offset: 0x0, Size: 16]
Class: AndroidPermissionCallbackProxy.Object, Addr: 0x7690242900
	delegate OnPermissionsGrantedDynamicDelegate; 	//[Offset: 0x0, Size: 16]
Class: BpCallLuaObj.BlueprintFunctionLibrary.Object, Addr: 0x75a5279700
	Void Call_7(Object* Ins, FString FunctionName, constoutrefstructVector Param1, constoutrefstructVector Param2, constoutrefstructVector Param3, constoutrefstructVector Param4, constoutrefstructVector Param5, constoutrefstructVector Param6, constoutrefstructVector Param7, outstructVector Return1, outstructVector Return2, outstructVector Return3, outstructVector Return4, outstructVector Return5, outstructVector Return6, outstructVector Return7); //Addr 0x75eab14e2c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75b0ea9400
Class: HttpActor.Actor.Object, Addr: 0x75a5279c00
	FString UrlEncode(FString Content); //Addr 0x75eab17764 [Final|Native] // UFieldProperty addr: 0x75b0ea9000
Class: LuaActor.Pawn.Actor.Object, Addr: 0x75a527a100
Class: LuaArrayHelper.Object, Addr: 0x75a5270100
	int Table(constoutrefstructlua_State LuaState); //Addr 0x75eab18500 [Final|Native] // UFieldProperty addr: 0x75b0eaaa00
Class: LuaAsyncLoader.Object, Addr: 0x75a5270380
	delegate CompleteDelegate; 	//[Offset: 0x0, Size: 16]
	delegate SpawnActorDelegate; 	//[Offset: 0x0, Size: 16]
	Void FlushIncrementalSpawnActors(); //Addr 0x75eab19a44 [Final|Native] // UFieldProperty addr: 0x75b0eaa700
Class: LuaDelegate.Object, Addr: 0x75a5270600
	Void Remove(int R); //Addr 0x75eab1a8ac [Final|Native] // UFieldProperty addr: 0x75b0eae400
Class: LuaEngine.BlueprintFunctionLibrary.Object, Addr: 0x75a5270880
	Void SetRunningState(structlua_State State, structlua_Index Index); //Addr 0x75eab1bb0c [Final|Native|Static] // UFieldProperty addr: 0x75b0eae200
Class: LuaGameInstance.GameInstance.Object, Addr: 0x75a5270b00
	delegate EventPreWorldBeginPlay; 	//[Offset: 0x0, Size: 16]
	delegate EventLoadMapComplete; 	//[Offset: 0x0, Size: 16]
	RaceNetwork* Network; 	//[Offset: 0x0, Size: 8]
	RaceLoadingMgr* LoadingMgr; 	//[Offset: 0x0, Size: 8]
	Void UpdateUploadTimer(double Interval); //Addr 0x75eab1c714 [Final|Native] // UFieldProperty addr: 0x7616eead00
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object, Addr: 0x75a5271a00
Class: LuaGeneratedClass.Class.Struct.Field.Object, Addr: 0x75a5271780
Class: LuaHelper.BlueprintFunctionLibrary.Object, Addr: 0x75a5271f00
	Void YiFanSetUnrealShotFlag(bool flag); //Addr 0x75eab1eb10 [Final|Native|Static] // UFieldProperty addr: 0x75ac40f900
Class: LuaLowLevelInputSystem.Object, Addr: 0x75a5272180
	delegate KeyEventDelegate; 	//[Offset: 0x0, Size: 16]
	delegate AnalogInputEventDelegate; 	//[Offset: 0x0, Size: 16]
	delegate PointerEventDelegate; 	//[Offset: 0x0, Size: 16]
	Void Init(); //Addr 0x75eab3361c [Final|Native] // UFieldProperty addr: 0x75ac40f400
Class: LuaMapHelper.Object, Addr: 0x75a5272400
	int Table(constoutrefstructlua_State LuaState); //Addr 0x75eab33e08 [Final|Native] // UFieldProperty addr: 0x75ac40ed00
Class: LuaPhotoPicker.Object, Addr: 0x75a5273080
	delegate PhotoPickDelegate; 	//[Offset: 0x0, Size: 16]
	structVector2D GetTextureSizeFromFile(FString FilePath); //Addr 0x75eab350c4 [Final|Native|Static] // UFieldProperty addr: 0x75ac432000
Class: LuaPlayerController.PlayerController.Controller.Actor.Object, Addr: 0x75a5273580
	InputComponent* GetInputComponent(); //Addr 0x75eab35d28 [Final|Native] // UFieldProperty addr: 0x75ac43c600
Class: LuaPluginPvPSettings.Object, Addr: 0x75a5273f80
	float NetworkDelayMin; 	//[Offset: 0x0, Size: 4]
	float NetworkDelayRandom; 	//[Offset: 0x0, Size: 4]
	float OtherNetworkDelayMin; 	//[Offset: 0x0, Size: 4]
	float OtherNetworkDelayRandom; 	//[Offset: 0x0, Size: 4]
	float VelocityDiffOrigin; 	//[Offset: 0x0, Size: 4]
	float VelocityDiff; 	//[Offset: 0x0, Size: 4]
	float PositionDiffOrigin; 	//[Offset: 0x0, Size: 4]
	float PositionDiff; 	//[Offset: 0x0, Size: 4]
	float PositionDiffBelendSrc; 	//[Offset: 0x0, Size: 4]
	float PositionDiffBelendDst; 	//[Offset: 0x0, Size: 4]
	float AngularVelocityOrigin; 	//[Offset: 0x0, Size: 4]
	float AngularVelocityDiff; 	//[Offset: 0x0, Size: 4]
	float AngularOrientationOrigin; 	//[Offset: 0x0, Size: 4]
	float AngularVelocityOrientationDiff; 	//[Offset: 0x0, Size: 4]
	float ArcSpeedThreshold; 	//[Offset: 0x0, Size: 4]
	float ArcSlipAngleThreshold; 	//[Offset: 0x0, Size: 4]
	float ArcYawThreshold; 	//[Offset: 0x0, Size: 4]
	float ArcExitSlipAngleThreshold; 	//[Offset: 0x0, Size: 4]
	int StrightAccelerationCapacity; 	//[Offset: 0x0, Size: 4]
	int DriftAccelerationCapacity; 	//[Offset: 0x0, Size: 4]
	int AngularAccelerationCapacity; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float ArcVelocityDiffOrigin; 	//[Offset: 0x0, Size: 4]
	float ArcVelocityDiff; 	//[Offset: 0x0, Size: 4]
	float ArcPositionDiffOrigin; 	//[Offset: 0x0, Size: 4]
	float ArcPositionDiff; 	//[Offset: 0x0, Size: 4]
	float ArcPositionDiffBelendSrc; 	//[Offset: 0x0, Size: 4]
	float ArcPositionDiffBelendDst; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float MaxPredictTime; 	//[Offset: 0x0, Size: 4]
	float MaxForwardAcceleration; 	//[Offset: 0x0, Size: 4]
	float MaxSideAcceleration; 	//[Offset: 0x0, Size: 4]
	float MaxAngularAcceleration; 	//[Offset: 0x0, Size: 4]
	float MaxAngularVelocity; 	//[Offset: 0x0, Size: 4]
	float SimpleDamper; 	//[Offset: 0x0, Size: 4]
	float SimpleSpring; 	//[Offset: 0x0, Size: 4]
	float ImpulseThreshold; 	//[Offset: 0x0, Size: 4]
	float ExitCollisionTime; 	//[Offset: 0x0, Size: 4]
	float ExitCarCollisionTime; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	bool UseArcPredict; 	//[Offset: 0x0, Size: 1]
	bool UseLinearAccelaration; 	//[Offset: 0x0, Size: 1]
	bool UseAngularAccelaration; 	//[Offset: 0x0, Size: 1]
	bool PredictOrientation; 	//[Offset: 0x0, Size: 1]
	bool StableSync; 	//[Offset: 0x0, Size: 1]
	bool LagOffset; 	//[Offset: 0x0, Size: 1]
	bool FixCar; 	//[Offset: 0x0, Size: 1]
	bool PlayerGhost; 	//[Offset: 0x0, Size: 1]
	bool DrawDebugLine; 	//[Offset: 0x0, Size: 1]
	bool LogFile; 	//[Offset: 0x0, Size: 1]
	bool DebugAcceleration; 	//[Offset: 0x0, Size: 1]
	bool DebugAngularAcceleration; 	//[Offset: 0x0, Size: 1]
	bool NetworkCarCollideWithEachOther; 	//[Offset: 0x0, Size: 1]
	bool DrawPositionGreen; 	//[Offset: 0x0, Size: 1]
	bool DrawRunYellow; 	//[Offset: 0x0, Size: 1]
	bool DrawPredictBlue; 	//[Offset: 0x0, Size: 1]
	bool DrawArcLine; 	//[Offset: 0x0, Size: 1]
	bool DrawAngular; 	//[Offset: 0x0, Size: 1]
	bool DrawAngularAcceleration; 	//[Offset: 0x0, Size: 1]
	float MaxTimeOffset; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float TimeOffsetCloseRatio; 	//[Offset: 0x0, Size: 4]
	float ServerTimeCloseRatio; 	//[Offset: 0x0, Size: 4]
	float DotBase; 	//[Offset: 0x0, Size: 4]
Class: LuaScript.Object, Addr: 0x75a5273300
	StrProperty Code; 	//[Offset: 0x0, Size: 16]
	StrProperty ImportPath; 	//[Offset: 0x0, Size: 16]
Class: LuaSetHelper.Object, Addr: 0x75a5274e80
	int Table(constoutrefstructlua_State LuaState); //Addr 0x75eab372ec [Final|Native] // UFieldProperty addr: 0x75ac43bf00
Class: LuaStructHelper.Object, Addr: 0x75a5274200
Class: LuaTimerActor.Actor.Object, Addr: 0x75a5274480
	Void Stop(); //Addr 0x75eab388e0 [Final|Native] // UFieldProperty addr: 0x75ac43b400
Class: RaceLoadingMgr.Object, Addr: 0x75a5274700
	StrProperty ConnectionName; 	//[Offset: 0x0, Size: 16]
	int SendProgressProtoName; 	//[Offset: 0x0, Size: 4]
	int ReceiveProgressProtoName; 	//[Offset: 0x0, Size: 4]
	delegate EventPreLoadMap; 	//[Offset: 0x0, Size: 16]
	float Tick(float DeltaTime); //Addr 0x75eab39edc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x7616eebb00
Class: RaceNetwork.Object, Addr: 0x75a5274980
	Void RemoveConnection(FString Name); //Addr 0x75eab3aa08 [Final|Native] // UFieldProperty addr: 0x75ac43b300
Class: RacePvPBridge.Object, Addr: 0x75a5274c00
	StrProperty ConnectionName; 	//[Offset: 0x0, Size: 16]
	World* WorldPtr; 	//[Offset: 0x0, Size: 8]
	int SyncSendProtoId; 	//[Offset: 0x0, Size: 4]
	int SyncReceiveProtoId; 	//[Offset: 0x0, Size: 4]
	int ResetSendProtoId; 	//[Offset: 0x0, Size: 4]
	int ResetReceiveProtoId; 	//[Offset: 0x0, Size: 4]
	int AdjustTimeReceiveProtoId; 	//[Offset: 0x0, Size: 4]
	int AdjustTimeSendProtoId; 	//[Offset: 0x0, Size: 4]
	int PlayerProgress; 	//[Offset: 0x0, Size: 4]
	int SafeSendCount; 	//[Offset: 0x0, Size: 4]
	bool DebugPVP; 	//[Offset: 0x0, Size: 1]
	int DebugFrameCount; 	//[Offset: 0x0, Size: 4]
	bool DebugLag; 	//[Offset: 0x0, Size: 1]
	double DebugLagInterval; 	//[Offset: 0x0, Size: 8]
	double DebugLagCurrentTime; 	//[Offset: 0x0, Size: 8]
	float AdjustTimeInterval; 	//[Offset: 0x0, Size: 4]
	float PingErrorThreshold; 	//[Offset: 0x0, Size: 4]
	int PingErrorCount; 	//[Offset: 0x0, Size: 4]
	bool bUseNewTime; 	//[Offset: 0x0, Size: 1]
	<int, structVector> PredictPosition; //[Offset: 0x0, Size: 80]
	<int, structVector> PredictVelocity; //[Offset: 0x0, Size: 80]
	LuaPluginPvPSettings* PvPSettings; 	//[Offset: 0x0, Size: 8]
	Void UnRegisterCar(EGOWheeledVehicle* Vehicle); //Addr 0x75eab3bf58 [Final|Native] // UFieldProperty addr: 0x75ac43de00
Class: RUI.Object, Addr: 0x75a5275100
	MaterialTextureParameterWidget*[] MaterialTextureWidgets; //[Offset: 0x0, Size: 16]
	delegate EventScreenResize; 	//[Offset: 0x0, Size: 16]
	delegate EventWindowMinimized; 	//[Offset: 0x0, Size: 16]
	delegate EventPointerDown; 	//[Offset: 0x0, Size: 16]
	delegate EventPointerUp; 	//[Offset: 0x0, Size: 16]
	delegate EventPointerMove; 	//[Offset: 0x0, Size: 16]
	delegate EventInputLog; 	//[Offset: 0x0, Size: 16]
	Void UpdatePanelText(UserWidget* UserWidget); //Addr 0x75eab3d7b8 [Final|Native] // UFieldProperty addr: 0x75b1311d00
Class: UIImageLoader.Actor.Object, Addr: 0x75a6ddf880
	Void SetPaperSpriteToImage(Image* Image, PaperSprite* PaperSprite); //Addr 0x75eab42a44 [Final|Native] // UFieldProperty addr: 0x75ac43db00
Class: DummyForLink.Actor.Object, Addr: 0x75a5271c80
	Void NothingForlink(); //Addr 0x75eab6b0e8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac43da00
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x75a5279200
	bool bDeprecatedSpringOffsetMode; 	//[Offset: 0x0, Size: 1]
	bool bReverseAsBrake; 	//[Offset: 0x0, Size: 1]
	bool bUseRVOAvoidance; 	//[Offset: 0x0, Size: 1]
	bool bRawHandbrakeInput; 	//[Offset: 0x0, Size: 1]
	bool bRawGearUpInput; 	//[Offset: 0x0, Size: 1]
	bool bRawGearDownInput; 	//[Offset: 0x0, Size: 1]
	bool bWasAvoidanceUpdated; 	//[Offset: 0x0, Size: 1]
	float Mass; 	//[Offset: 0x0, Size: 4]
	structWheelSetup[] WheelSetups; //[Offset: 0x0, Size: 16]
	float DragCoefficient; 	//[Offset: 0x0, Size: 4]
	float ChassisWidth; 	//[Offset: 0x0, Size: 4]
	float ChassisHeight; 	//[Offset: 0x0, Size: 4]
	float DragArea; 	//[Offset: 0x0, Size: 4]
	float EstimatedMaxEngineSpeed; 	//[Offset: 0x0, Size: 4]
	float MaxEngineRPM; 	//[Offset: 0x0, Size: 4]
	float DebugDragMagnitude; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float MinNormalizedTireLoad; 	//[Offset: 0x0, Size: 4]
	float MinNormalizedTireLoadFiltered; 	//[Offset: 0x0, Size: 4]
	float MaxNormalizedTireLoad; 	//[Offset: 0x0, Size: 4]
	float MaxNormalizedTireLoadFiltered; 	//[Offset: 0x0, Size: 4]
	float ThresholdLongitudinalSpeed; 	//[Offset: 0x0, Size: 4]
	int LowForwardSpeedSubStepCount; 	//[Offset: 0x0, Size: 4]
	int HighForwardSpeedSubStepCount; 	//[Offset: 0x0, Size: 4]
	VehicleWheel*[] Wheels; //[Offset: 0x0, Size: 16]
	float RVOAvoidanceRadius; 	//[Offset: 0x0, Size: 4]
	float RVOAvoidanceHeight; 	//[Offset: 0x0, Size: 4]
	float AvoidanceConsiderationRadius; 	//[Offset: 0x0, Size: 4]
	float RVOSteeringStep; 	//[Offset: 0x0, Size: 4]
	float RVOThrottleStep; 	//[Offset: 0x0, Size: 4]
	int AvoidanceUID; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	NavAvoidanceMask StructProperty; 	//[Offset: 0x0, Size: 4]
	float AvoidanceWeight; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	ReplicatedVehicleState StructProperty; 	//[Offset: 0x0, Size: 20]
	float RawSteeringInput; 	//[Offset: 0x0, Size: 4]
	float RawThrottleInput; 	//[Offset: 0x0, Size: 4]
	float RawBrakeInput; 	//[Offset: 0x0, Size: 4]
	float SteeringInput; 	//[Offset: 0x0, Size: 4]
	float ThrottleInput; 	//[Offset: 0x0, Size: 4]
	float BrakeInput; 	//[Offset: 0x0, Size: 4]
	float HandbrakeInput; 	//[Offset: 0x0, Size: 4]
	float IdleBrakeInput; 	//[Offset: 0x0, Size: 4]
	float StopThreshold; 	//[Offset: 0x0, Size: 4]
	float WrongDirectionThreshold; 	//[Offset: 0x0, Size: 4]
	VehicleInputRate StructProperty; 	//[Offset: 0x0, Size: 8]
	VehicleInputRate StructProperty; 	//[Offset: 0x0, Size: 8]
	VehicleInputRate StructProperty; 	//[Offset: 0x0, Size: 8]
	VehicleInputRate StructProperty; 	//[Offset: 0x0, Size: 8]
	Controller* OverrideController; 	//[Offset: 0x0, Size: 8]
	Void SetUseAutoGears(bool bUseAuto); //Addr 0x75eabbc1c8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac43ef00
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x75a5279480
	Void SetSteerAngle(float SteerAngle, int WheelIndex); //Addr 0x75eabb9df8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac43ec00
Class: TireConfig.DataAsset.Object, Addr: 0x75a5278580
	float FrictionScale; 	//[Offset: 0x0, Size: 4]
	structTireConfigMaterialFriction[] TireFrictionScales; //[Offset: 0x0, Size: 16]
Class: VehicleAnimInstance.AnimInstance.Object, Addr: 0x75a5278080
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent; 	//[Offset: 0x0, Size: 8]
	WheeledVehicle* GetVehicle(); //Addr 0x75eabbaa24 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac475700
Class: VehicleWheel.Object, Addr: 0x75a5273d00
	StaticMesh* CollisionMesh; 	//[Offset: 0x0, Size: 8]
	bool bDontCreateShape; 	//[Offset: 0x0, Size: 1]
	bool bAutoAdjustCollisionSize; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ShapeRadius; 	//[Offset: 0x0, Size: 4]
	float ShapeWidth; 	//[Offset: 0x0, Size: 4]
	float Mass; 	//[Offset: 0x0, Size: 4]
	float DampingRate; 	//[Offset: 0x0, Size: 4]
	float SteerAngle; 	//[Offset: 0x0, Size: 4]
	bool bAffectedByHandbrake; 	//[Offset: 0x0, Size: 1]
	TireType* TireType; 	//[Offset: 0x0, Size: 8]
	TireConfig* TireConfig; 	//[Offset: 0x0, Size: 8]
	float LatStiffMaxLoad; 	//[Offset: 0x0, Size: 4]
	float LatStiffValue; 	//[Offset: 0x0, Size: 4]
	float LongStiffValue; 	//[Offset: 0x0, Size: 4]
	float SuspensionForceOffset; 	//[Offset: 0x0, Size: 4]
	float SuspensionMaxRaise; 	//[Offset: 0x0, Size: 4]
	float SuspensionMaxDrop; 	//[Offset: 0x0, Size: 4]
	float SuspensionNaturalFrequency; 	//[Offset: 0x0, Size: 4]
	float SuspensionDampingRatio; 	//[Offset: 0x0, Size: 4]
	enum EWheelSweepType SweepType { //[Offset: 0x0, Size: 1]
		SimpleAndComplex = 0
		Simple = 65006c00000000
		Complex = 65006500000000
		EWheelSweepType_MAX = 7500000000
	};
	float MaxBrakeTorque; 	//[Offset: 0x0, Size: 4]
	float MaxHandBrakeTorque; 	//[Offset: 0x0, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim; 	//[Offset: 0x0, Size: 8]
	int WheelIndex; 	//[Offset: 0x0, Size: 4]
	float DebugLongSlip; 	//[Offset: 0x0, Size: 4]
	float DebugLatSlip; 	//[Offset: 0x0, Size: 4]
	float DebugNormalizedTireLoad; 	//[Offset: 0x0, Size: 4]
	float DebugWheelTorque; 	//[Offset: 0x0, Size: 4]
	float DebugLongForce; 	//[Offset: 0x0, Size: 4]
	float DebugLatForce; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool IsInAir(); //Addr 0x75eabbaf84 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac475300
Class: NavCollision.NavCollisionBase.Object, Addr: 0x76903b1000
	structNavCollisionCylinder[] CylinderCollision; //[Offset: 0x0, Size: 16]
	structNavCollisionBox[] BoxCollision; //[Offset: 0x0, Size: 16]
	NavArea* AreaClass; 	//[Offset: 0x0, Size: 8]
	bool bGatherConvexGeometry; 	//[Offset: 0x0, Size: 1]
	bool bCreateOnClient; 	//[Offset: 0x0, Size: 1]
Class: WheeledVehicle.Pawn.Actor.Object, Addr: 0x75a5276f00
	SkeletalMeshComponent* Mesh; 	//[Offset: 0x0, Size: 8]
	WheeledVehicleMovementComponent* VehicleMovement; 	//[Offset: 0x0, Size: 8]
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object, Addr: 0x75a5276c80
	VehicleEngineData StructProperty; 	//[Offset: 0x0, Size: 160]
	VehicleDifferential4WData StructProperty; 	//[Offset: 0x0, Size: 28]
	float AckermannAccuracy; 	//[Offset: 0x0, Size: 4]
	VehicleTransmissionData StructProperty; 	//[Offset: 0x0, Size: 48]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
Class: EGOAudioFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x75a5276a00
	Void SetSwitch(constoutrefstructAudioGameObjectWrap AudioGameObjectWrap, FString StateGroup, FString State); //Addr 0x75eac3c338 [Final|Native|Static] // UFieldProperty addr: 0x75ac474f00
Class: EGOAudioTrack.DataAsset.Object, Addr: 0x75a5276780
	structVector[] GuideLines; //[Offset: 0x0, Size: 16]
	structVector[] GuideLinesR; //[Offset: 0x0, Size: 16]
	structAudioGateInfo[] GateInfos; //[Offset: 0x0, Size: 16]
Class: EGOAduioCrowd.DataAsset.Object, Addr: 0x75a5276500
	structAudioCrowdInfo[] CrowdInfos; //[Offset: 0x0, Size: 16]
Class: EGOAduioCrowdGrid.DataAsset.Object, Addr: 0x75a5276280
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	float GridCellX; 	//[Offset: 0x0, Size: 4]
	float GridCellY; 	//[Offset: 0x0, Size: 4]
	int MaxGridX; 	//[Offset: 0x0, Size: 4]
	int MaxGridY; 	//[Offset: 0x0, Size: 4]
	structAudioCrowdIndex[] GridIndexes; //[Offset: 0x0, Size: 16]
	structAudioCrowdInfo[] CrowdInfos; //[Offset: 0x0, Size: 16]
Class: EGOAudioCar.Object, Addr: 0x75a5276000
	AkAudioBank* ViewerCarAudioBank; 	//[Offset: 0x0, Size: 8]
Class: EGOMusicPlayer.Object, Addr: 0x75a5275b00
	delegate OnMusicPlayEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnCloudMusicOauth; 	//[Offset: 0x0, Size: 16]
	enum EEGOMusicPlayerState CurrentState { //[Offset: 0x0, Size: 1]
		Play = 0
		Pause = 47004500000000
		Stop = 72006500000000
		EEGOMusicPlayerState_MAX = 7500000000
	};
	Void StopMusic(); //Addr 0x75eac40d20 [Final|Native] // UFieldProperty addr: 0x75ac478000
Class: FollowingEmitter.Actor.Object, Addr: 0x75a5275880
	AkAudioEvent* AkEvent; 	//[Offset: 0x0, Size: 8]
	Void UpdateEmitterLocation(structVector FocusLocation); //Addr 0x75eac41bac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac477f00
Class: AkStateTrigger.Actor.Object, Addr: 0x75a5275600
	<FString, FString> AkStateMap; //[Offset: 0x0, Size: 80]
Class: NearMissEmitter.Actor.Object, Addr: 0x75a5275380
	BoxComponent* boxComp; 	//[Offset: 0x0, Size: 8]
	AkAudioEvent* AkEvent; 	//[Offset: 0x0, Size: 8]
	bool IsOneShot; 	//[Offset: 0x0, Size: 1]
Class: NearMissObject.Actor.Object, Addr: 0x75a527f600
	AkAudioEvent* AkEvent; 	//[Offset: 0x0, Size: 8]
Class: MultiPositionEmitter.Actor.Object, Addr: 0x75a527f380
	AkAudioEvent* AkEvent; 	//[Offset: 0x0, Size: 8]
	structTransform[] MPTransforms; //[Offset: 0x0, Size: 16]
	enum AkMultiPositionType MPType { //[Offset: 0x0, Size: 1]
		SingleSource = 0
		MultiSources = 75004d00000000
		MultiDirections = 54006e00000000
		AkMultiPositionType_MAX = 7600000000
	};
Class: PointSourceEmitter.Actor.Object, Addr: 0x75a527f100
	AkAudioEvent* AkEvent; 	//[Offset: 0x0, Size: 8]
Class: EGOTrackAudioManager.Actor.Object, Addr: 0x75a527ee80
	DataAsset* EGOAudioTrack; 	//[Offset: 0x0, Size: 8]
	<FString, FString> AkStateMap; //[Offset: 0x0, Size: 80]
	FollowingEmitter*[] FEArray; //[Offset: 0x0, Size: 16]
	AkStateTrigger*[] STArray; //[Offset: 0x0, Size: 16]
	NearMissEmitter*[] NMEArray; //[Offset: 0x0, Size: 16]
	NearMissObject*[] NMOArray; //[Offset: 0x0, Size: 16]
	MultiPositionEmitter*[] MPEArray; //[Offset: 0x0, Size: 16]
	PointSourceEmitter*[] PSEArray; //[Offset: 0x0, Size: 16]
	Void SetEGOTrackAudioActorsReference(); //Addr 0x75eac43388 [Final|Native] // UFieldProperty addr: 0x75ac477900
Class: EGOAICharacteristic.DataAsset.Object, Addr: 0x75a527ec00
	float Aggression; 	//[Offset: 0x0, Size: 4]
	float Control; 	//[Offset: 0x0, Size: 4]
	float Reaction; 	//[Offset: 0x0, Size: 4]
	float Variance; 	//[Offset: 0x0, Size: 4]
	float Speed_In; 	//[Offset: 0x0, Size: 4]
	float Speed_Out; 	//[Offset: 0x0, Size: 4]
	float Drift_Ability; 	//[Offset: 0x0, Size: 4]
	float Weather_Ability; 	//[Offset: 0x0, Size: 4]
	float P2P_Modifier; 	//[Offset: 0x0, Size: 4]
	float Virtual_Gymkhana_Performance; 	//[Offset: 0x0, Size: 4]
	float Virtual_Performa; 	//[Offset: 0x0, Size: 4]
	float Mistakes; 	//[Offset: 0x0, Size: 4]
	float Mechanical_Failures; 	//[Offset: 0x0, Size: 4]
	float Bad_Day_Chance; 	//[Offset: 0x0, Size: 4]
	float Good_Day_Chance; 	//[Offset: 0x0, Size: 4]
	float endurance_style; 	//[Offset: 0x0, Size: 4]
Class: EGOAIPerformanceTestCommandlet.Commandlet.Object, Addr: 0x75a527e980
Class: EGOAITrainCommandlet.Commandlet.Object, Addr: 0x75a527e480
Class: EGOAITrainLevelCommandlet.Commandlet.Object, Addr: 0x75a527e200
Class: EGOCameraActor.CameraActor.Actor.Object, Addr: 0x75a527df80
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	float YawRotatingScale; 	//[Offset: 0x0, Size: 4]
	float YawFadeSpeed; 	//[Offset: 0x0, Size: 4]
	float GetEGOCameraActorFov(); //Addr 0x75eae1a440 [Final|Native] // UFieldProperty addr: 0x75ac477500
Class: EGOCameraBlueprintLibrary.Object, Addr: 0x75a527da80
	structBlueprintMountedViewData[] MountedViewDataList; //[Offset: 0x0, Size: 16]
	Void SyncUE4EditorCameraTransformToEGO(structGuid CameraID); //Addr 0x75eae1b488 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac476600
Class: EGOViewManager.Object, Addr: 0x75a527d800
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty CameraConfigPath; 	//[Offset: 0x0, Size: 16]
	Void SwitchCameraGroup(outFString CameraPath, EGOVehicleComponent* Vehicle, bool IsCreateAllViews, FString ViewList); //Addr 0x75eae1e8bc [Final|Native] // UFieldProperty addr: 0x75ac479e00
Class: CameraBinding.Object, Addr: 0x75a527d580
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	EGOViewManager* ViewManager; 	//[Offset: 0x0, Size: 8]
	EGOWheeledVehicle* GetVehicle(); //Addr 0x75eae1f76c [Final|Native] // UFieldProperty addr: 0x75ac479d00
Class: EGOCameraSystem.Object, Addr: 0x75a527d300
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty CameraDataFormat; 	//[Offset: 0x0, Size: 16]
	EGOUpdateSequence* SequenceToUpdate; 	//[Offset: 0x0, Size: 8]
	FString[] SerialzableViewInArtistEditMode; //[Offset: 0x0, Size: 16]
	<structGuid, CameraBinding*> CameraBinding; //[Offset: 0x0, Size: 80]
	bool bAntiCollision; 	//[Offset: 0x0, Size: 1]
	bool bAdjustSuspensionHiehgt; 	//[Offset: 0x0, Size: 1]
	delegate EventCrashDistort; 	//[Offset: 0x0, Size: 16]
	Void SetSceneViewLagEnable(structGuid CameraID, bool Value); //Addr 0x75eae20870 [Final|Native] // UFieldProperty addr: 0x75ac47b700
Class: EGOUpdateSequence.Object, Addr: 0x76901d3580
	delegate EGOUpdateSequenceFinishedDelagate; 	//[Offset: 0x0, Size: 16]
	Void SetUpTranlateLimit(float limit); //Addr 0x75eae6c8c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1334c00
Class: CarBlueprintFunctionLibrary.Object, Addr: 0x75a527d080
	bool HighFrequency; 	//[Offset: 0x0, Size: 1]
	bool TickOnReverse; 	//[Offset: 0x0, Size: 1]
	Void UpdateKeepDrifting(float dt, float Radius, float facotr); //Addr 0x75eae27b6c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac4eaf00
Class: EGOCarCollisionSolver.Object, Addr: 0x75a527ce00
	Void PerformInitialize(CarBlueprintFunctionLibrary* CarFunclib); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac4ead00
Class: EGOCarEffectData.DataAsset.Object, Addr: 0x75a527cb80
	bool bEnableTyreMesh; 	//[Offset: 0x0, Size: 1]
	bool UseNiagaraSystem; 	//[Offset: 0x0, Size: 1]
	float TyreMeshOrientation; 	//[Offset: 0x0, Size: 4]
	ParticleSystem* CollisionEffectTemplate; 	//[Offset: 0x0, Size: 8]
	DistributionFloatConstantCurve* SpeedRate; 	//[Offset: 0x0, Size: 8]
	float CollisionSpeedThresholdMin; 	//[Offset: 0x0, Size: 4]
	float CollisionSpeedThresholdMax; 	//[Offset: 0x0, Size: 4]
	ParticleSystem* ScrapeEffectTemplate; 	//[Offset: 0x0, Size: 8]
	int MaxActiveScrapeEffectCount; 	//[Offset: 0x0, Size: 4]
	float ScrapingSpeedThresholdMin; 	//[Offset: 0x0, Size: 4]
	float ScrapingSpeedThresholdMax; 	//[Offset: 0x0, Size: 4]
	ParticleSystem* TyreHubSkidEffectTemplate; 	//[Offset: 0x0, Size: 8]
	bool bReceiveMobileCSMShadows; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float SkidHubRadiusOffset; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	structParticleEffectConditions[] HubSkidEffectConditions; //[Offset: 0x0, Size: 16]
	structParticleControlParams[] ParticleControlParams; //[Offset: 0x0, Size: 16]
	enum EParticleRotationType ParticleRotationType { //[Offset: 0x0, Size: 1]
		EPRT_None = 0
		EPRT_TyreVelocity = 76006900000000
		EPRT_TyreMovingDirection = 5f005400000000
		EPRT_MAX = 7600000000
	};
	bool bSymmetryLeft; 	//[Offset: 0x0, Size: 1]
	<FName, structParticleEffectTemplates> ParticleEffectTemplates; //[Offset: 0x0, Size: 80]
	<FName, structParticleEffectTemplates> GrassEffectTemplates; //[Offset: 0x0, Size: 80]
	<FName, structParticleEffectTemplates> SandEffectTemplates; //[Offset: 0x0, Size: 80]
	<FName, structParticleEffectTemplates> PoolEffectTemplates; //[Offset: 0x0, Size: 80]
	TyreEffectTemplate StructProperty; 	//[Offset: 0x0, Size: 40]
	<FName, structTyreEffectTemplate> TyreEffectByMaterial; //[Offset: 0x0, Size: 80]
	<FName, structVehicleBodyEffectTemplate> BodyEffectByMaterial; //[Offset: 0x0, Size: 80]
	ParticleSystem* SprayEffectTemplate; 	//[Offset: 0x0, Size: 8]
	DistributionFloatConstantCurve* SpraySpeedRate; 	//[Offset: 0x0, Size: 8]
	NiagaraSystem* DefaultChassisScrape; 	//[Offset: 0x0, Size: 8]
	<FName, NiagaraSystem*> ChassisScrapeByMaterial; //[Offset: 0x0, Size: 80]
	NiagaraSystem* DefaultCollisionWall; 	//[Offset: 0x0, Size: 8]
	<FName, NiagaraSystem*> CollisionWallByMaterial; //[Offset: 0x0, Size: 80]
	NiagaraSystem* DefaultBodyScrape; 	//[Offset: 0x0, Size: 8]
	<FName, NiagaraSystem*> BodyScrapeByMaterial; //[Offset: 0x0, Size: 80]
Class: EGOChassisEffectData.DataAsset.Object, Addr: 0x75a527c900
	structChassisScrapeTemplate[] FChassisScrapeTemplate; //[Offset: 0x0, Size: 16]
	structVector[] TriggerPoints; //[Offset: 0x0, Size: 16]
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a527c400
	bool bUseComplexAsSimpleCollision; 	//[Offset: 0x0, Size: 1]
	bool bUseAsyncCooking; 	//[Offset: 0x0, Size: 1]
	BodySetup* ProcMeshBodySetup; 	//[Offset: 0x0, Size: 8]
	structProcMeshSection[] ProcMeshSections; //[Offset: 0x0, Size: 16]
	structKConvexElem[] CollisionConvexElems; //[Offset: 0x0, Size: 16]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	BodySetup*[] AsyncBodySetupQueue; //[Offset: 0x0, Size: 16]
	bool bForcePerPrimitiveSceneData; 	//[Offset: 0x0, Size: 1]
	Void UpdateMeshSection_LinearColor(int SectionIndex, constoutrefstructVector[] Vertices, constoutrefstructVector[] Normals, constoutrefstructVector2D[] UV0, constoutrefstructVector2D[] UV1, constoutrefstructVector2D[] UV2, constoutrefstructVector2D[] UV3, constoutrefstructLinearColor[] VertexColors, constoutrefstructProcMeshTangent[] Tangents); //Addr 0x75eb045978 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac4ee400
Class: SkidMeshComponent.ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x75a527c680
Class: EGOCarSkidmark.ActorComponent.Object, Addr: 0x75a527c180
	structCarTyreStateInfo[] TyreStateInfos; //[Offset: 0x0, Size: 16]
	MaterialInterface* DefaultSkidmarkMaterial; 	//[Offset: 0x0, Size: 8]
	<FString, MaterialInterface*> SkidmarkMaterials; //[Offset: 0x0, Size: 80]
	<FString, bool> SkidmarkReceiveMobileCSMShadows; //[Offset: 0x0, Size: 80]
	FString[] KeepValidMaterials; //[Offset: 0x0, Size: 16]
	bool bHighLODLevel; 	//[Offset: 0x0, Size: 1]
	float TyreWidthOffset; 	//[Offset: 0x0, Size: 4]
	bool ShowSkidMesh; 	//[Offset: 0x0, Size: 1]
	Void SetupTyreStateInfo(int WheelIndex, constoutrefstructVector WheelPosition, constoutrefstructVector SkidNormal, float SidewaysMotion, float RelativeWeight, float SmoothedSkidding, int ContactMaterial); //Addr 0x75eae41044 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac4ee200
Class: EGOCarType.DataAsset.Object, Addr: 0x75a527bf00
	Data(ByteProperty)[] Data; //[Offset: 0x0, Size: 16]
Class: EGODetonationSettings.DataAsset.Object, Addr: 0x75a527bc80
	DetonationSettings StructProperty; 	//[Offset: 0x0, Size: 348]
	<FName, structDetonationTemplate> SmallDetTemplates; //[Offset: 0x0, Size: 80]
	float SmallDetonation; 	//[Offset: 0x0, Size: 4]
	float SmallDetonationTime; 	//[Offset: 0x0, Size: 4]
	float SmallDetonationAttenuation; 	//[Offset: 0x0, Size: 4]
	<FName, structDetonationTemplate> MidDetTemplates; //[Offset: 0x0, Size: 80]
	float MidDetonation; 	//[Offset: 0x0, Size: 4]
	float MidDetonationTime; 	//[Offset: 0x0, Size: 4]
	float MidDetonationAttenuation; 	//[Offset: 0x0, Size: 4]
	<FName, structDetonationTemplate> LargeDetTemplates; //[Offset: 0x0, Size: 80]
	float LargeDetonation; 	//[Offset: 0x0, Size: 4]
	float LargeDetonationTime; 	//[Offset: 0x0, Size: 4]
	float LargeDetonationAttenuation; 	//[Offset: 0x0, Size: 4]
	<FName, structDetonationTemplate> SpeedupDetTemplates; //[Offset: 0x0, Size: 80]
	float SpeedupDetonation; 	//[Offset: 0x0, Size: 4]
	float SpeedupDetonationTime; 	//[Offset: 0x0, Size: 4]
	float SpeedupDetonationAttenuation; 	//[Offset: 0x0, Size: 4]
Class: EGODetControlParams.DataAsset.Object, Addr: 0x75a527ba00
	structDetControlParam[] LargeDetControlParams; //[Offset: 0x0, Size: 16]
	structDetControlParam[] DetControlParams; //[Offset: 0x0, Size: 16]
	structDetControlParam[] SmallDetControlParams; //[Offset: 0x0, Size: 16]
	structDetControlParam[] SpeedupDetControlParams; //[Offset: 0x0, Size: 16]
Class: EGODriftConfig.DataAsset.Object, Addr: 0x75a527b780
	bool ApplyToAI; 	//[Offset: 0x0, Size: 1]
	float TCAutoDriftStateMaxAngle; 	//[Offset: 0x0, Size: 4]
	float TCAutoDriftStateMinAngle; 	//[Offset: 0x0, Size: 4]
	float TCAutoDriftMinStaringTimer; 	//[Offset: 0x0, Size: 4]
	float TCAutoDriftMaxStaringTimer; 	//[Offset: 0x0, Size: 4]
	CurveFloat*[] TCConfigs; //[Offset: 0x0, Size: 16]
	structEGOAutoTCSetup[] TCAutoSetup; //[Offset: 0x0, Size: 16]
	int TCAutoDefaultLevel; 	//[Offset: 0x0, Size: 4]
	float TCThrottleFadeTime; 	//[Offset: 0x0, Size: 4]
	bool EnableWithGrid2; 	//[Offset: 0x0, Size: 1]
	CurveFloat* ForwardAcceleration; 	//[Offset: 0x0, Size: 8]
	CurveFloat* SideAcceleration; 	//[Offset: 0x0, Size: 8]
	float MinDriftAngle; 	//[Offset: 0x0, Size: 4]
	float MaxDriftAngle; 	//[Offset: 0x0, Size: 4]
	structDriverAssits[] DriverAssists; //[Offset: 0x0, Size: 16]
	DriverAssits StructProperty; 	//[Offset: 0x0, Size: 32]
	DriverAssits StructProperty; 	//[Offset: 0x0, Size: 32]
	CurveFloat* SteeringCurve; 	//[Offset: 0x0, Size: 8]
	CurveFloat* SlipAngleMap; 	//[Offset: 0x0, Size: 8]
	CurveFloat* StartStrength; 	//[Offset: 0x0, Size: 8]
	bool EnableReduceImpule; 	//[Offset: 0x0, Size: 1]
	float StandardImpulseScale; 	//[Offset: 0x0, Size: 4]
	float DampedImpulseScale; 	//[Offset: 0x0, Size: 4]
	float FakeSkidEffectCoefK; 	//[Offset: 0x0, Size: 4]
	float FakeSkidEffectCoefB; 	//[Offset: 0x0, Size: 4]
	float AutoSteeringDistanceToEdgeFactor; 	//[Offset: 0x0, Size: 4]
	float AutoSteeringDegreesFactor; 	//[Offset: 0x0, Size: 4]
	float AutoSteeringEffectDuration; 	//[Offset: 0x0, Size: 4]
	float AutoSteeringMinSpeed; 	//[Offset: 0x0, Size: 4]
	float ATCFrequency; 	//[Offset: 0x0, Size: 4]
	bool LockWheelWhenHandbrake; 	//[Offset: 0x0, Size: 1]
	float SpeedLimitFactor; 	//[Offset: 0x0, Size: 4]
	float ParticleMinSkid; 	//[Offset: 0x0, Size: 4]
	float ParticleIncr; 	//[Offset: 0x0, Size: 4]
	float ParticleDecr; 	//[Offset: 0x0, Size: 4]
	float ParticleMaxValue; 	//[Offset: 0x0, Size: 4]
	float DriftAngleLimitToSmoke; 	//[Offset: 0x0, Size: 4]
	float SmokingDelay; 	//[Offset: 0x0, Size: 4]
Class: EGOEffectActor.Actor.Object, Addr: 0x75a527b500
	structScenePfxWithSound[] ScenePfxWithSounds; //[Offset: 0x0, Size: 16]
Class: EGOExtractReplayWheelHelper.Object, Addr: 0x75a527b280
	Void AddVehicleWheelStaticInfo(int VehicleIndex, EGOVehicleComponent* EGOVehicleComponent); //Addr 0x75eae46610 [Final|Native] // UFieldProperty addr: 0x75ac4ee100
Class: EGOForceBasedSequence.Object, Addr: 0x75a527b000
	delegate EGOSequenceFinishedDelagate; 	//[Offset: 0x0, Size: 16]
	Void OnEGOForceSequenceFinishedDelegate__DelegateSignature(); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75b1311800
Class: EGOFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x75a527ad80
	Void WaitingTrainWorldFinish(World* World); //Addr 0x75eae4eef8 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac516d00
Class: EGOHallWheeledVehicle.Pawn.Actor.Object, Addr: 0x75a527ab00
	EGOVehicleMeshComponent* Mesh; 	//[Offset: 0x0, Size: 8]
Class: EGOVehicleMeshComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d1f00
	MeshComponent* Mesh_Body; 	//[Offset: 0x0, Size: 8]
	MeshComponent* Mesh_Body_Cabin; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Skinned_Body; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Skinned_Body_Cabin; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Master_Pose; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Master_Pose_Cabin; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Skinned_Body_Proxy; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* Mesh_Skinned_Body_Cabin_Proxy; 	//[Offset: 0x0, Size: 8]
	PoseableMeshComponent* Mesh_Tyre; 	//[Offset: 0x0, Size: 8]
	PoseableMeshComponent* Mesh_Rim; 	//[Offset: 0x0, Size: 8]
	PoseableMeshComponent* Mesh_Brake; 	//[Offset: 0x0, Size: 8]
	SkinnedMeshComponent* DriverMesh; 	//[Offset: 0x0, Size: 8]
	StrProperty GameTypeID; 	//[Offset: 0x0, Size: 16]
	float PreviewSuspensionHeightOffset; 	//[Offset: 0x0, Size: 4]
	float PreviewSuspensionCamber; 	//[Offset: 0x0, Size: 4]
	<FString, FString> SubMeshGameIDMap; //[Offset: 0x0, Size: 80]
	bool bMeshCombined; 	//[Offset: 0x0, Size: 1]
	bool bEnableBrakeDiscUpdate; 	//[Offset: 0x0, Size: 1]
	PostProcessSettings StructProperty; 	//[Offset: 0x0, Size: 1616]
	float BlendDuration; 	//[Offset: 0x0, Size: 4]
	float BlendMinImpluse; 	//[Offset: 0x0, Size: 4]
	StaticMeshComponent*[] SpinWheels; //[Offset: 0x0, Size: 16]
	Void UpdateWheelTransformRefitFix(); //Addr 0x75eae864dc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51d400
Class: EGOLayerManager.Object, Addr: 0x75a527a880
	FName[] HideLayersList; //[Offset: 0x0, Size: 16]
	FName[] ShowLayersList; //[Offset: 0x0, Size: 16]
	bool bNeedRetainSceneCameraTriggerbox; 	//[Offset: 0x0, Size: 1]
	Void UpdateActorsVisibility(World* World, FString TrackName, int TrackRoute); //Addr 0x75eae593dc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac516500
Class: EGOPhysicsComponent.ActorComponent.Object, Addr: 0x75a527a600
	EGORididBodyState StructProperty; 	//[Offset: 0x0, Size: 80]
	bool bAutoCreatePhysicsObject; 	//[Offset: 0x0, Size: 1]
	bool bEnable; 	//[Offset: 0x0, Size: 1]
	CustomRigidBodySetup StructProperty; 	//[Offset: 0x0, Size: 72]
	CustomRigidBodyMotionSetup StructProperty; 	//[Offset: 0x0, Size: 16]
	EGORigidBodySetup StructProperty; 	//[Offset: 0x0, Size: 240]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float YSpeedFrequency; 	//[Offset: 0x0, Size: 4]
	float YSpeedStrength; 	//[Offset: 0x0, Size: 4]
	float MaxAngularVelocityTime; 	//[Offset: 0x0, Size: 4]
	bool ActorCanHide; 	//[Offset: 0x0, Size: 1]
	FName BindBoneTransfrom; 	//[Offset: 0x0, Size: 12]
	int InitActiveState; 	//[Offset: 0x0, Size: 4]
	bool NeedClearPhys; 	//[Offset: 0x0, Size: 1]
	Void setFixedBodyTransform(constoutrefstructTransform InTransform); //Addr 0x75eae5b610 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac519e00
Class: EGOPhysicsRuntimeCommandlet.Commandlet.Object, Addr: 0x75a527fd80
Class: EGOPhysicsWorldSetting.DataAsset.Object, Addr: 0x75a527fb00
	EGOPhysicsQuickSolverInit StructProperty; 	//[Offset: 0x0, Size: 56]
	EGOPhysicsCollisionSystemInit StructProperty; 	//[Offset: 0x0, Size: 96]
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
	float MaxFPS; 	//[Offset: 0x0, Size: 4]
	float MinFPS; 	//[Offset: 0x0, Size: 4]
	int NumExternalSystems; 	//[Offset: 0x0, Size: 4]
	int MaxTimesToRun; 	//[Offset: 0x0, Size: 4]
	int MaxIslandsSortedByTimeComplexity; 	//[Offset: 0x0, Size: 4]
	int MaxNodeModelsToUpdatePerFrame; 	//[Offset: 0x0, Size: 4]
	int MaxFixedObjects; 	//[Offset: 0x0, Size: 4]
	int MaxRigidBodies; 	//[Offset: 0x0, Size: 4]
	int MaxLargeGeoms; 	//[Offset: 0x0, Size: 4]
	int MaxLargeGeomsPerSlotManager; 	//[Offset: 0x0, Size: 4]
	int MaxSmallGeoms; 	//[Offset: 0x0, Size: 4]
	int MaxSmallGeomsPerSlotManager; 	//[Offset: 0x0, Size: 4]
	int MaxConstraints; 	//[Offset: 0x0, Size: 4]
	int OverrideCar; 	//[Offset: 0x0, Size: 4]
	enum TTrainMode TrainMode { //[Offset: 0x0, Size: 1]
		TNone = 0
		Corner = 70007900000000
		Brake = 5800000000
		BrakeLineData = 0
		ProgressData = 0
		TTrainMode_MAX = 0
	};
	bool PadAssistance; 	//[Offset: 0x0, Size: 1]
	bool FixedDeltaTimeMode; 	//[Offset: 0x0, Size: 1]
	int FixedDeltaTimeModeMaxTimes; 	//[Offset: 0x0, Size: 4]
	bool FastMode; 	//[Offset: 0x0, Size: 1]
	int FastModeMaxTimes; 	//[Offset: 0x0, Size: 4]
	int OverrideTrack; 	//[Offset: 0x0, Size: 4]
	bool DrawTrackWallMesh; 	//[Offset: 0x0, Size: 1]
	bool DrawTrackTerrainMesh; 	//[Offset: 0x0, Size: 1]
	bool DrawTrackObject; 	//[Offset: 0x0, Size: 1]
	bool DrawCarCollision; 	//[Offset: 0x0, Size: 1]
	classObject[] ExtraDriverAssists; //[Offset: 0x0, Size: 16]
	MaterialInterface* TerrainMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* BarrierMaterial; 	//[Offset: 0x0, Size: 8]
	bool RecordState; 	//[Offset: 0x0, Size: 1]
	bool ReplayState; 	//[Offset: 0x0, Size: 1]
	bool CarUpdateParallel; 	//[Offset: 0x0, Size: 1]
	bool AIUpdateParallel; 	//[Offset: 0x0, Size: 1]
	bool LowFrequencyCarAssistUpdate; 	//[Offset: 0x0, Size: 1]
	int WorldThreadThreadPri; 	//[Offset: 0x0, Size: 4]
	int CarTaskThreadMask; 	//[Offset: 0x0, Size: 4]
	bool LowFrequencyAIUpdate; 	//[Offset: 0x0, Size: 1]
	int OverrideCtfPatchSlot1; 	//[Offset: 0x0, Size: 4]
	int OverrideCtfPatchSlot2; 	//[Offset: 0x0, Size: 4]
	int OverrideCtfPatchSlot3; 	//[Offset: 0x0, Size: 4]
	int OverrideCtfPatchSlot4; 	//[Offset: 0x0, Size: 4]
	int OverrideCtfPatchSlot5; 	//[Offset: 0x0, Size: 4]
	int OverrideCtfPatchSlot6; 	//[Offset: 0x0, Size: 4]
	bool LowFPSUpdate; 	//[Offset: 0x0, Size: 1]
	int LowFPSUpdateMaxTimes; 	//[Offset: 0x0, Size: 4]
	float LowFPSUpdateMinFPS; 	//[Offset: 0x0, Size: 4]
	bool PhysicsStreaming; 	//[Offset: 0x0, Size: 1]
	bool PhysicsStreamingLog; 	//[Offset: 0x0, Size: 1]
	bool CameraTickOnEGOThread; 	//[Offset: 0x0, Size: 1]
	float ReplayAABBScale; 	//[Offset: 0x0, Size: 4]
	EGOPhysicsWorldSetting* GetDefaultObject(); //Addr 0x75eae5d8a4 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac519d00
Class: CineCameraActor.CameraActor.Actor.Object, Addr: 0x76901d5100
	CameraLookatTrackingSettings StructProperty; 	//[Offset: 0x0, Size: 88]
	Void SetTrackingActor(Actor* Actor); //Addr 0x75ed4cce54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac519b00
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902b0d80
	CameraFilmbackSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	CameraFilmbackSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	CameraLensSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	CameraFocusSettings StructProperty; 	//[Offset: 0x0, Size: 96]
	float CurrentFocalLength; 	//[Offset: 0x0, Size: 4]
	float CurrentAperture; 	//[Offset: 0x0, Size: 4]
	float CurrentMobileFocalRegionFactor; 	//[Offset: 0x0, Size: 4]
	float CurrentFocusDistance; 	//[Offset: 0x0, Size: 4]
	structNamedFilmbackPreset[] FilmbackPresets; //[Offset: 0x0, Size: 16]
	structNamedLensPreset[] LensPresets; //[Offset: 0x0, Size: 16]
	StrProperty DefaultFilmbackPresetName; 	//[Offset: 0x0, Size: 16]
	StrProperty DefaultFilmbackPreset; 	//[Offset: 0x0, Size: 16]
	StrProperty DefaultLensPresetName; 	//[Offset: 0x0, Size: 16]
	float DefaultLensFocalLength; 	//[Offset: 0x0, Size: 4]
	float DefaultLensFStop; 	//[Offset: 0x0, Size: 4]
	Void SetLensPresetByName(FString InPresetName); //Addr 0x75ed4cdb38 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f9e00
Class: EGORaceAnalysisCameraActor.CineCameraActor.CameraActor.Actor.Object, Addr: 0x75a527f880
	bool bRunning; 	//[Offset: 0x0, Size: 1]
	float Height; 	//[Offset: 0x0, Size: 4]
	float Velocity; 	//[Offset: 0x0, Size: 4]
	delegate OnArriveStart; 	//[Offset: 0x0, Size: 16]
	int CountArriveStart; 	//[Offset: 0x0, Size: 4]
	delegate OnArriveEnd; 	//[Offset: 0x0, Size: 16]
	int CountArriveEnd; 	//[Offset: 0x0, Size: 4]
	SplineComponent* SplineComponent; 	//[Offset: 0x0, Size: 8]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float CurrentDistance; 	//[Offset: 0x0, Size: 4]
	Void StartAddPoint(); //Addr 0x75eae5f444 [Final|Native] // UFieldProperty addr: 0x75ac519500
Class: EGORacingProgress.Object, Addr: 0x76901d4e80
	delegate EventOnVehicleCrossSplit; 	//[Offset: 0x0, Size: 16]
	delegate EventOnVehicleCrossGate; 	//[Offset: 0x0, Size: 16]
	EGORacingLineSettings StructProperty; 	//[Offset: 0x0, Size: 128]
	delegate EventEGOPostUpdateHigh; 	//[Offset: 0x0, Size: 16]
	delegate EventEGOPostUpdateLow; 	//[Offset: 0x0, Size: 16]
	delegate EventUWorldPostTick; 	//[Offset: 0x0, Size: 16]
	delegate EventUWorldPreTick; 	//[Offset: 0x0, Size: 16]
	delegate EventUWorldPreFinish; 	//[Offset: 0x0, Size: 16]
	Void UWorldUpdate__DelegateSignature(constfloat DeltaTime); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75b1333600
Class: EGORadialForceActor.Actor.Object, Addr: 0x76901d4c00
	EGORadialForceComponent* RadialForceComponent; 	//[Offset: 0x0, Size: 8]
	EGORadialForceComponent* GetForceComponent(); //Addr 0x75eae65080 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac519400
Class: EGORadialForceComponent.ActorComponent.Object, Addr: 0x76901d4980
	float Radius; 	//[Offset: 0x0, Size: 4]
	float ForceStrength; 	//[Offset: 0x0, Size: 4]
	bool UseDurationImpulse; 	//[Offset: 0x0, Size: 1]
	float ImpulseDuration; 	//[Offset: 0x0, Size: 4]
	float DurationForce; 	//[Offset: 0x0, Size: 4]
	Void FireRadialImpulse(float baseForce); //Addr 0x75eae656fc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac519100
Class: EGOIReplayComponent.ActorComponent.Object, Addr: 0x76901d4700
Class: EGOSceneCameraTrigger.ActorComponent.Object, Addr: 0x76901d4480
	delegate BeginOverlapDelegate; 	//[Offset: 0x0, Size: 16]
	delegate EndOverlapDelegate; 	//[Offset: 0x0, Size: 16]
	Void OnTriggerBoxEndOverlap(Actor* OverlappedActor, Actor* OtherActor); //Addr 0x75eae66f54 [Final|Native] // UFieldProperty addr: 0x75b1333000
Class: EGOSceneEffectTrigger.Actor.Object, Addr: 0x76901d4200
	SphereComponent* Sphere; 	//[Offset: 0x0, Size: 8]
	structSceneEffectTemplate[] EffectTemplates; //[Offset: 0x0, Size: 16]
	structSceneSoundTemplate[] SoundTemplates; //[Offset: 0x0, Size: 16]
	int TriggerCount; 	//[Offset: 0x0, Size: 4]
	float LimitedProgressInRace; 	//[Offset: 0x0, Size: 4]
	bool bBroadcastEffect; 	//[Offset: 0x0, Size: 1]
	bool bTriggerSceneEffectEvent; 	//[Offset: 0x0, Size: 1]
	bool bOnlyPlayer; 	//[Offset: 0x0, Size: 1]
	delegate OnTriggerSceneEffectBeginEvent; 	//[Offset: 0x0, Size: 16]
	delegate OnTriggerSceneEffectEndEvent; 	//[Offset: 0x0, Size: 16]
	bool IsOnTriggering; 	//[Offset: 0x0, Size: 1]
	Void OnTriggerBoxEndOverlap(Actor* OverlappedActor, Actor* OtherActor); //Addr 0x75eae67aa0 [Final|Native] // UFieldProperty addr: 0x75ac518f00
Class: EGOScreenshotCameraActor.CineCameraActor.CameraActor.Actor.Object, Addr: 0x76901d3f80
	float UpDownMovingSpeed; 	//[Offset: 0x0, Size: 4]
	float LeftRightMovingSpeed; 	//[Offset: 0x0, Size: 4]
	float UpDownRotatingSpeed; 	//[Offset: 0x0, Size: 4]
	float LeftRightRotatingSpeed; 	//[Offset: 0x0, Size: 4]
	float ZoomTransformScale; 	//[Offset: 0x0, Size: 4]
	float FreeModeTouchRotationPitchScale; 	//[Offset: 0x0, Size: 4]
	float FreeModeTouchRotationYawScale; 	//[Offset: 0x0, Size: 4]
	float InCarModeZoomScale; 	//[Offset: 0x0, Size: 4]
	float MaxTouchPitch; 	//[Offset: 0x0, Size: 4]
	float MinTouchPitch; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float MinFOV; 	//[Offset: 0x0, Size: 4]
	float MaxFOV; 	//[Offset: 0x0, Size: 4]
	float MinExposureCompensation; 	//[Offset: 0x0, Size: 4]
	float MaxExposureCompensation; 	//[Offset: 0x0, Size: 4]
	float MinRoll; 	//[Offset: 0x0, Size: 4]
	float MaxRoll; 	//[Offset: 0x0, Size: 4]
	float DOFMaxFocalRegionFactor; 	//[Offset: 0x0, Size: 4]
	float DOFScale; 	//[Offset: 0x0, Size: 4]
	float DOFNearTransitionRegionScale; 	//[Offset: 0x0, Size: 4]
	float DOFFarTransitionRegionScale; 	//[Offset: 0x0, Size: 4]
	float DOFNearBlurSize; 	//[Offset: 0x0, Size: 4]
	float DOFFarBlurSize; 	//[Offset: 0x0, Size: 4]
	float MinActivationRadius; 	//[Offset: 0x0, Size: 4]
	float MaxActivationRadius; 	//[Offset: 0x0, Size: 4]
	float MinAltitudeOffset; 	//[Offset: 0x0, Size: 4]
	float MaxAltitudeOffset; 	//[Offset: 0x0, Size: 4]
	Void SetTrackPlayerVehicle(Actor* InPlayerVehicle, World* World); //Addr 0x75eae69f24 [Final|Native] // UFieldProperty addr: 0x75ac51b300
Class: EGOTrack.DataAsset.Object, Addr: 0x76901d3d00
	Data(ByteProperty)[] Data; //[Offset: 0x0, Size: 16]
Class: EGOTrackAssembly.DataAsset.Object, Addr: 0x76901d3a80
	Data(ByteProperty)[] Data; //[Offset: 0x0, Size: 16]
Class: EGOTrackActor.Actor.Object, Addr: 0x76901d3800
	ProceduralMeshComponent* TrackMesh; 	//[Offset: 0x0, Size: 8]
Class: EGOVehicleAiLibrary.Object, Addr: 0x76901d3300
	bool SetAccompanyDeltaTime(World* InWorld, float desireTime); //Addr 0x75eae6da88 [Final|Native|Static] // UFieldProperty addr: 0x75ac51b100
Class: EGOVehicleAnimInstance.AnimInstance.Object, Addr: 0x76901d3080
	EGOVehicleComponent* VehicleComponent; 	//[Offset: 0x0, Size: 8]
	WheeledVehicle* GetVehicle(); //Addr 0x75eae6e344 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51b000
Class: EGOVehicleAutoDriveComponent.ActorComponent.Object, Addr: 0x76901d2e00
	Void BuildTrack(); //Addr 0x75eae6eccc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51af00
Class: EGOVehicleComponent.EGOIReplayComponent.ActorComponent.Object, Addr: 0x76901d2b80
	delegate EventEGOPostUpdate; 	//[Offset: 0x0, Size: 16]
	CarDymSpecs StructProperty; 	//[Offset: 0x0, Size: 76]
	EGOAIFeedback StructProperty; 	//[Offset: 0x0, Size: 168]
	EGOCarType* CarTypeSetup; 	//[Offset: 0x0, Size: 8]
	EGOCarType* CarTypeSetupDrifting; 	//[Offset: 0x0, Size: 8]
	EGODriftConfig* DriveAssistConfig; 	//[Offset: 0x0, Size: 8]
	EGOXML* CarPhysicsSetup; 	//[Offset: 0x0, Size: 8]
	EGOXML* CarAIStatistics; 	//[Offset: 0x0, Size: 8]
	EGOXML* CarAICorneringStatistics; 	//[Offset: 0x0, Size: 8]
	AntiCollisionParams StructProperty; 	//[Offset: 0x0, Size: 112]
	AiLabState StructProperty; 	//[Offset: 0x0, Size: 24]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float CarShellExtraLeft; 	//[Offset: 0x0, Size: 4]
	float CarShellExtraRight; 	//[Offset: 0x0, Size: 4]
	float CarShellExtraTop; 	//[Offset: 0x0, Size: 4]
	float CarShellExtraBottom; 	//[Offset: 0x0, Size: 4]
	float CarShellExtraForward; 	//[Offset: 0x0, Size: 4]
	float CarShellExtraBack; 	//[Offset: 0x0, Size: 4]
	FName FL_BoneName; 	//[Offset: 0x0, Size: 12]
	FName FR_BoneName; 	//[Offset: 0x0, Size: 12]
	FName BL_BoneName; 	//[Offset: 0x0, Size: 12]
	FName BR_BoneName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	StrProperty VehicleType; 	//[Offset: 0x0, Size: 16]
	StrProperty VehicleString; 	//[Offset: 0x0, Size: 16]
	bool EnableCollision; 	//[Offset: 0x0, Size: 1]
	bool EnableABS; 	//[Offset: 0x0, Size: 1]
	bool EnableATC; 	//[Offset: 0x0, Size: 1]
	bool EnableESC; 	//[Offset: 0x0, Size: 1]
	bool EnableSuperESC; 	//[Offset: 0x0, Size: 1]
	bool EnableLaunchControl; 	//[Offset: 0x0, Size: 1]
	bool BrakeCornering; 	//[Offset: 0x0, Size: 1]
	bool ThrottleCornering; 	//[Offset: 0x0, Size: 1]
	bool AutoSteer; 	//[Offset: 0x0, Size: 1]
	float RacingLineDifficulty; 	//[Offset: 0x0, Size: 4]
	bool IsPlayer; 	//[Offset: 0x0, Size: 1]
	bool bNetUpdate; 	//[Offset: 0x0, Size: 1]
	CarState StructProperty; 	//[Offset: 0x0, Size: 928]
	CarEngineState StructProperty; 	//[Offset: 0x0, Size: 48]
	CarBlueprintFunctionLibrary* _CarFunctionLibrary; 	//[Offset: 0x0, Size: 8]
	StrProperty CollisionAccSolverBpPath; 	//[Offset: 0x0, Size: 16]
	EGOCarCollisionSolver* _CarCollisionAccSolver; 	//[Offset: 0x0, Size: 8]
	EGOForceBasedSequence* CarSequenceLibrary; 	//[Offset: 0x0, Size: 8]
	int ControlMethod; 	//[Offset: 0x0, Size: 4]
	bool UseArcadeControlMethod; 	//[Offset: 0x0, Size: 1]
	int TCAssistLevel; 	//[Offset: 0x0, Size: 4]
	bool TCAssistAuto; 	//[Offset: 0x0, Size: 1]
	EGOAICharacteristic* AICharacteristic; 	//[Offset: 0x0, Size: 8]
	structTransform[] RefitWheelsFix; //[Offset: 0x0, Size: 16]
	structTransform[] RefitWheelScalesFix; //[Offset: 0x0, Size: 16]
	structTransform[] RefitDiscScalesFix; //[Offset: 0x0, Size: 16]
	structTransform[] RefitWheelCalipersFix; //[Offset: 0x0, Size: 16]
	float[] WheelWidthOffsets; //[Offset: 0x0, Size: 16]
	float[] WheelWidthOffsetsScriptFix; //[Offset: 0x0, Size: 16]
	float[] WheelCambers; //[Offset: 0x0, Size: 16]
	float[] WheelAngles; //[Offset: 0x0, Size: 16]
	structVector[] WheelOffset; //[Offset: 0x0, Size: 16]
	CarSpecs StructProperty; 	//[Offset: 0x0, Size: 1032]
	bool BlockTransformUpdate; 	//[Offset: 0x0, Size: 1]
	bool EnablSemiAutoTC; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool UseWYSWYGSteering; 	//[Offset: 0x0, Size: 1]
	bool bLowDetailMode; 	//[Offset: 0x0, Size: 1]
	bool AutoAdaptionCarCollisionBox; 	//[Offset: 0x0, Size: 1]
	bool bTCFlag; 	//[Offset: 0x0, Size: 1]
	bool bEBDFlag; 	//[Offset: 0x0, Size: 1]
	bool bAYCFlag; 	//[Offset: 0x0, Size: 1]
	bool bTCMode; 	//[Offset: 0x0, Size: 1]
	bool FakeSuspensionNoise; 	//[Offset: 0x0, Size: 1]
	float FakeSuspensionNoiseCycle; 	//[Offset: 0x0, Size: 4]
	bool HoldBrakeDisc; 	//[Offset: 0x0, Size: 1]
	bool IsPlayerAsAI; 	//[Offset: 0x0, Size: 1]
	delegate LuaImpactDelegate; 	//[Offset: 0x0, Size: 16]
	delegate LuaScrapeDelegate; 	//[Offset: 0x0, Size: 16]
	delegate CrossCurveDelegate; 	//[Offset: 0x0, Size: 16]
	delegate CrossGateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnHitResetLine; 	//[Offset: 0x0, Size: 16]
	delegate PreHitResetLine; 	//[Offset: 0x0, Size: 16]
	delegate LuaVehicleTeleprotDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OverlapCarDelegate; 	//[Offset: 0x0, Size: 16]
	float TimeSinceLastCollision; 	//[Offset: 0x0, Size: 4]
	structLuaImpactData[] MergedImpac; //[Offset: 0x0, Size: 16]
	float VisualOnlyYaw; 	//[Offset: 0x0, Size: 4]
	float VisualOnlyPitch; 	//[Offset: 0x0, Size: 4]
	float VisualOnlyRoll; 	//[Offset: 0x0, Size: 4]
	float VisualOnlyCamber; 	//[Offset: 0x0, Size: 4]
	float VisualOnlyWheelTrack; 	//[Offset: 0x0, Size: 4]
	float VisualOnlyRestOffsetY; 	//[Offset: 0x0, Size: 4]
	float ScrapingSpeedThresholdMin; 	//[Offset: 0x0, Size: 4]
	float AnimSteeringTimeScale; 	//[Offset: 0x0, Size: 4]
	float AnimSteeringMinDx; 	//[Offset: 0x0, Size: 4]
	float AnimSteeringCollisionEffectTime; 	//[Offset: 0x0, Size: 4]
	float AnimSteeringClampAngle; 	//[Offset: 0x0, Size: 4]
	float AnimSteeringClampAngleWithCollision; 	//[Offset: 0x0, Size: 4]
	CurveFloat* AnimSteeringCurve; 	//[Offset: 0x0, Size: 8]
	CurveFloat* AnimSteeringMapCurve; 	//[Offset: 0x0, Size: 8]
	float AngleForSuspRatio; 	//[Offset: 0x0, Size: 4]
	bool UsingArcadeSteering(); //Addr 0x75eae7375c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b131fa00
Class: EGOVehicleDebug.ActorComponent.Object, Addr: 0x76901d2900
	int MaxDebugRecordDataNum; 	//[Offset: 0x0, Size: 4]
	Void SetCarScore(constoutref<FString, FString> scoreMap); //Addr 0x75eae804b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51ae00
Class: EGOVehicleEffectComponent.EGOIReplayComponent.ActorComponent.Object, Addr: 0x76901d2680
	float CurrentRaceProgress; 	//[Offset: 0x0, Size: 4]
	EGOCarEffectData* EffectConfig; 	//[Offset: 0x0, Size: 8]
	EGODetonationSettings* DetonationSetting; 	//[Offset: 0x0, Size: 8]
	TyreEffectData StructProperty; 	//[Offset: 0x0, Size: 160]
	delegate LuaChassisDelegate; 	//[Offset: 0x0, Size: 16]
	ParticleSystemReplayWrapper* ParticleReplayWrapper; 	//[Offset: 0x0, Size: 8]
	bool EnableSceneEffects; 	//[Offset: 0x0, Size: 1]
	bool bEnableImpactEffects; 	//[Offset: 0x0, Size: 1]
	delegate OnEffectTrigger; 	//[Offset: 0x0, Size: 16]
	bool bEnableTyreMesh; 	//[Offset: 0x0, Size: 1]
	float MaxTyreLength; 	//[Offset: 0x0, Size: 4]
	float MinTyreMeshWidthScale; 	//[Offset: 0x0, Size: 4]
	float MaxTyreMeshWidthScale; 	//[Offset: 0x0, Size: 4]
	float TyreMeshStepLength; 	//[Offset: 0x0, Size: 4]
	float TyreMeshFadeInSpeed; 	//[Offset: 0x0, Size: 4]
	float TyreMeshFadeOutSpeed; 	//[Offset: 0x0, Size: 4]
	float TextureAspectRatio; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	MaterialInterface* DefaultTyreMeshMaterial; 	//[Offset: 0x0, Size: 8]
	bool bTyreMeshReceiveMobileCSMShadows; 	//[Offset: 0x0, Size: 1]
	float TyreMeshSpeedLimit; 	//[Offset: 0x0, Size: 4]
	float TyreMeshFadeAwaySpeed; 	//[Offset: 0x0, Size: 4]
	Void UpdateTyreEffects(float TimeStep); //Addr 0x75eae8289c [Final|Native] // UFieldProperty addr: 0x75b1335f00
Class: EGOVehicleEffectSoundComponent.ActorComponent.Object, Addr: 0x76901d2400
	bool bNetUpdate; 	//[Offset: 0x0, Size: 1]
	bool bCollisionEnabled; 	//[Offset: 0x0, Size: 1]
	EGOAudioCar* EGOAudioCar; 	//[Offset: 0x0, Size: 8]
	bool bUseReverbVolumes; 	//[Offset: 0x0, Size: 1]
	Void UpdateEGOAudioTransform(); //Addr 0x75eae84980 [Final|Native] // UFieldProperty addr: 0x75ac51de00
Class: EGOVehicleMeshDataTable.Object, Addr: 0x76901d2180
	DataTable* PART_OFFSET_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* PARTPART_OFFSET_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* WHEEL_TRANSFORM_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* BRAKE_TRANSFORM_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* WIDTH_OFFSET_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* SPOILER_FIX_PATH; 	//[Offset: 0x0, Size: 8]
	DataTable* ROOFTOP_FIX_PATH; 	//[Offset: 0x0, Size: 8]
	EGOVehicleMeshDataTable* GetPtr(bool Flush); //Addr 0x75eae85dcc [Final|Native|Static] // UFieldProperty addr: 0x75ac51dd00
Class: EGOWheeledVehicle.Pawn.Actor.Object, Addr: 0x76901d1c80
	EGOVehicleComponent* EGOVehicleComponent; 	//[Offset: 0x0, Size: 8]
	EGOVehicleMeshComponent* Mesh; 	//[Offset: 0x0, Size: 8]
	EGOVehicleDebug* VehicleDebug; 	//[Offset: 0x0, Size: 8]
	Void ReleaseMeshResourcesSceneComponent(SceneComponent* SC); //Addr 0x75eae87060 [Final|Native] // UFieldProperty addr: 0x75ac51cf00
Class: EGOXML.DataAsset.Object, Addr: 0x76901d1a00
	Data(ByteProperty)[] Data; //[Offset: 0x0, Size: 16]
	FString GetString(); //Addr 0x75eae87a48 [Final|Native] // UFieldProperty addr: 0x75ac51ce00
Class: ParticleSystemReplayWrapper.Object, Addr: 0x76901d1780
Class: StreamingSystem.Object, Addr: 0x76901d1500
	delegate EventReplayStateChange; 	//[Offset: 0x0, Size: 16]
	delegate EventSerialize; 	//[Offset: 0x0, Size: 16]
	delegate EventDeserialize; 	//[Offset: 0x0, Size: 16]
	delegate EventInterpolate; 	//[Offset: 0x0, Size: 16]
	delegate EventFinalSerialize; 	//[Offset: 0x0, Size: 16]
	delegate EventDeserializeFinal; 	//[Offset: 0x0, Size: 16]
	Void SwitchGameReplay(bool isReplay); //Addr 0x75eae909b0 [Final|Native] // UFieldProperty addr: 0x75b1336b00
Class: AkPortalComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d1280
	bool bDynamic; 	//[Offset: 0x0, Size: 1]
	enum AkAcousticPortalState InitialState { //[Offset: 0x0, Size: 1]
		Closed = 0
		Open = 5800000000
		AkAcousticPortalState_MAX = 800000000
	};
	float ObstructionRefreshInterval; 	//[Offset: 0x0, Size: 4]
	enum ECollisionChannel ObstructionCollisionChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	bool PortalPlacementValid(); //Addr 0x75eafefa64 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac51c900
Class: AkAcousticPortal.Volume.Brush.Actor.Object, Addr: 0x76901d1000
	AkPortalComponent* Portal; 	//[Offset: 0x0, Size: 8]
	enum AkAcousticPortalState InitialState { //[Offset: 0x0, Size: 1]
		Closed = 0
		Open = 5800000000
		AkAcousticPortalState_MAX = 800000000
	};
	bool bRequiresStateMigration; 	//[Offset: 0x0, Size: 1]
	Void OpenPortal(); //Addr 0x75eaff00cc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51ff00
Class: AkAudioType.Object, Addr: 0x76901d0600
	uint32 ShortID; 	//[Offset: 0x0, Size: 4]
	Object*[] UserData; //[Offset: 0x0, Size: 16]
Class: AkAcousticTexture.AkAudioType.Object, Addr: 0x76901d0880
Class: AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d0380
Class: AkAmbientSound.Actor.Object, Addr: 0x76901d0100
	AkAudioEvent* AkAudioEvent; 	//[Offset: 0x0, Size: 8]
	AkComponent* AkComponent; 	//[Offset: 0x0, Size: 8]
	bool StopWhenOwnerIsDestroyed; 	//[Offset: 0x0, Size: 1]
	bool AutoPost; 	//[Offset: 0x0, Size: 1]
	Void StopAmbientSound(); //Addr 0x75eaff0ae4 [Final|BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51fd00
Class: AkGameObject.SceneComponent.ActorComponent.Object, Addr: 0x76901d8080
	AkAudioEvent* AkAudioEvent; 	//[Offset: 0x0, Size: 8]
	StrProperty EventName; 	//[Offset: 0x0, Size: 16]
	Void Stop(); //Addr 0x75eaffafb8 [BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac51f100
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object, Addr: 0x76901d8300
	bool bUseSpatialAudio; 	//[Offset: 0x0, Size: 1]
	enum ECollisionChannel OcclusionCollisionChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	bool EnableSpotReflectors; 	//[Offset: 0x0, Size: 1]
	float OuterRadius; 	//[Offset: 0x0, Size: 4]
	float InnerRadius; 	//[Offset: 0x0, Size: 4]
	AkAuxBus* EarlyReflectionAuxBus; 	//[Offset: 0x0, Size: 8]
	StrProperty EarlyReflectionAuxBusName; 	//[Offset: 0x0, Size: 16]
	int EarlyReflectionOrder; 	//[Offset: 0x0, Size: 4]
	float EarlyReflectionBusSendGain; 	//[Offset: 0x0, Size: 4]
	float EarlyReflectionMaxPathLength; 	//[Offset: 0x0, Size: 4]
	float roomReverbAuxBusGain; 	//[Offset: 0x0, Size: 4]
	int diffractionMaxEdges; 	//[Offset: 0x0, Size: 4]
	int diffractionMaxPaths; 	//[Offset: 0x0, Size: 4]
	float diffractionMaxPathLength; 	//[Offset: 0x0, Size: 4]
	bool DrawFirstOrderReflections; 	//[Offset: 0x0, Size: 1]
	bool DrawSecondOrderReflections; 	//[Offset: 0x0, Size: 1]
	bool DrawHigherOrderReflections; 	//[Offset: 0x0, Size: 1]
	bool DrawDiffraction; 	//[Offset: 0x0, Size: 1]
	bool StopWhenOwnerDestroyed; 	//[Offset: 0x0, Size: 1]
	float AttenuationScalingFactor; 	//[Offset: 0x0, Size: 4]
	float OcclusionRefreshInterval; 	//[Offset: 0x0, Size: 4]
	bool bUseReverbVolumes; 	//[Offset: 0x0, Size: 1]
	Void UseReverbVolumes(bool inUseReverbVolumes); //Addr 0x75eaff4c08 [Final|BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac541a00
Class: AkPlatformInfo.Object, Addr: 0x76901d9e80
Class: AkAndroidPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901da100
Class: AkAssetData.Object, Addr: 0x76901d9c00
	uint32 CachedHash; 	//[Offset: 0x0, Size: 4]
Class: AkAssetDataWithMedia.AkAssetData.Object, Addr: 0x76901d9980
	AkMediaAsset*[] MediaList; //[Offset: 0x0, Size: 16]
Class: AkAssetPlatformData.Object, Addr: 0x76901d9700
	AkAssetData* CurrentAssetData; 	//[Offset: 0x0, Size: 8]
Class: AkAssetBase.AkAudioType.Object, Addr: 0x76901d9480
	AkAssetPlatformData* PlatformAssetData; 	//[Offset: 0x0, Size: 8]
Class: AkAudioBank.AkAssetBase.AkAudioType.Object, Addr: 0x76901d9200
	bool AutoLoad; 	//[Offset: 0x0, Size: 1]
	<FString, AkAssetPlatformData*> LocalizedPlatformAssetDataMap; //[Offset: 0x0, Size: 80]
	AkAudioEvent* LinkedAkEvents; //[Offset: 0x0, Size: 80]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData; 	//[Offset: 0x0, Size: 8]
Class: AkAssetDataSwitchContainerData.Object, Addr: 0x76901d8f80
	AkGroupValue* GroupValue; 	//[Offset: 0x0, Size: 48]
	AkGroupValue* DefaultGroupValue; 	//[Offset: 0x0, Size: 8]
	AkMediaAsset*[] MediaList; //[Offset: 0x0, Size: 16]
	AkAssetDataSwitchContainerData*[] Children; //[Offset: 0x0, Size: 16]
Class: AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object, Addr: 0x76901d8d00
	AkAssetDataSwitchContainerData*[] SwitchContainers; //[Offset: 0x0, Size: 16]
	AkGroupValue* DefaultGroupValue; 	//[Offset: 0x0, Size: 8]
Class: AkAudioEventData.AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object, Addr: 0x76901d8a80
	float MaxAttenuationRadius; 	//[Offset: 0x0, Size: 4]
	bool IsInfinite; 	//[Offset: 0x0, Size: 1]
	float MinimumDuration; 	//[Offset: 0x0, Size: 4]
	float MaximumDuration; 	//[Offset: 0x0, Size: 4]
	<FString, AkAssetDataSwitchContainer*> LocalizedMedia; //[Offset: 0x0, Size: 80]
	AkAudioEvent* PostedEvents; //[Offset: 0x0, Size: 80]
	AkAuxBus* UserDefinedSends; //[Offset: 0x0, Size: 80]
	AkTrigger* PostedTriggers; //[Offset: 0x0, Size: 80]
	AkGroupValue* GroupValues; //[Offset: 0x0, Size: 80]
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object, Addr: 0x76901d8800
	<FString, AkAssetPlatformData*> LocalizedPlatformAssetDataMap; //[Offset: 0x0, Size: 80]
	AkAudioBank* RequiredBank; 	//[Offset: 0x0, Size: 8]
	AkAssetPlatformData* CurrentLocalizedPlatformData; 	//[Offset: 0x0, Size: 8]
	float MaxAttenuationRadius; 	//[Offset: 0x0, Size: 4]
	bool IsInfinite; 	//[Offset: 0x0, Size: 1]
	float MinimumDuration; 	//[Offset: 0x0, Size: 4]
	float MaximumDuration; 	//[Offset: 0x0, Size: 4]
	float GetMinimumDuration(); //Addr 0x75eaff2cb0 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac51f800
Class: AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object, Addr: 0x76901d8580
	int PostAssociatedAudioInputEvent(); //Addr 0x75eaff318c [BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac541900
Class: AkAuxBus.AkAssetBase.AkAudioType.Object, Addr: 0x76901d7e00
	AkAudioBank* RequiredBank; 	//[Offset: 0x0, Size: 8]
Class: Visual.Object, Addr: 0x76901d7180
Class: Widget.Visual.Object, Addr: 0x76901d7400
	PanelSlot* slot; 	//[Offset: 0x0, Size: 8]
	delegate bIsEnabledDelegate; 	//[Offset: 0x0, Size: 20]
	FText ToolTipText; 	//[Offset: 0x0, Size: 24]
	delegate ToolTipTextDelegate; 	//[Offset: 0x0, Size: 20]
	Widget* ToolTipWidget; 	//[Offset: 0x0, Size: 8]
	delegate ToolTipWidgetDelegate; 	//[Offset: 0x0, Size: 20]
	delegate VisibilityDelegate; 	//[Offset: 0x0, Size: 20]
	WidgetTransform StructProperty; 	//[Offset: 0x0, Size: 28]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bIsVariable; 	//[Offset: 0x0, Size: 1]
	bool bCreatedByConstructionScript; 	//[Offset: 0x0, Size: 1]
	bool bIsEnabled; 	//[Offset: 0x0, Size: 1]
	bool bOverride_Cursor; 	//[Offset: 0x0, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData; 	//[Offset: 0x0, Size: 8]
	bool bIsVolatile; 	//[Offset: 0x0, Size: 1]
	enum EMouseCursor Cursor { //[Offset: 0x0, Size: 1]
		None = 0
		Default = 7500000000
		TextEditBeam = 1600000000
		ResizeLeftRight = 7500000000
		ResizeUpDown = 800000000
		ResizeSouthEast = 7500000000
		ResizeSouthWest = 1900000000
		CardinalCross = 7500000000
		Crosshairs = 300000000
		Hand = 7500000000
		GrabHand = 100000000
		GrabHandClosed = 7500000000
		SlashedCircle = 1000000000
		EyeDropper = 7500000000
		EMouseCursor_MAX = 0
	};
	enum EWidgetClipping Clipping { //[Offset: 0x0, Size: 1]
		Inherit = 0
		ClipToBounds = 0
		ClipToBoundsWithoutIntersecting = 0
		ClipToBoundsAlways = 0
		OnDemand = 0
		EWidgetClipping_MAX = 0
	};
	enum ESlateVisibility Visibility { //[Offset: 0x0, Size: 1]
		Visible = 0
		Collapsed = 0
		Hidden = 0
		HitTestInvisible = 0
		SelfHitTestInvisible = 0
		ESlateVisibility_MAX = 0
	};
	float RenderOpacity; 	//[Offset: 0x0, Size: 4]
	bool EnableGamma; 	//[Offset: 0x0, Size: 1]
	WidgetNavigation* Navigation; 	//[Offset: 0x0, Size: 8]
	enum EFlowDirectionPreference FlowDirectionPreference { //[Offset: 0x0, Size: 1]
		Inherit = 0
		Culture = 45003a00000000
		LeftToRight = 6e006f00000000
		RightToLeft = 4d005f00000000
		EFlowDirectionPreference_MAX = 0
	};
	bool bMirrorForRightToLeftFlowDirection; 	//[Offset: 0x0, Size: 1]
	PropertyBinding*[] NativeBindings; //[Offset: 0x0, Size: 16]
	Void SetVisibility(enum ESlateVisibility InVisibility); //Addr 0x75ed4b4430 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b133d000
Class: PanelWidget.Widget.Visual.Object, Addr: 0x76901d7680
	PanelSlot*[] Slots; //[Offset: 0x0, Size: 16]
	bool RemoveChildAt(int Index); //Addr 0x75ed48da0c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1357d00
Class: ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76901d7900
	PanelSlot* SetContent(Widget* Content); //Addr 0x75ed479d70 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1357a00
Class: AkCheckBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76901d7b80
	enum ECheckBoxState CheckedState { //[Offset: 0x0, Size: 1]
		Unchecked = 0
		Checked = 61004e00000000
		Undetermined = 58004100000000
		ECheckBoxState_MAX = 7600000000
	};
	delegate CheckedStateDelegate; 	//[Offset: 0x0, Size: 20]
	CheckBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1504]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	AkBoolPropertyToControl StructProperty; 	//[Offset: 0x0, Size: 16]
	AkWwiseItemToControl StructProperty; 	//[Offset: 0x0, Size: 64]
	delegate AkOnCheckStateChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnItemDropped; 	//[Offset: 0x0, Size: 16]
	delegate OnPropertyDropped; 	//[Offset: 0x0, Size: 16]
	Void SetIsChecked(bool InIsChecked); //Addr 0x75eaff3f74 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac541000
Class: DrawPortalComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d6f00
Class: DrawRoomComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d6c80
Class: AkFolder.AkAudioType.Object, Addr: 0x76901d6a00
	StrProperty UnrealFolderPath; 	//[Offset: 0x0, Size: 16]
	StrProperty WwiseFolderPath; 	//[Offset: 0x0, Size: 16]
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object, Addr: 0x76901d6780
	Void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor); //Addr 0x75eaffee48 [Final|BlueprinCosmetic|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac548300
Class: AkCallbackInfo.Object, Addr: 0x76901d6500
	AkComponent* AkComponent; 	//[Offset: 0x0, Size: 8]
Class: AkEventCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d6280
	int PlayingID; 	//[Offset: 0x0, Size: 4]
	int eventId; 	//[Offset: 0x0, Size: 4]
Class: AkMIDIEventCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d6000
	enum EAkMidiEventType GetType(); //Addr 0x75eb005704 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac547900
Class: AkMarkerCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d5d80
	int Identifier; 	//[Offset: 0x0, Size: 4]
	int position; 	//[Offset: 0x0, Size: 4]
	StrProperty label; 	//[Offset: 0x0, Size: 16]
Class: AkDurationCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d5b00
	float Duration; 	//[Offset: 0x0, Size: 4]
	float EstimatedDuration; 	//[Offset: 0x0, Size: 4]
	int AudioNodeID; 	//[Offset: 0x0, Size: 4]
	int MediaID; 	//[Offset: 0x0, Size: 4]
	bool bStreaming; 	//[Offset: 0x0, Size: 1]
Class: AkMusicSyncCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d5880
	int PlayingID; 	//[Offset: 0x0, Size: 4]
	AkSegmentInfo StructProperty; 	//[Offset: 0x0, Size: 36]
	enum EAkCallbackType MusicSyncType { //[Offset: 0x0, Size: 1]
		EndOfEvent = 0
		Marker = 7500000000
		Duration = 1600000000
		Starvation = 7500000000
		MusicPlaylistSelect = 800000000
		MusicPlayStarted = 7500000000
		MusicSyncBeat = 1900000000
		MusicSyncBar = 7500000000
		MusicSyncEntry = 300000000
		MusicSyncExit = 7500000000
		MusicSyncGrid = 100000000
		MusicSyncUserCue = 7500000000
		MusicSyncPoint = 1000000000
		MIDIEvent = 7500000000
		EAkCallbackType_MAX = 0
	};
	StrProperty UserCueName; 	//[Offset: 0x0, Size: 16]
Class: AkMusicPlaylistCallbackInfo.AkCallbackInfo.Object, Addr: 0x76901d5600
	int PlayingID; 	//[Offset: 0x0, Size: 4]
	int NumPlaylistItems; 	//[Offset: 0x0, Size: 4]
	int PlaylistSelection; 	//[Offset: 0x0, Size: 4]
	int PlaylistItemDone; 	//[Offset: 0x0, Size: 4]
Class: AkGeometryComponent.AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901d5380
	enum AkMeshType MeshType { //[Offset: 0x0, Size: 1]
		StaticMesh = 0
		CollisionMesh = 5800000000
		AkMeshType_MAX = 800000000
	};
	int LOD; 	//[Offset: 0x0, Size: 4]
	float WeldingThreshold; 	//[Offset: 0x0, Size: 4]
	<MaterialInterface*, structAkGeometrySurfaceOverride> StaticMeshSurfaceOverride; //[Offset: 0x0, Size: 80]
	AkGeometrySurfaceOverride StructProperty; 	//[Offset: 0x0, Size: 24]
	bool bEnableDiffraction; 	//[Offset: 0x0, Size: 1]
	bool bEnableDiffractionOnBoundaryEdges; 	//[Offset: 0x0, Size: 1]
	Actor* AssociatedRoom; 	//[Offset: 0x0, Size: 8]
	AkGeometryData StructProperty; 	//[Offset: 0x0, Size: 80]
	<int, float> SurfaceAreas; //[Offset: 0x0, Size: 80]
	Void UpdateGeometry(); //Addr 0x75eb006634 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac547500
Class: AkGroupValue.AkAudioType.Object, Addr: 0x76901df600
	AkMediaAsset*[] MediaDependencies; //[Offset: 0x0, Size: 16]
	uint32 GroupShortID; 	//[Offset: 0x0, Size: 4]
Class: AkHololensInitializationSettings.Object, Addr: 0x76901df380
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkHololensAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 48]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb0070ac [Final|Native] // UFieldProperty addr: 0x75ac547400
Class: AkHololensPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901df100
Class: AkInitBankAssetData.AkAssetDataWithMedia.AkAssetData.Object, Addr: 0x76901dee80
	structAkPluginInfo[] PluginInfos; //[Offset: 0x0, Size: 16]
Class: AkInitBank.AkAssetBase.AkAudioType.Object, Addr: 0x76901dec00
	FString[] AvailableAudioCultures; //[Offset: 0x0, Size: 16]
	StrProperty DefaultLanguage; 	//[Offset: 0x0, Size: 16]
Class: AkIOSInitializationSettings.Object, Addr: 0x76901de980
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkAudioSession StructProperty; 	//[Offset: 0x0, Size: 12]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 44]
Class: AkIOSPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901de700
Class: AkItemBoolPropertiesConv.BlueprintFunctionLibrary.Object, Addr: 0x76901de480
	FText Conv_FAkBoolPropertyToControlToText(constoutrefstructAkBoolPropertyToControl INAkBoolPropertyToControl); //Addr 0x75eb00d4b4 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac547200
Class: AkItemBoolProperties.Widget.Visual.Object, Addr: 0x76901de200
	delegate OnSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnPropertyDragged; 	//[Offset: 0x0, Size: 16]
	Void SetSearchText(FString newText); //Addr 0x75eb00da08 [Final|BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac546f00
Class: AkItemPropertiesConv.BlueprintFunctionLibrary.Object, Addr: 0x76901ddf80
	FText Conv_FAkPropertyToControlToText(constoutrefstructAkPropertyToControl INAkPropertyToControl); //Addr 0x75eb00e110 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac546d00
Class: AkItemProperties.Widget.Visual.Object, Addr: 0x76901ddd00
	delegate OnSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnPropertyDragged; 	//[Offset: 0x0, Size: 16]
	Void SetSearchText(FString newText); //Addr 0x75eb00e664 [Final|BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac546a00
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901dda80
	bool bEnable; 	//[Offset: 0x0, Size: 1]
	bool bForceUseBoundBoxForEncompasses; 	//[Offset: 0x0, Size: 1]
	float SendLevel; 	//[Offset: 0x0, Size: 4]
	float FadeRate; 	//[Offset: 0x0, Size: 4]
	float Priority; 	//[Offset: 0x0, Size: 4]
	bool AutoAssignAuxBus; 	//[Offset: 0x0, Size: 1]
	AkAuxBus* AuxBus; 	//[Offset: 0x0, Size: 8]
	StrProperty AuxBusName; 	//[Offset: 0x0, Size: 16]
	AkAuxBus* AuxBusManual; 	//[Offset: 0x0, Size: 8]
	Void AssociateAkTextureSetComponent(AkAcousticTextureSetComponent* textureSetComponent); //Addr 0x75eb00ebf8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac546900
Class: AkLinuxInitializationSettings.Object, Addr: 0x76901dd800
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAdvancedInitializationSettingsWithMultiCoreRendering StructProperty; 	//[Offset: 0x0, Size: 48]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb00f080 [Final|Native] // UFieldProperty addr: 0x75ac546800
Class: AkLinuxPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901dd580
Class: AkMacInitializationSettings.Object, Addr: 0x76901dd300
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAdvancedInitializationSettingsWithMultiCoreRendering StructProperty; 	//[Offset: 0x0, Size: 48]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb00f524 [Final|Native] // UFieldProperty addr: 0x75ac546700
Class: AkMacPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901dd080
Class: AkMediaAssetData.Object, Addr: 0x76901dce00
	bool IsStreamed; 	//[Offset: 0x0, Size: 1]
	bool UseDeviceMemory; 	//[Offset: 0x0, Size: 1]
Class: AkMediaAsset.Object, Addr: 0x76901dcb80
	uint32 ID; 	//[Offset: 0x0, Size: 4]
	bool AutoLoad; 	//[Offset: 0x0, Size: 1]
	Object*[] UserData; //[Offset: 0x0, Size: 16]
	AkMediaAssetData* CurrentMediaAssetData; 	//[Offset: 0x0, Size: 8]
Class: AkLocalizedMediaAsset.AkMediaAsset.Object, Addr: 0x76901dc900
Class: AkExternalMediaAsset.AkMediaAsset.Object, Addr: 0x76901dc680
Class: AkPlatformInitialisationSettingsBase.Interface.Object, Addr: 0x76901dc400
Class: AkPS4InitializationSettings.Object, Addr: 0x76901dbf00
	AkCommonInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 96]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkPS4AdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 56]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb01083c [Final|Native] // UFieldProperty addr: 0x75ac546600
Class: AkPS4PlatformInfo.AkPlatformInfo.Object, Addr: 0x76901dbc80
Class: AkReverbVolume.Volume.Brush.Actor.Object, Addr: 0x76901dba00
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	AkAuxBus* AuxBus; 	//[Offset: 0x0, Size: 8]
	StrProperty AuxBusName; 	//[Offset: 0x0, Size: 16]
	float SendLevel; 	//[Offset: 0x0, Size: 4]
	float FadeRate; 	//[Offset: 0x0, Size: 4]
	float Priority; 	//[Offset: 0x0, Size: 4]
	AkLateReverbComponent* LateReverbComponent; 	//[Offset: 0x0, Size: 8]
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object, Addr: 0x76901db780
	bool bEnable; 	//[Offset: 0x0, Size: 1]
	bool bDynamic; 	//[Offset: 0x0, Size: 1]
	float Priority; 	//[Offset: 0x0, Size: 4]
	float WallOcclusion; 	//[Offset: 0x0, Size: 4]
	float AuxSendLevel; 	//[Offset: 0x0, Size: 4]
	bool AutoPost; 	//[Offset: 0x0, Size: 1]
	AkAcousticTextureSetComponent* GeometryComponent; 	//[Offset: 0x0, Size: 8]
	Void SetGeometryComponent(AkAcousticTextureSetComponent* textureSetComponent); //Addr 0x75eb010fb8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac546400
Class: AkRtpc.AkAudioType.Object, Addr: 0x76901db500
Class: AkSettingsPerUser.Object, Addr: 0x76901db000
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	FilePath StructProperty; 	//[Offset: 0x0, Size: 16]
	bool EnableAutomaticAssetSynchronization; 	//[Offset: 0x0, Size: 1]
	StrProperty WaapiIPAddress; 	//[Offset: 0x0, Size: 16]
	uint32 WaapiPort; 	//[Offset: 0x0, Size: 4]
	bool bAutoConnectToWAAPI; 	//[Offset: 0x0, Size: 1]
	bool AutoSyncSelection; 	//[Offset: 0x0, Size: 1]
	bool SuppressWwiseProjectPathWarnings; 	//[Offset: 0x0, Size: 1]
	bool SoundDataGenerationSkipLanguage; 	//[Offset: 0x0, Size: 1]
Class: AkSlider.Widget.Visual.Object, Addr: 0x76901dad80
	float Value; 	//[Offset: 0x0, Size: 4]
	delegate ValueDelegate; 	//[Offset: 0x0, Size: 20]
	SliderStyle StructProperty; 	//[Offset: 0x0, Size: 880]
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IndentHandle; 	//[Offset: 0x0, Size: 1]
	bool Locked; 	//[Offset: 0x0, Size: 1]
	float StepSize; 	//[Offset: 0x0, Size: 4]
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	AkPropertyToControl StructProperty; 	//[Offset: 0x0, Size: 16]
	AkWwiseItemToControl StructProperty; 	//[Offset: 0x0, Size: 64]
	delegate OnValueChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnItemDropped; 	//[Offset: 0x0, Size: 16]
	delegate OnPropertyDropped; 	//[Offset: 0x0, Size: 16]
	Void SetValue(float InValue); //Addr 0x75eb017810 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac549b00
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object, Addr: 0x76901dab00
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet; 	//[Offset: 0x0, Size: 8]
	AkLateReverbComponent* LateReverb; 	//[Offset: 0x0, Size: 8]
	AkRoomComponent* Room; 	//[Offset: 0x0, Size: 8]
Class: AkSurfaceReflectorSetComponent.AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901dfb00
	bool bEnableSurfaceReflectors; 	//[Offset: 0x0, Size: 1]
	structAkSurfacePoly[] AcousticPolys; //[Offset: 0x0, Size: 16]
	bool bEnableDiffraction; 	//[Offset: 0x0, Size: 1]
	bool bEnableDiffractionOnBoundaryEdges; 	//[Offset: 0x0, Size: 1]
	Actor* AssociatedRoom; 	//[Offset: 0x0, Size: 8]
	Void UpdateSurfaceReflectorSet(); //Addr 0x75eb0188dc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac549800
Class: AkSpotReflector.Actor.Object, Addr: 0x76901da880
	AkAuxBus* EarlyReflectionAuxBus; 	//[Offset: 0x0, Size: 8]
	StrProperty EarlyReflectionAuxBusName; 	//[Offset: 0x0, Size: 16]
	AkAcousticTexture* AcousticTexture; 	//[Offset: 0x0, Size: 8]
	float DistanceScalingFactor; 	//[Offset: 0x0, Size: 4]
	float Level; 	//[Offset: 0x0, Size: 4]
Class: AkStateValue.AkGroupValue.AkAudioType.Object, Addr: 0x76901da600
Class: AkSubmixInputComponent.AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object, Addr: 0x76901dfd80
	SoundSubmix* SubmixToRecord; 	//[Offset: 0x0, Size: 8]
Class: AkSwitchInitializationSettings.Object, Addr: 0x76901df880
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithCommSelection StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAdvancedInitializationSettingsWithMultiCoreRendering StructProperty; 	//[Offset: 0x0, Size: 48]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb018f5c [Final|Native] // UFieldProperty addr: 0x75ac549700
Class: AkSwitchPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e5100
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object, Addr: 0x76901e4e80
Class: AkTrigger.AkAudioType.Object, Addr: 0x76901e4c00
Class: AkTVOSInitializationSettings.Object, Addr: 0x76901e4980
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkAudioSession StructProperty; 	//[Offset: 0x0, Size: 12]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 44]
Class: AkTVOSPlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e4700
Class: AkWaapiCalls.BlueprintFunctionLibrary.Object, Addr: 0x76901e4480
	structAKWaapiJsonObject Unsubscribe(constoutrefstructAkWaapiSubscriptionId SubscriptionId, outbool UnsubscriptionDone); //Addr 0x75eb01a0a4 [Final|BlueprinCosmetic|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac548e00
Class: SAkWaapiFieldNamesConv.BlueprintFunctionLibrary.Object, Addr: 0x76901e3f80
	FText Conv_FAkWaapiFieldNamesToText(constoutrefstructAkWaapiFieldNames INAkWaapiFieldNames); //Addr 0x75eb01b388 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac548c00
Class: AkWaapiJsonManager.BlueprintFunctionLibrary.Object, Addr: 0x76901e3d00
	structAKWaapiJsonObject SetStringField(constoutrefstructAkWaapiFieldNames FieldName, FString FieldValue, structAKWaapiJsonObject Target); //Addr 0x75eb01e00c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac54c000
Class: AkWaapiUriConv.BlueprintFunctionLibrary.Object, Addr: 0x76901e3a80
	FText Conv_FAkWaapiUriToText(constoutrefstructAkWaapiUri INAkWaapiUri); //Addr 0x75eb0224a0 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac54be00
Class: AkWindowsInitializationSettings.Object, Addr: 0x76901e3800
	AkCommonInitializationSettingsWithSampleRate StructProperty; 	//[Offset: 0x0, Size: 104]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkWindowsAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 52]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb022ad8 [Final|Native] // UFieldProperty addr: 0x75ac54bd00
Class: AkWin32PlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e3580
Class: AkWin64PlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e3300
Class: AkWindowsPlatformInfo.AkWin64PlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e3080
Class: AkWwiseTree.Widget.Visual.Object, Addr: 0x76901e2e00
	delegate OnSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnItemDragged; 	//[Offset: 0x0, Size: 16]
	Void SetSearchText(FString newText); //Addr 0x75eb0255d8 [Final|BlueprinCosmetic|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54ba00
Class: AkWwiseTreeSelector.Widget.Visual.Object, Addr: 0x76901e2b80
	delegate OnSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnItemDragged; 	//[Offset: 0x0, Size: 16]
Class: AkXboxOneInitializationSettings.Object, Addr: 0x76901e2900
	AkCommonInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 96]
	AkXboxOneApuHeapInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 8]
	AkCommunicationSettingsWithSystemInitialization StructProperty; 	//[Offset: 0x0, Size: 40]
	AkXboxOneAdvancedInitializationSettings StructProperty; 	//[Offset: 0x0, Size: 52]
	Void MigrateMultiCoreRendering(bool NewValue); //Addr 0x75eb025f5c [Final|Native] // UFieldProperty addr: 0x75ac54b900
Class: AkXboxOnePlatformInfo.AkPlatformInfo.Object, Addr: 0x76901e2680
Class: MovieSceneSignedObject.Object, Addr: 0x76901e1f00
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901e2180
	MovieSceneSectionEvalOptions StructProperty; 	//[Offset: 0x0, Size: 2]
	MovieSceneEasingSettings StructProperty; 	//[Offset: 0x0, Size: 56]
	MovieSceneFrameRange StructProperty; 	//[Offset: 0x0, Size: 16]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	int RowIndex; 	//[Offset: 0x0, Size: 4]
	int OverlapPriority; 	//[Offset: 0x0, Size: 4]
	bool bIsActive; 	//[Offset: 0x0, Size: 1]
	bool bIsLocked; 	//[Offset: 0x0, Size: 1]
	float StartTime; 	//[Offset: 0x0, Size: 4]
	float EndTime; 	//[Offset: 0x0, Size: 4]
	float PrerollTime; 	//[Offset: 0x0, Size: 4]
	float PostrollTime; 	//[Offset: 0x0, Size: 4]
	bool bIsInfinite; 	//[Offset: 0x0, Size: 1]
	bool bSupportsInfiniteRange; 	//[Offset: 0x0, Size: 1]
	OptionalMovieSceneBlendType StructProperty; 	//[Offset: 0x0, Size: 2]
	Void SetRowIndex(int NewRowIndex); //Addr 0x75ed1cfed4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54a900
Class: MovieSceneBuiltInEasingFunction.Object, Addr: 0x769028f880
	enum EMovieSceneBuiltInEasing Type { //[Offset: 0x0, Size: 1]
		Linear = 0
		SinIn = 0
		SinOut = 0
		SinInOut = 0
		QuadIn = 0
		QuadOut = 0
		QuadInOut = 0
		CubicIn = 0
		CubicOut = 0
		CubicInOut = 0
		QuartIn = 0
		QuartOut = 0
		QuartInOut = 0
		QuintIn = 0
		QuintOut = 0
		QuintInOut = 0
		ExpoIn = 0
		ExpoOut = 0
		ExpoInOut = 0
		CircIn = 0
		CircOut = 0
		CircInOut = 0
		EMovieSceneBuiltInEasing_MAX = 0
	};
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901e2400
	AkAudioEvent* Event; 	//[Offset: 0x0, Size: 8]
	bool RetriggerEvent; 	//[Offset: 0x0, Size: 1]
	int ScrubTailLengthMs; 	//[Offset: 0x0, Size: 4]
	bool StopAtSectionEnd; 	//[Offset: 0x0, Size: 1]
	StrProperty EventName; 	//[Offset: 0x0, Size: 16]
	float MaxSourceDuration; 	//[Offset: 0x0, Size: 4]
	StrProperty MaxDurationSourceID; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e1780
	MovieSceneTrackEvalOptions StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bIsEvalDisabled; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneTrackEvaluationField StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e1a00
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
	bool bIsAMasterTrack; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e1c80
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901e1500
	AkRtpc* RTPC; 	//[Offset: 0x0, Size: 8]
	StrProperty Name; 	//[Offset: 0x0, Size: 16]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	MovieSceneFloatChannelSerializationHelper StructProperty; 	//[Offset: 0x0, Size: 48]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e1280
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e0d80
Class: MovieSceneStoryTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e1000
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: PostEventAsync.BlueprintAsyncActionBase.Object, Addr: 0x76901e0b00
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	PostEventAsync* PostEventAsync(constObject* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, constoutrefdelegate PostEventCallback, constoutrefstructAkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed); //Addr 0x75eb02766c [Final|BlueprinCosmetic|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac54a700
Class: PostEventAtLocationAsync.BlueprintAsyncActionBase.Object, Addr: 0x76901e0600
	delegate Completed; 	//[Offset: 0x0, Size: 16]
	PostEventAtLocationAsync* PostEventAtLocationAsync(constObject* WorldContextObject, AkAudioEvent* AkEvent, structVector Location, structRotator Orientation); //Addr 0x75eb027e00 [Final|BlueprinCosmetic|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac54e700
Class: StoryBGMSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901e0380
	StrProperty BGM; 	//[Offset: 0x0, Size: 16]
	float Duration; 	//[Offset: 0x0, Size: 4]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	Void SetStartOffset(structFrameNumber InStartOffset); //Addr 0x75eb0283bc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54e500
Class: StoryBGMTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901e0100
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: StoryVoiceSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901ea380
	StrProperty VoiceEvent; 	//[Offset: 0x0, Size: 16]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	Void SetStartOffset(structFrameNumber InStartOffset); //Addr 0x75eb028b30 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54e300
Class: StoryVoiceTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901ea100
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76901e9e80
	Void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, structVector PlanePosition, structVector PlaneNormal, bool bCreateOtherHalf, outProceduralMeshComponent* OutOtherHalfProcMesh, enum EProcMeshSliceCapOption CapOption, MaterialInterface* CapMaterial); //Addr 0x75eb043554 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac54d900
Class: TextLayoutWidget.Widget.Visual.Object, Addr: 0x76901e9980
	ShapedTextOptions StructProperty; 	//[Offset: 0x0, Size: 3]
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	enum ETextWrappingPolicy WrappingPolicy { //[Offset: 0x0, Size: 1]
		DefaultWrapping = 0
		AllowPerCharacterWrapping = 72006500000000
		ETextWrappingPolicy_MAX = 800000000
	};
	bool AutoWrapText; 	//[Offset: 0x0, Size: 1]
	float WrapTextAt; 	//[Offset: 0x0, Size: 4]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	float LineHeightPercentage; 	//[Offset: 0x0, Size: 4]
	Void SetJustification(InJustification(ByteProperty) InJustification); //Addr 0x75ed4a36ac [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1356f00
Class: AdaptText.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76901e9c00
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bUseSdfText; 	//[Offset: 0x0, Size: 1]
	SdfFontSet* SdfFontSet; 	//[Offset: 0x0, Size: 8]
	float FontThickness; 	//[Offset: 0x0, Size: 4]
	int FontSize; 	//[Offset: 0x0, Size: 4]
	int Kerning; 	//[Offset: 0x0, Size: 4]
	int LineSpacing; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float ProjectionThickness; 	//[Offset: 0x0, Size: 4]
	float ProjectionBlur; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ShadowColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	float TextMinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool bWrapWithInvalidationPanel; 	//[Offset: 0x0, Size: 1]
	bool bAutoWrapText; 	//[Offset: 0x0, Size: 1]
	enum ETextTransformPolicy TextTransformPolicy { //[Offset: 0x0, Size: 1]
		None = 0
		ToLower = 65007000000000
		ToUpper = 74007200000000
		ETextTransformPolicy_MAX = 7500000000
	};
	enum ETextAdaptType AdapterType { //[Offset: 0x0, Size: 1]
		Ellipsis = 0
		BestFit = 0
		Marquee = 0
		ETextAdaptType_MAX = 7500000000
	};
	float MaxLines; 	//[Offset: 0x0, Size: 4]
	int MinFontSize; 	//[Offset: 0x0, Size: 4]
	int MaxLineNum; 	//[Offset: 0x0, Size: 4]
	int CurrentFontSize; 	//[Offset: 0x0, Size: 4]
	enum ETextMarqueeDirection MarqueeDirection { //[Offset: 0x0, Size: 1]
		LeftToRight = 0
		RightToLeft = 79006300000000
		TopToBottom = 73006e00000000
		BottomToTop = 4d005f00000000
		ETextMarqueeDirection_MAX = 0
	};
	enum ETextMarqueePolicy MarqueePolicy { //[Offset: 0x0, Size: 1]
		Always = 0
		OverflowX = 79006300000000
		OverflowY = 73006e00000000
		OverflowBoth = 4d005f00000000
		ETextMarqueePolicy_MAX = 0
	};
	int MarqueeSpeed; 	//[Offset: 0x0, Size: 4]
	enum ETextMarqueeType MarqueeType { //[Offset: 0x0, Size: 1]
		Default = 0
		DelayStart = 3a000000000000
		ETextMarqueeType_MAX = 800000000
	};
	float MarqueeStartDelay; 	//[Offset: 0x0, Size: 4]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	float WidthOverride; 	//[Offset: 0x0, Size: 4]
	float HeightOverride; 	//[Offset: 0x0, Size: 4]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float MinDesiredHeight; 	//[Offset: 0x0, Size: 4]
	float MaxDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float MaxDesiredHeight; 	//[Offset: 0x0, Size: 4]
	bool bOverride_WidthOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_HeightOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredHeight; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredHeight; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxLines; 	//[Offset: 0x0, Size: 1]
	delegate OnTextMarqueeEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnTextFontSizeChanged; 	//[Offset: 0x0, Size: 16]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	bool bSimpleTextMode; 	//[Offset: 0x0, Size: 1]
	Void SetWrapTextAt(float InWrapTextAt); //Addr 0x75eb14a970 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b90a00
Class: DPIScalingRule.DPICustomScalingRule.Object, Addr: 0x76901e9700
Class: LensFlareComponent.ActorComponent.Object, Addr: 0x76901e9200
	structLensFlareData[] LensFlareData; //[Offset: 0x0, Size: 16]
	float OcclusionSpeed; 	//[Offset: 0x0, Size: 4]
	float ScreenOcclusionSpeed; 	//[Offset: 0x0, Size: 4]
	MaterialParameterCollection* LensFlareMaterialInfo; 	//[Offset: 0x0, Size: 8]
	UserWidget* WidgetClass; 	//[Offset: 0x0, Size: 8]
Class: LoadingTextBlock.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76901e8f80
	FText Text; 	//[Offset: 0x0, Size: 24]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bUseSdfText; 	//[Offset: 0x0, Size: 1]
	SdfFontSet* SdfFontSet; 	//[Offset: 0x0, Size: 8]
	float FontThickness; 	//[Offset: 0x0, Size: 4]
	int FontSize; 	//[Offset: 0x0, Size: 4]
	int Kerning; 	//[Offset: 0x0, Size: 4]
	int LineSpacing; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float ProjectionThickness; 	//[Offset: 0x0, Size: 4]
	float ProjectionBlur; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ShadowColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool bWrapWithInvalidationPanel; 	//[Offset: 0x0, Size: 1]
	bool bAutoWrapText; 	//[Offset: 0x0, Size: 1]
	bool bSimpleTextMode; 	//[Offset: 0x0, Size: 1]
	Void SetWrapTextAt(float InWrapTextAt); //Addr 0x75eb14db40 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54c800
Class: MaterialTextureParameterWidget.Object, Addr: 0x76901e8d00
	TextureRenderTarget2D* RenderTarget; 	//[Offset: 0x0, Size: 8]
	Void SetRenderOnRequest(bool InValue); //Addr 0x75eb14f1b0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac54fd00
Class: UserWidget.Widget.Visual.Object, Addr: 0x76901e8800
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	delegate ForegroundColorDelegate; 	//[Offset: 0x0, Size: 20]
	delegate OnVisibilityChanged; 	//[Offset: 0x0, Size: 16]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers; //[Offset: 0x0, Size: 16]
	UMGSequenceTickManager* AnimationTickManager; 	//[Offset: 0x0, Size: 8]
	UMGSequencePlayer*[] StoppedSequencePlayers; //[Offset: 0x0, Size: 16]
	structNamedSlotBinding[] NamedSlotBindings; //[Offset: 0x0, Size: 16]
	WidgetTree* WidgetTree; 	//[Offset: 0x0, Size: 8]
	int Priority; 	//[Offset: 0x0, Size: 4]
	bool bSupportsKeyboardFocus; 	//[Offset: 0x0, Size: 1]
	bool bIsFocusable; 	//[Offset: 0x0, Size: 1]
	bool bStopAction; 	//[Offset: 0x0, Size: 1]
	bool bHasScriptImplementedTick; 	//[Offset: 0x0, Size: 1]
	bool bHasScriptImplementedPaint; 	//[Offset: 0x0, Size: 1]
	enum EWidgetTickFrequency TickFrequency { //[Offset: 0x0, Size: 1]
		Never = 0
		Auto = 65006400000000
		EWidgetTickFrequency_MAX = 0
	};
	InputComponent* InputComponent; 	//[Offset: 0x0, Size: 8]
	structAnimationEventBinding[] AnimationCallbacks; //[Offset: 0x0, Size: 16]
	Void UnregisterInputComponent(); //Addr 0x75ed4a68c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a5d00
Class: PersistentUserWIdget.UserWidget.Widget.Visual.Object, Addr: 0x76901e8a80
Class: Image.Widget.Visual.Object, Addr: 0x76901e8300
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	delegate BrushDelegate; 	//[Offset: 0x0, Size: 20]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	bool bFlipForRightToLeftFlowDirection; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseButtonDownEvent; 	//[Offset: 0x0, Size: 20]
	Void SetOpacity(float InOpacity); //Addr 0x75ed481fcc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a4f00
Class: RaceBackground.Image.Widget.Visual.Object, Addr: 0x76901e8580
Class: CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e7e00
	CanvasPanelSlot* AddChildToCanvas(Widget* Content); //Addr 0x75ed4748b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a4e00
Class: RaceButton.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e8080
	ButtonStyle StructProperty; 	//[Offset: 0x0, Size: 680]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool ClickNoScale; 	//[Offset: 0x0, Size: 1]
	enum EButtonClickMethod ClickMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		MouseDown = 3a003a00000000
		MouseUp = 68006300000000
		PreciseClick = 0
		EButtonClickMethod_MAX = 0
	};
	enum EButtonTouchMethod TouchMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		Down = 42004500000000
		PreciseTap = 65004d00000000
		EButtonTouchMethod_MAX = 6c006100000000
	};
	enum EButtonPressMethod PressMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		ButtonPress = 42004500000000
		ButtonRelease = 65004d00000000
		EButtonPressMethod_MAX = 7500000000
	};
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnClicked; 	//[Offset: 0x0, Size: 16]
	delegate OnPressed; 	//[Offset: 0x0, Size: 16]
	delegate OnReleased; 	//[Offset: 0x0, Size: 16]
	delegate OnHovered; 	//[Offset: 0x0, Size: 16]
	delegate OnUnhovered; 	//[Offset: 0x0, Size: 16]
	Void SetTouchMethod(InTouchMethod(ByteProperty) InTouchMethod); //Addr 0x75eb150738 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a4600
Class: RaceCanvas.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e7b80
	delegate OnTouchBegan; 	//[Offset: 0x0, Size: 16]
	delegate OnClicked; 	//[Offset: 0x0, Size: 16]
	delegate OnTouchEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnTouchMove; 	//[Offset: 0x0, Size: 16]
	delegate OnTouchLeave; 	//[Offset: 0x0, Size: 16]
	bool ReplyHandled; 	//[Offset: 0x0, Size: 1]
	bool EnableTouchMove; 	//[Offset: 0x0, Size: 1]
	bool bSwallowTouch; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSwallowTouch(bool Swallow); //Addr 0x75eb151490 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a4300
Class: RaceCheckBox.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e7900
	enum ECheckBoxState CheckedState { //[Offset: 0x0, Size: 1]
		Unchecked = 0
		Checked = 61004e00000000
		Undetermined = 58004100000000
		ECheckBoxState_MAX = 7600000000
	};
	AnchorData StructProperty; 	//[Offset: 0x0, Size: 40]
	delegate CheckedStateDelegate; 	//[Offset: 0x0, Size: 20]
	CheckBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1504]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnCheckStateChanged; 	//[Offset: 0x0, Size: 16]
	Void SetIsChecked(bool InIsChecked); //Addr 0x75eb151df0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a8000
Class: RaceCurve.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e7680
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int AxisHorizonCount; 	//[Offset: 0x0, Size: 4]
	int AxisVerticalCount; 	//[Offset: 0x0, Size: 4]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	bool isFirstCurveLineOnly; 	//[Offset: 0x0, Size: 1]
	bool isSecondCurveLineOnly; 	//[Offset: 0x0, Size: 1]
	Void SynchronizeProperties(); //Addr 0x75eb1526e4 [Native] // UFieldProperty addr: 0x75ac5a7600
Class: RaceEditableText.Widget.Visual.Object, Addr: 0x76901e7400
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	StrProperty HintTextID; 	//[Offset: 0x0, Size: 16]
	EditableTextStyle StructProperty; 	//[Offset: 0x0, Size: 568]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* BackgroundImageSelected; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* BackgroundImageComposing; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* CaretImage; 	//[Offset: 0x0, Size: 8]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool IsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool IsPassword; 	//[Offset: 0x0, Size: 1]
	float MinimumDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool IsCaretMovedWhenGainFocus; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextWhenFocused; 	//[Offset: 0x0, Size: 1]
	bool RevertTextOnEscape; 	//[Offset: 0x0, Size: 1]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextOnCommit; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardType KeyboardType { //[Offset: 0x0, Size: 1]
		Default = 0
		Number = 0
		Web = 0
		Email = 0
		Password = 0
		AlphaNumeric = 0
		EVirtualKeyboardType_MAX = 0
	};
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardTrigger VirtualKeyboardTrigger { //[Offset: 0x0, Size: 1]
		OnFocusByPointer = 0
		OnAllFocusEvents = 3a000000000000
		EVirtualKeyboardTrigger_MAX = 800000000
	};
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	ShapedTextOptions StructProperty; 	//[Offset: 0x0, Size: 3]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	delegate OnShowKeyboard; 	//[Offset: 0x0, Size: 16]
	delegate OnHideKeyboard; 	//[Offset: 0x0, Size: 16]
	Void SetVirtualKeyboardTrigger(enum EVirtualKeyboardTrigger InVirtualKeyboardTrigger); //Addr 0x75eb153914 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b93800
Class: RaceEditableTextBox.Widget.Visual.Object, Addr: 0x76901e7180
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	EditableTextBoxStyle StructProperty; 	//[Offset: 0x0, Size: 2144]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	StrProperty HintTextID; 	//[Offset: 0x0, Size: 16]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool IsPassword; 	//[Offset: 0x0, Size: 1]
	float MinimumDesiredWidth; 	//[Offset: 0x0, Size: 4]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IsCaretMovedWhenGainFocus; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextWhenFocused; 	//[Offset: 0x0, Size: 1]
	bool RevertTextOnEscape; 	//[Offset: 0x0, Size: 1]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextOnCommit; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardType KeyboardType { //[Offset: 0x0, Size: 1]
		Default = 0
		Number = 0
		Web = 0
		Email = 0
		Password = 0
		AlphaNumeric = 0
		EVirtualKeyboardType_MAX = 0
	};
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	ShapedTextOptions StructProperty; 	//[Offset: 0x0, Size: 3]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	delegate OnReceiveFocus; 	//[Offset: 0x0, Size: 16]
	delegate OnShowKeyboard; 	//[Offset: 0x0, Size: 16]
	delegate OnHideKeyboard; 	//[Offset: 0x0, Size: 16]
	Void SetTextID(FString InTextID); //Addr 0x75eb1555c4 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b92600
Class: RaceImage.Image.Widget.Visual.Object, Addr: 0x76901e6f00
	float Pitch; 	//[Offset: 0x0, Size: 4]
	Void SetPitch(float InPitch); //Addr 0x75eb1562f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a7500
Class: RaceListViewBase.Widget.Visual.Object, Addr: 0x76901e6780
	UserWidget* EntryWidgetClass; 	//[Offset: 0x0, Size: 8]
	classUserWidget[] EntryWidgetClassList; //[Offset: 0x0, Size: 16]
	float WheelScrollMultiplier; 	//[Offset: 0x0, Size: 4]
	bool bEnableScrollAnimation; 	//[Offset: 0x0, Size: 1]
	bool bEnableFixedLineOffset; 	//[Offset: 0x0, Size: 1]
	bool bScrollbarVisibility; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	ScrollBoxStyle StructProperty; 	//[Offset: 0x0, Size: 680]
	ScrollBarStyle StructProperty; 	//[Offset: 0x0, Size: 1304]
	float FixedLineScrollOffset; 	//[Offset: 0x0, Size: 4]
	bool AllowOverscroll; 	//[Offset: 0x0, Size: 1]
	delegate BP_OnEntryGenerated; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnEntryReleased; 	//[Offset: 0x0, Size: 16]
	UserWidgetPool StructProperty; 	//[Offset: 0x0, Size: 128]
	Void SetWheelScrollMultiplier(float NewWheelScrollMultiplier); //Addr 0x75eb158fd0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a6700
Class: RaceListView.RaceListViewBase.Widget.Visual.Object, Addr: 0x76901e6a00
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	enum ESelectionMode SelectionMode { //[Offset: 0x0, Size: 1]
		None = 0
		Single = 75007400000000
		SingleToggle = 69004400000000
		Multi = 6e00000000
		ESelectionMode_MAX = 0
	};
	enum EConsumeMouseWheel ConsumeMouseWheel { //[Offset: 0x0, Size: 1]
		WhenScrollingPossible = 0
		Always = 43004500000000
		Never = 57006500000000
		EConsumeMouseWheel_MAX = 7500000000
	};
	bool bClearSelectionOnClick; 	//[Offset: 0x0, Size: 1]
	bool bIsFocusable; 	//[Offset: 0x0, Size: 1]
	float EntrySpacing; 	//[Offset: 0x0, Size: 4]
	bool bReturnFocusToSelection; 	//[Offset: 0x0, Size: 1]
	Object*[] ListItems; //[Offset: 0x0, Size: 16]
	delegate BP_OnEntryInitialized; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemClicked; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemDoubleClicked; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemIsHoveredChanged; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemScrolledIntoView; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnListViewScrolled; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnListViewFinishedScrolling; 	//[Offset: 0x0, Size: 16]
	Void UpdateItem(Object* Item, int Index); //Addr 0x75eb157960 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5a8d00
Class: RaceListViewDesignerPreviewItem.Object, Addr: 0x76901e6c80
Class: RaceMesh.Image.Widget.Visual.Object, Addr: 0x76901e6500
	structVector2D[] Positions; //[Offset: 0x0, Size: 16]
	structColor[] Colors; //[Offset: 0x0, Size: 16]
	int[] Indexes; //[Offset: 0x0, Size: 16]
	enum EMeshDataType MeshDataType { //[Offset: 0x0, Size: 1]
		EDET_LINE = 0
		EDET_MESH = 3a000000000000
		EDET_MAX = 9300000000
	};
	float Thickness; 	//[Offset: 0x0, Size: 4]
	Void SetThickness(float InThickness); //Addr 0x75eb159e00 [Final|Native] // UFieldProperty addr: 0x75ac5a8a00
Class: RaceMinimap.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e6280
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	structSlateBrush[] VehicleBrush; //[Offset: 0x0, Size: 16]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	MaterialInterface* EffectMaterial; 	//[Offset: 0x0, Size: 8]
	delegate TrackBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate PlayerBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate OtherBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate StartBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate MidBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate FinishBrushDelegate; 	//[Offset: 0x0, Size: 20]
	float DimStartPercent; 	//[Offset: 0x0, Size: 4]
	float DimEndPercent; 	//[Offset: 0x0, Size: 4]
	float ViewProgress; 	//[Offset: 0x0, Size: 4]
	float TrackWidth; 	//[Offset: 0x0, Size: 4]
	float CameraHeightScale; 	//[Offset: 0x0, Size: 4]
	float ClipDistance; 	//[Offset: 0x0, Size: 4]
	float RotateSpeed; 	//[Offset: 0x0, Size: 4]
	float ClipHeightOffset; 	//[Offset: 0x0, Size: 4]
	bool IsUse3D; 	//[Offset: 0x0, Size: 1]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	float FOV; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float TolerateDistance; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float Scale3DMap; 	//[Offset: 0x0, Size: 4]
	bool bShowOthers; 	//[Offset: 0x0, Size: 1]
	float StartLineScale; 	//[Offset: 0x0, Size: 4]
	float VehicleOffsetScale; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float CameraDistance; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Object*[] RetainObjects; //[Offset: 0x0, Size: 16]
	Void UpdateMinimapData(EGORacingProgress* EGORacingProgress, EGOWheeledVehicle* InPlayerVehicle); //Addr 0x75eb15af74 [Final|Native] // UFieldProperty addr: 0x75ac5ab800
Class: RaceMultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76901e6000
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	StrProperty HintTextID; 	//[Offset: 0x0, Size: 16]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	EditableTextBoxStyle StructProperty; 	//[Offset: 0x0, Size: 2144]
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	bool bIsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	Void SetTextStyle(constoutrefstructTextBlockStyle InTextStyle); //Addr 0x75eb15c978 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b95200
Class: RaceProgressBar.Widget.Visual.Object, Addr: 0x76901e5d80
	RaceProgressBarStyle StructProperty; 	//[Offset: 0x0, Size: 296]
	float Percent; 	//[Offset: 0x0, Size: 4]
	float StartPercent; 	//[Offset: 0x0, Size: 4]
	float BarWidth; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool HalfCircle; 	//[Offset: 0x0, Size: 1]
	bool UseStartPercent; 	//[Offset: 0x0, Size: 1]
	enum ERaceProgressBarFillType BarFillType { //[Offset: 0x0, Size: 1]
		Clockwise = 0
		AntiClockwise = 45002f00000000
		Rect = 70007900000000
		ERaceProgressBarFillType_MAX = 7500000000
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	delegate PercentDelegate; 	//[Offset: 0x0, Size: 20]
	delegate StartPercentDelegate; 	//[Offset: 0x0, Size: 20]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate FillColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	Void SetStartPercent(float InStartPercent); //Addr 0x75eb15dec8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5ab400
Class: RaceRouteCanvas.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e5b00
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float RotateRadius; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	float BrakeLineThickness; 	//[Offset: 0x0, Size: 4]
	float BrakeLineWidth; 	//[Offset: 0x0, Size: 4]
	float TrackWidth; 	//[Offset: 0x0, Size: 4]
	StrProperty TrackName; 	//[Offset: 0x0, Size: 16]
	int TrackRoute; 	//[Offset: 0x0, Size: 4]
	int TrackType; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate AIBrakeBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate PlayerBrakeBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate AITopSpeedBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate PlayerTopSpeedBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate StartPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate EndPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	structVector[] CurvePoint; //[Offset: 0x0, Size: 16]
	UserWidget*[] CurvePointObjects; //[Offset: 0x0, Size: 16]
	Void SetTrackNameAndRouteId(outFString InTrackName, int InTrackRoute, int InTrackType); //Addr 0x75eb15e740 [Final|Native] // UFieldProperty addr: 0x75ac5adc00
Class: RaceSpeedCurve.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901e5880
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int AxisDistanceCount; 	//[Offset: 0x0, Size: 4]
	int AxisSpeedCount; 	//[Offset: 0x0, Size: 4]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	float GetUnitSpeed(); //Addr 0x75eb160a48 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac5ad600
Class: RaceSprite.Widget.Visual.Object, Addr: 0x76901e5600
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	delegate BrushDelegate; 	//[Offset: 0x0, Size: 20]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	bool bFlipForRightToLeftFlowDirection; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseButtonDownEvent; 	//[Offset: 0x0, Size: 20]
	bool bCustomUV; 	//[Offset: 0x0, Size: 1]
	Box2D StructProperty; 	//[Offset: 0x0, Size: 20]
	StrProperty RelativePathForSpriteJson; 	//[Offset: 0x0, Size: 16]
	StrProperty CurFrame; 	//[Offset: 0x0, Size: 16]
	bool bAnimResumeInLoop; 	//[Offset: 0x0, Size: 1]
	bool bAutoFrameSize; 	//[Offset: 0x0, Size: 1]
	bool bAutoPlay; 	//[Offset: 0x0, Size: 1]
	FString[] AutoPlayFramArr; //[Offset: 0x0, Size: 16]
	int AutoPlayFPS; 	//[Offset: 0x0, Size: 4]
	int AutoPlayLoopNum; 	//[Offset: 0x0, Size: 4]
	Void StopSimpleAnim(); //Addr 0x75eb1614a0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5af300
Class: RaceTextBlock.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76901e5380
	FText Text; 	//[Offset: 0x0, Size: 24]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ShadowColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool bWrapWithInvalidationPanel; 	//[Offset: 0x0, Size: 1]
	bool bAutoWrapText; 	//[Offset: 0x0, Size: 1]
	enum ETextTransformPolicy TextTransformPolicy { //[Offset: 0x0, Size: 1]
		None = 0
		ToLower = 65007000000000
		ToUpper = 74007200000000
		ETextTransformPolicy_MAX = 7500000000
	};
	bool TypeWriterEffect; 	//[Offset: 0x0, Size: 1]
	float TypeWriterSpeed; 	//[Offset: 0x0, Size: 4]
	delegate OnTypeWriterFinished; 	//[Offset: 0x0, Size: 16]
	bool bSimpleTextMode; 	//[Offset: 0x0, Size: 1]
	Void ShowAll(); //Addr 0x75eb163a30 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5d1a00
Class: RaceTrackPreview.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901ef600
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	delegate TrackBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate SubTrackBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate BackgroundTrackBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate StartPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate FinishPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	float TrackWidth; 	//[Offset: 0x0, Size: 4]
	StrProperty TrackName; 	//[Offset: 0x0, Size: 16]
	int TrackRoute; 	//[Offset: 0x0, Size: 4]
	bool bHasSubTrack; 	//[Offset: 0x0, Size: 1]
	float SubTrackWidth; 	//[Offset: 0x0, Size: 4]
	StrProperty SubTrackName; 	//[Offset: 0x0, Size: 16]
	int SubTrackRoute; 	//[Offset: 0x0, Size: 4]
	bool bDrawBackground; 	//[Offset: 0x0, Size: 1]
	float BackgroundTrackWidth; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	int ScriptOverrideStartGateId; 	//[Offset: 0x0, Size: 4]
	int ScriptOverrideFinishGateId; 	//[Offset: 0x0, Size: 4]
	Void SetTrackNameAndRouteId(outFString InTrackName, int InTrackRoute); //Addr 0x75eb166a24 [Final|Native] // UFieldProperty addr: 0x75ac5d0b00
Class: RaceTrackPreview3D.CanvasPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76901ef380
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	delegate TrackBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate StartPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	delegate FinishPointBrushDelegate; 	//[Offset: 0x0, Size: 20]
	float TrackWidth; 	//[Offset: 0x0, Size: 4]
	StrProperty TrackName; 	//[Offset: 0x0, Size: 16]
	int TrackRoute; 	//[Offset: 0x0, Size: 4]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	float FOV; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float PanelZ; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float CameraDistance; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bBackground; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float ExpectedTime; 	//[Offset: 0x0, Size: 4]
	bool bPlayAnimation; 	//[Offset: 0x0, Size: 1]
	UserWidget*[] CurveObjects; //[Offset: 0x0, Size: 16]
	UserWidget*[] SegmentPointObjects; //[Offset: 0x0, Size: 16]
	Void SetTrackNameAndRouteId(outFString InTrackName, int InTrackRoute, bool InBackground, int[] InCurveGates, int[] InSegmentPointGates, structColor[] InColors); //Addr 0x75eb167d1c [Final|Native] // UFieldProperty addr: 0x75ac5d4200
Class: SdfFontSet.Object, Addr: 0x76901ef100
	Font* EN_Font; 	//[Offset: 0x0, Size: 8]
	Font* CN_Font; 	//[Offset: 0x0, Size: 8]
Class: WidgetLocation.Object, Addr: 0x76901eee80
	bool bIsValid; 	//[Offset: 0x0, Size: 1]
	<FString, structWidgetData> WidgetLocationMap; //[Offset: 0x0, Size: 80]
	Void SaveToFile(FString FilePath); //Addr 0x75eb169ecc [Final|Native] // UFieldProperty addr: 0x75ac5d3a00
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object, Addr: 0x76901eec00
	bool bSampleAdditionalTextures; 	//[Offset: 0x0, Size: 1]
	int AdditionalSlotIndex; 	//[Offset: 0x0, Size: 4]
	FText SlotDisplayName; 	//[Offset: 0x0, Size: 24]
Class: PaperCharacter.Character.Pawn.Actor.Object, Addr: 0x76901edd00
	PaperFlipbookComponent* Sprite; 	//[Offset: 0x0, Size: 8]
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901ed300
	PaperFlipbook* SourceFlipbook; 	//[Offset: 0x37f19, Size: 8]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bReversePlayback; 	//[Offset: 0x0, Size: 1]
	bool bPlaying; 	//[Offset: 0x0, Size: 1]
	float AccumulatedTime; 	//[Offset: 0x0, Size: 4]
	int CachedFrameIndex; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	BodySetup* CachedBodySetup; 	//[Offset: 0x0, Size: 8]
	delegate OnFinishedPlaying; 	//[Offset: 0x0, Size: 16]
	Void Stop(); //Addr 0x75eb18a3d0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5d6f00
Class: PaperFlipbook.Object, Addr: 0x76901ed800
	float FramesPerSecond; 	//[Offset: 0x0, Size: 4]
	structPaperFlipbookKeyFrame[] KeyFrames; //[Offset: 0x0, Size: 16]
	MaterialInterface* DefaultMaterial; 	//[Offset: 0x0, Size: 8]
	enum EFlipbookCollisionMode CollisionSource { //[Offset: 0x0, Size: 1]
		NoCollision = 0
		FirstFrameCollision = 69006c00000000
		EachFrameCollision = 69007300000000
		EFlipbookCollisionMode_MAX = 7600000000
	};
	bool IsValidKeyFrameIndex(int Index); //Addr 0x75eb189204 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac5d4500
Class: PaperFlipbookActor.Actor.Object, Addr: 0x76901ed580
	PaperFlipbookComponent* RenderComponent; 	//[Offset: 0x0, Size: 8]
Class: PaperGroupedSpriteActor.Actor.Object, Addr: 0x76901ed080
	PaperGroupedSpriteComponent* RenderComponent; 	//[Offset: 0x0, Size: 8]
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901ece00
	MaterialInterface*[] InstanceMaterials; //[Offset: 0x0, Size: 16]
	structSpriteInstanceData[] PerInstanceSpriteData; //[Offset: 0x0, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, constoutrefstructTransform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); //Addr 0x75eb18b748 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5d6700
Class: PaperRuntimeSettings.Object, Addr: 0x76901ecb80
	bool bEnableSpriteAtlasGroups; 	//[Offset: 0x0, Size: 1]
	bool bEnableTerrainSplineEditing; 	//[Offset: 0x0, Size: 1]
	bool bResizeSpriteDataToMatchTextures; 	//[Offset: 0x0, Size: 1]
Class: PaperSprite.Object, Addr: 0x76901ec900
	Texture*[] AdditionalSourceTextures; //[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Texture2D* BakedSourceTexture; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* DefaultMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* AlternateMaterial; 	//[Offset: 0x0, Size: 8]
	structPaperSpriteSocket[] Sockets; //[Offset: 0x0, Size: 16]
	enum ESpriteCollisionMode SpriteCollisionDomain { //[Offset: 0x0, Size: 1]
		None = 0
		Use2DPhysics = 72007000000000
		Use3DPhysics = 6e006f00000000
		ESpriteCollisionMode_MAX = 0
	};
	float PixelsPerUnrealUnit; 	//[Offset: 0x0, Size: 4]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	int AlternateMaterialSplitIndex; 	//[Offset: 0x0, Size: 4]
	structVector4[] BakedRenderData; //[Offset: 0x0, Size: 16]
Class: PaperSpriteActor.Actor.Object, Addr: 0x76901ec680
	PaperSpriteComponent* RenderComponent; 	//[Offset: 0x0, Size: 8]
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901ebf00
	PaperSprite* SourceSprite; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* MaterialOverride; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSpriteColor(structLinearColor NewColor); //Addr 0x75eb18d1a4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5da500
Class: PaperSpriteAtlas.Object, Addr: 0x76901ec400
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76901ec180
	structSlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height); //Addr 0x75eb18cd58 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac5d6600
Class: PaperTerrainActor.Actor.Object, Addr: 0x76901ebc80
	SceneComponent* DummyRoot; 	//[Offset: 0x0, Size: 8]
	PaperTerrainSplineComponent* SplineComponent; 	//[Offset: 0x0, Size: 8]
	PaperTerrainComponent* RenderComponent; 	//[Offset: 0x0, Size: 8]
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901eb500
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901eba00
	PaperTerrainMaterial* TerrainMaterial; 	//[Offset: 0x0, Size: 8]
	bool bClosedSpline; 	//[Offset: 0x0, Size: 1]
	bool bFilledSpline; 	//[Offset: 0x0, Size: 1]
	PaperTerrainSplineComponent* AssociatedSpline; 	//[Offset: 0x0, Size: 8]
	int RandomSeed; 	//[Offset: 0x0, Size: 4]
	float SegmentOverlapAmount; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int ReparamStepsPerSegment; 	//[Offset: 0x0, Size: 4]
	enum ESpriteCollisionMode SpriteCollisionDomain { //[Offset: 0x0, Size: 1]
		None = 0
		Use2DPhysics = 72007000000000
		Use3DPhysics = 6e006f00000000
		ESpriteCollisionMode_MAX = 0
	};
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	BodySetup* CachedBodySetup; 	//[Offset: 0x0, Size: 8]
	Void SetTerrainColor(structLinearColor NewColor); //Addr 0x75eb18da40 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5da400
Class: PaperTerrainMaterial.DataAsset.Object, Addr: 0x76901eb780
	structPaperTerrainMaterialRule[] Rules; //[Offset: 0x0, Size: 16]
	PaperSprite* InteriorFill; 	//[Offset: 0x0, Size: 8]
Class: PaperTileLayer.Object, Addr: 0x76901eb000
	FText LayerName; 	//[Offset: 0x0, Size: 24]
	int LayerWidth; 	//[Offset: 0x0, Size: 4]
	int LayerHeight; 	//[Offset: 0x0, Size: 4]
	bool bHiddenInGame; 	//[Offset: 0x0, Size: 1]
	bool bLayerCollides; 	//[Offset: 0x0, Size: 1]
	bool bOverrideCollisionThickness; 	//[Offset: 0x0, Size: 1]
	bool bOverrideCollisionOffset; 	//[Offset: 0x0, Size: 1]
	float CollisionThicknessOverride; 	//[Offset: 0x0, Size: 4]
	float CollisionOffsetOverride; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int AllocatedWidth; 	//[Offset: 0x0, Size: 4]
	int AllocatedHeight; 	//[Offset: 0x0, Size: 4]
	structPaperTileInfo[] AllocatedCells; //[Offset: 0x0, Size: 16]
	PaperTileSet* TileSet; 	//[Offset: 0x0, Size: 8]
	int[] AllocatedGrid; //[Offset: 0x0, Size: 16]
Class: PaperTileMap.Object, Addr: 0x76901ead80
	int MapWidth; 	//[Offset: 0x0, Size: 4]
	int MapHeight; 	//[Offset: 0x0, Size: 4]
	int TileWidth; 	//[Offset: 0x0, Size: 4]
	int TileHeight; 	//[Offset: 0x0, Size: 4]
	float PixelsPerUnrealUnit; 	//[Offset: 0x0, Size: 4]
	float SeparationPerTileX; 	//[Offset: 0x0, Size: 4]
	float SeparationPerTileY; 	//[Offset: 0x0, Size: 4]
	float SeparationPerLayer; 	//[Offset: 0x0, Size: 4]
	PaperTileSet* SelectedTileSet; 	//[Offset: 0x0, Size: 48]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	PaperTileLayer*[] TileLayers; //[Offset: 0x0, Size: 16]
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	enum ESpriteCollisionMode SpriteCollisionDomain { //[Offset: 0x0, Size: 1]
		None = 0
		Use2DPhysics = 72007000000000
		Use3DPhysics = 6e006f00000000
		ESpriteCollisionMode_MAX = 0
	};
	enum ETileMapProjectionMode ProjectionMode { //[Offset: 0x0, Size: 1]
		Orthogonal = 0
		IsometricDiamond = 70006100000000
		IsometricStaggered = 61006c00000000
		HexagonalStaggered = 0
		ETileMapProjectionMode_MAX = 0
	};
	int HexSideLength; 	//[Offset: 0x0, Size: 4]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	int LayerNameIndex; 	//[Offset: 0x0, Size: 4]
Class: PaperTileMapActor.Actor.Object, Addr: 0x76901eab00
	PaperTileMapComponent* RenderComponent; 	//[Offset: 0x0, Size: 8]
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901ea880
	int MapWidth; 	//[Offset: 0x0, Size: 4]
	int MapHeight; 	//[Offset: 0x0, Size: 4]
	int TileWidth; 	//[Offset: 0x0, Size: 4]
	int TileHeight; 	//[Offset: 0x0, Size: 4]
	PaperTileSet* DefaultLayerTileSet; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	PaperTileLayer*[] TileLayers; //[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	int UseSingleLayerIndex; 	//[Offset: 0x0, Size: 4]
	bool bUseSingleLayer; 	//[Offset: 0x0, Size: 1]
	PaperTileMap* TileMap; 	//[Offset: 0x0, Size: 8]
	Void SetTileMapColor(structLinearColor NewColor); //Addr 0x75eb18f828 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac5dea00
Class: PaperTileSet.Object, Addr: 0x76901ea600
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	Texture2D* TileSheet; 	//[Offset: 0x0, Size: 8]
	Texture*[] AdditionalSourceTextures; //[Offset: 0x0, Size: 16]
	IntMargin StructProperty; 	//[Offset: 0x0, Size: 16]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	int WidthInTiles; 	//[Offset: 0x0, Size: 4]
	int HeightInTiles; 	//[Offset: 0x0, Size: 4]
	int AllocatedWidth; 	//[Offset: 0x0, Size: 4]
	int AllocatedHeight; 	//[Offset: 0x0, Size: 4]
	structPaperTileMetadata[] PerTileData; //[Offset: 0x0, Size: 16]
	structPaperTileSetTerrain[] Terrains; //[Offset: 0x0, Size: 16]
	int TileWidth; 	//[Offset: 0x0, Size: 4]
	int TileHeight; 	//[Offset: 0x0, Size: 4]
	int Margin; 	//[Offset: 0x0, Size: 4]
	int Spacing; 	//[Offset: 0x0, Size: 4]
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76901efd80
	structPaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD); //Addr 0x75eb1914ac [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac622000
Class: DyCShaderData.Object, Addr: 0x76901efb00
	int DataInt; 	//[Offset: 0x0, Size: 4]
	float DataFloat; 	//[Offset: 0x0, Size: 4]
	StrProperty DataString; 	//[Offset: 0x0, Size: 16]
Class: DyCShaderHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901ef880
	Void RunDepthCollisionCounter(constObject* WorldContextObject, TextureRenderTarget2D* RT1, TextureRenderTarget2D* RT2, float DepthOffset1, float DepthOffset2, DyCShaderData* CSData); //Addr 0x75eb19a3dc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac621f00
Class: ObjGraph.Object, Addr: 0x76901f5100
	FString ShowTopCount(int TopClasses); //Addr 0x75eb1a35dc [Final|Native] // UFieldProperty addr: 0x75ac621500
Class: AngeliaAssetManager.AssetManager.Object, Addr: 0x76901f4e80
Class: AngeliaBackgroundHttpNotificationObject.Object, Addr: 0x76901f4980
Class: AngeliaBackgroundHttpResponse.Object, Addr: 0x76901f4700
	FString GetTempContentFilePath(); //Addr 0x75eb241014 [Final|Native|Const] // UFieldProperty addr: 0x75ac621300
Class: AngeliaBackgroundHttpRequest.Object, Addr: 0x76901f4480
	delegate OnRequestComplete; 	//[Offset: 0x0, Size: 16]
	delegate OnProgressUpdate; 	//[Offset: 0x0, Size: 16]
	Void SetURLAsList(constoutrefFString[] URLs, int NumRetriesToAttempt); //Addr 0x75eb241b04 [Final|Native] // UFieldProperty addr: 0x75ac620600
Class: AngeliaBackgroundHttpManager.BlueprintFunctionLibrary.Object, Addr: 0x76901f4200
	AngeliaBackgroundHttpRequest* CreateRequestForURLList(constoutrefFString[] URLList); //Addr 0x75eb242420 [Final|Native|Static] // UFieldProperty addr: 0x75ac620300
Class: AngeliaClientInfo.Object, Addr: 0x76901f3f80
	delegate OnClientInfoUpdateSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnCategorySizeFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnHashLoadFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnTaskGenerated; 	//[Offset: 0x0, Size: 16]
	delegate OnTaskGenerateFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnCategoryDownloadComplete; 	//[Offset: 0x0, Size: 16]
	delegate OnSetupFailed; 	//[Offset: 0x0, Size: 16]
	delegate OnPakMerge; 	//[Offset: 0x0, Size: 16]
	delegate OnClientInfoCompareFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnMetallibApplySuccess; 	//[Offset: 0x0, Size: 16]
	<FString, AngeliaDownloadTask*> CategoryDownloadTaskMap; //[Offset: 0x0, Size: 80]
	Void ValidateAllShader(); //Addr 0x75eb24597c [Final|Native] // UFieldProperty addr: 0x75ac629400
Class: AngeliaDownloadTask.Object, Addr: 0x76901f3d00
	delegate OnMergeFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnPlaceHoldFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnMergeProgress; 	//[Offset: 0x0, Size: 16]
	Void SetTaskMergeInfo(int MaxTaskSize, int MaxGapSize, float MaxTaskDummyRate); //Addr 0x75eb251128 [Final|Native] // UFieldProperty addr: 0x75ac62c000
Class: AngeliaPakMerger.Object, Addr: 0x76901f3a80
	delegate OnMergeFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnMergeProgress; 	//[Offset: 0x0, Size: 16]
	Void RunCompletePakTask(FString TaskName, FString Filename); //Addr 0x75eb25290c [Final|Native] // UFieldProperty addr: 0x75ac62ba00
Class: AngeliaFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76901f3800
	bool WriteTempFile(FString Filename, AngeliaHttpResponse* Response, int64 Offset); //Addr 0x75eb2550ec [Final|Native|Static] // UFieldProperty addr: 0x75ac62f200
Class: AngeliaHttpResponse.Object, Addr: 0x76901f3580
	delegate DelegateWriteFilesComplete; 	//[Offset: 0x0, Size: 20]
	Void WriteFilesFromContent(constoutrefFString[] FileNames, constoutrefint64[] StartOffsets, constoutrefint64[] EndOffsets); //Addr 0x75eb25a4ac [Final|Native] // UFieldProperty addr: 0x75ac6a2100
Class: AngeliaHttp.Object, Addr: 0x76901f3300
	delegate DelegateProcessRequestComplete; 	//[Offset: 0x0, Size: 20]
	delegate DelegateHeaderReceived; 	//[Offset: 0x0, Size: 20]
	delegate DelegateRequestProgress; 	//[Offset: 0x0, Size: 20]
	FString UrlEncode(FString Content); //Addr 0x75eb25bd8c [Final|Native|Static] // UFieldProperty addr: 0x75ac6a0f00
Class: AngeliaPakFile.Object, Addr: 0x76901f3080
	AngeliaPakInfo StructProperty; 	//[Offset: 0x0, Size: 80]
	StrProperty PakFilename; 	//[Offset: 0x0, Size: 16]
	int64 CachedTotalSize; 	//[Offset: 0x0, Size: 8]
	int64 RealFileSize; 	//[Offset: 0x0, Size: 8]
	StrProperty MountPoint; 	//[Offset: 0x0, Size: 16]
	int NumEntries; 	//[Offset: 0x0, Size: 4]
	bool bPartial; 	//[Offset: 0x0, Size: 1]
	bool bUseHashInfo; 	//[Offset: 0x0, Size: 1]
	bool WriteFileList(FString FilePath); //Addr 0x75eb25c7b4 [Final|Native] // UFieldProperty addr: 0x75ac6a4000
Class: AngeliaVirtualFileManager.BlueprintFunctionLibrary.Object, Addr: 0x76901f2b80
	Void SetCurrentDirectory(FString Dir); //Addr 0x75eb25de8c [Final|Native|Static] // UFieldProperty addr: 0x75ac6a3600
Class: AssetManagerHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f2900
	Void UpdateAssetManagerDatebase(bool bForceRefresh); //Addr 0x75eb261000 [Final|Native|Static] // UFieldProperty addr: 0x75ac6a6000
Class: VersionFileHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f2680
	bool SerializeVersionInfoFile(FString InFilePath, constoutrefstructBuildVersionInfo InVersionInfo); //Addr 0x75eb265254 [Final|Native|Static] // UFieldProperty addr: 0x75ac6a5000
Class: ArgusDirTree.Widget.Visual.Object, Addr: 0x76901f2400
	Void NavParent(); //Addr 0x75eb285428 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6a4d00
Class: DualParaboloidCaptureActor.Actor.Object, Addr: 0x76901f2180
	int RenderTargetSizeX; 	//[Offset: 0x0, Size: 4]
	int RenderTargetSizeY; 	//[Offset: 0x0, Size: 4]
	enum ETextureRenderTargetFormat RenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	enum ESceneCaptureSource CaptureSource { //[Offset: 0x0, Size: 1]
		SCS_SceneColorHDR = 0
		SCS_SceneColorHDRNoAlpha = 0
		SCS_FinalColorLDR = 0
		SCS_SceneColorSceneDepth = 0
		SCS_SceneDepth = 0
		SCS_DeviceDepth = 0
		SCS_Normal = 0
		SCS_BaseColor = 0
		SCS_FinalColorHDR = 0
		SCS_FinalToneCurveHDR = 0
		SCS_MAX = 0
	};
	enum ESceneCapturePrimitiveRenderMode PrimitiveRenderMode { //[Offset: 0x0, Size: 1]
		PRM_LegacySceneCapture = 0
		PRM_RenderScenePrimitives = 74007000000000
		PRM_UseShowOnlyList = 68007400000000
		PRM_MAX = 0
	};
	ParaboloidSceneCaptureComponent* CaptureComponent1; 	//[Offset: 0x0, Size: 8]
	ParaboloidSceneCaptureComponent* CaptureComponent2; 	//[Offset: 0x0, Size: 8]
	Actor*[] HiddenActors; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] HiddenComponents; //[Offset: 0x0, Size: 16]
	Actor*[] ShowOnlyActors; //[Offset: 0x0, Size: 16]
	bool bCaptureEveryFrame; 	//[Offset: 0x0, Size: 1]
	bool bCaptureOnMovement; 	//[Offset: 0x0, Size: 1]
	float LODDistanceFactor; 	//[Offset: 0x0, Size: 4]
	float MaxViewDistanceOverride; 	//[Offset: 0x0, Size: 4]
	Void ApplyParaboloidRenderTarget(StaticMeshComponent* Mesh, int MaterialIndex); //Addr 0x75eb287f78 [Final|Native] // UFieldProperty addr: 0x75ac6a4c00
Class: ParaboloidSceneCaptureComponent.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901f1c80
	Void SetPerspectiveWithFOV(bool IsPerspective, float InputFOVAngle); //Addr 0x75eb288bbc [Final|Native] // UFieldProperty addr: 0x75ac6a7d00
Class: DualParaboloidCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x76901f1f00
	TextureRenderTarget2D* TextureTarget1; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* TextureTarget2; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* RearTextureTarget; 	//[Offset: 0x0, Size: 8]
	Material* ParaboloidToSphereMapMaterial; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* SphereMapTarget; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* PlanarReflectionRenderTarget; 	//[Offset: 0x0, Size: 8]
	bool bRuntimeCapture; 	//[Offset: 0x0, Size: 1]
	enum ESceneCaptureSource CaptureSource { //[Offset: 0x0, Size: 1]
		SCS_SceneColorHDR = 0
		SCS_SceneColorHDRNoAlpha = 0
		SCS_FinalColorLDR = 0
		SCS_SceneColorSceneDepth = 0
		SCS_SceneDepth = 0
		SCS_DeviceDepth = 0
		SCS_Normal = 0
		SCS_BaseColor = 0
		SCS_FinalColorHDR = 0
		SCS_FinalToneCurveHDR = 0
		SCS_MAX = 0
	};
	enum ESceneCapturePrimitiveRenderMode PrimitiveRenderMode { //[Offset: 0x0, Size: 1]
		PRM_LegacySceneCapture = 0
		PRM_RenderScenePrimitives = 74007000000000
		PRM_UseShowOnlyList = 68007400000000
		PRM_MAX = 0
	};
	ParaboloidSceneCaptureComponent* CaptureComponent1; 	//[Offset: 0x0, Size: 8]
	ParaboloidSceneCaptureComponent* CaptureComponent2; 	//[Offset: 0x0, Size: 8]
	SceneCaptureComponent2D* RearCaptureComponent; 	//[Offset: 0x0, Size: 8]
	SceneCaptureComponent2D* PlanarReflectionCaptureComponent; 	//[Offset: 0x0, Size: 8]
	Actor*[] HiddenActors; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] HiddenComponents; //[Offset: 0x0, Size: 16]
	Actor*[] ShowOnlyActors; //[Offset: 0x0, Size: 16]
	float LODDistanceFactor; 	//[Offset: 0x0, Size: 4]
	float MaxViewDistanceOverride; 	//[Offset: 0x0, Size: 4]
	float FOVAngle; 	//[Offset: 0x0, Size: 4]
	FName[] HiddenMeshesNames; //[Offset: 0x0, Size: 16]
	Void UpdateReflectionCaptureComponentTransform(structVector GroundHitPos, structVector GroundNormal, CameraComponent* ViewCamera); //Addr 0x75eb288534 [Final|Native] // UFieldProperty addr: 0x75ac6a4800
Class: QSecHelper.Object, Addr: 0x76901f1500
	delegate OnData; 	//[Offset: 0x0, Size: 16]
	Void RI2(FString RoleId); //Addr 0x75eb28a45c [Final|Native] // UFieldProperty addr: 0x75ac6a7600
Class: AntiCheatSDKHelper.Object, Addr: 0x76901f1280
	delegate OnResult; 	//[Offset: 0x0, Size: 16]
	delegate OnProxy; 	//[Offset: 0x0, Size: 16]
	Void SetupProxy(); //Addr 0x75eb28ea54 [Final|Native] // UFieldProperty addr: 0x75ac6a6700
Class: UniSdkManager.Object, Addr: 0x76901f0d80
	delegate OnCodeScannerFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnConnectToChannelFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnDisconnectToChannelFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnSelectChannelOptionFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnContinueGame; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerKeyDown; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerKeyUp; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerKeyPressure; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerLeftStick; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerRightStick; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerState; 	//[Offset: 0x0, Size: 16]
	delegate OnExitApp; 	//[Offset: 0x0, Size: 16]
	delegate OnExitOpenExitViewFailed; 	//[Offset: 0x0, Size: 16]
	delegate OnExtendFuncCall; 	//[Offset: 0x0, Size: 16]
	delegate OnFinishInit; 	//[Offset: 0x0, Size: 16]
	delegate OnLoginDone; 	//[Offset: 0x0, Size: 16]
	delegate OnLogoutDone; 	//[Offset: 0x0, Size: 16]
	delegate OnOrderCheckDone; 	//[Offset: 0x0, Size: 16]
	delegate OnOrderConsumeDone; 	//[Offset: 0x0, Size: 16]
	delegate OnProtocolFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnPushSendPushNotificationFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnPushSendLocalNotificationFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnPushGetUserPushFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnPushSetUserPushFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnCancelLocalPushFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnCreateQRCodeDone; 	//[Offset: 0x0, Size: 16]
	delegate OnQuerySkuDetailsFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQuestCompleted; 	//[Offset: 0x0, Size: 16]
	delegate OnReceiveMsgNotification; 	//[Offset: 0x0, Size: 16]
	delegate OnReceiveMsgEnterGame; 	//[Offset: 0x0, Size: 16]
	delegate OnShareFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnShowViewRewarded; 	//[Offset: 0x0, Size: 16]
	delegate OnShowViewOpened; 	//[Offset: 0x0, Size: 16]
	delegate OnShowViewFailed; 	//[Offset: 0x0, Size: 16]
	delegate OnShowViewClosed; 	//[Offset: 0x0, Size: 16]
	delegate OnStartupDone; 	//[Offset: 0x0, Size: 16]
	delegate OnStartupGetNoticeMsgDone; 	//[Offset: 0x0, Size: 16]
	delegate OnStartupClickSplash; 	//[Offset: 0x0, Size: 16]
	delegate OnVerifySuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnVerifyFailure; 	//[Offset: 0x0, Size: 16]
	delegate OnWebviewNativeCall; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryFriendListFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryAvailablesInviteesFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryMyAccountFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryApplyFriendFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryIsDarenUpdated; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryFriendListInGameFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryInviteFriendListFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryInviterListFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryRankFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryRankUpdateFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnQueryRankUpdateAchievement; 	//[Offset: 0x0, Size: 16]
	delegate OnDownloadInited; 	//[Offset: 0x0, Size: 16]
	delegate OnDownloadProgress; 	//[Offset: 0x0, Size: 16]
	delegate OnDownloadFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnRegister; 	//[Offset: 0x0, Size: 16]
	delegate OnCloseManagerView; 	//[Offset: 0x0, Size: 16]
	delegate OnClosePauseView; 	//[Offset: 0x0, Size: 16]
	delegate OnApkHashResult; 	//[Offset: 0x0, Size: 16]
	Void StartApkHash(); //Addr 0x75eb2c3cb8 [Final|Native] // UFieldProperty addr: 0x75ac6d1900
Class: AndroidUniSdkManager.UniSdkManager.Object, Addr: 0x76901f1000
Class: CCLiveHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f0b00
	int StartCCMini(FString Tag, bool AutoStart); //Addr 0x75eb2b5bb8 [Final|Native|Static] // UFieldProperty addr: 0x75ac6d1200
Class: CrashHunterHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f0880
	Void UploadScriptErrorFiles(); //Addr 0x75eb2b6558 [Final|Native|Static] // UFieldProperty addr: 0x75ac6d3a00
Class: EnvSdkHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f0600
	FString ReviewWords(FString Level, FString Channel, FString Content); //Addr 0x75eb2b844c [Final|Native|Static] // UFieldProperty addr: 0x75ac6d3500
Class: IOSUniSdkManager.UniSdkManager.Object, Addr: 0x76901f0380
Class: NGPushHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901f0100
	Void Unbind(FString Account); //Addr 0x75eb2ba168 [Final|Native|Static] // UFieldProperty addr: 0x75ac6d5d00
Class: UniSdkHelper.BlueprintFunctionLibrary.Object, Addr: 0x76901fa380
	FString GetShareInfoConstString(enum EShareInfoConstString Key); //Addr 0x75eb2bbb40 [Final|Native|Static] // UFieldProperty addr: 0x75ac6d5700
Class: StoryCharacter.Object, Addr: 0x76901fa100
	StrProperty DisplayName; 	//[Offset: 0x0, Size: 16]
	Object* Sprite; 	//[Offset: 0x0, Size: 8]
Class: Storyline.Object, Addr: 0x76901f9e80
	structCharacterCreateParams[] InitialCharacter; //[Offset: 0x0, Size: 16]
	Object* InitialBackground; 	//[Offset: 0x0, Size: 8]
	int InitialLayer; 	//[Offset: 0x0, Size: 4]
	StorylineAction*[] AllAction; //[Offset: 0x0, Size: 16]
	bool TryGetAction(int Index, StorylineAction* OutAction); //Addr 0x75eb2d97b0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6d4e00
Class: StorylineAction.Object, Addr: 0x76901f9c00
	int NodeIndex; 	//[Offset: 0x0, Size: 4]
Class: StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f9980
	int NextActionIndex; 	//[Offset: 0x0, Size: 4]
Class: StorylineActionAddCharacter.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f9700
	CharacterCreateParams StructProperty; 	//[Offset: 0x0, Size: 32]
	StrProperty DisplayName; 	//[Offset: 0x0, Size: 16]
	StorylineEffect* effect; 	//[Offset: 0x0, Size: 8]
Class: StorylineActionChangeBG.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f9480
	Object* Background; 	//[Offset: 0x0, Size: 8]
	StorylineEffect* effect; 	//[Offset: 0x0, Size: 8]
Class: StorylineActionChangeLayer.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f9200
	int Layer; 	//[Offset: 0x0, Size: 4]
	StorylineEffect* effect; 	//[Offset: 0x0, Size: 8]
Class: StorylineActionChangeMusic.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f8f80
	StrProperty StateName; 	//[Offset: 0x0, Size: 16]
	StrProperty MusicName; 	//[Offset: 0x0, Size: 16]
Class: StorylineActionDialog.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f8d00
	StoryCharacter* Character; 	//[Offset: 0x0, Size: 8]
	StrProperty DisplayName; 	//[Offset: 0x0, Size: 16]
	FString[] Dialog; //[Offset: 0x0, Size: 16]
Class: StorylineActionRemoveCharacter.StorylineActionSingleOutput.StorylineAction.Object, Addr: 0x76901f8a80
	StoryCharacter* Character; 	//[Offset: 0x0, Size: 8]
	StorylineEffect* effect; 	//[Offset: 0x0, Size: 8]
Class: StorylineActionSelection.StorylineAction.Object, Addr: 0x76901f8800
	FText[] Selection; //[Offset: 0x0, Size: 16]
	Void SetSelection(int SelectionIndex, FText SelectionText); //Addr 0x75eb2db328 [Final|Native] // UFieldProperty addr: 0x75ac6d4d00
Class: StorylineEffect.Object, Addr: 0x76901f8580
	StrProperty DisplayName; 	//[Offset: 0x0, Size: 16]
Class: StorylinePlayer.Object, Addr: 0x76901f8300
	bool bIsAutoPlay; 	//[Offset: 0x0, Size: 1]
	float AutoSpeed; 	//[Offset: 0x0, Size: 4]
	delegate OnStorylineActionFinish; 	//[Offset: 0x0, Size: 16]
	delegate OnStorylineFinish; 	//[Offset: 0x0, Size: 16]
	Storyline* CurrentStoryline; 	//[Offset: 0x0, Size: 8]
	Void Skip(); //Addr 0x75eb2dbbc4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6d6800
Class: PerfAutomationTest.BlueprintFunctionLibrary.Object, Addr: 0x76901f8080
	bool TryInitConfig(); //Addr 0x75eb2ed0f0 [Final|Native|Static] // UFieldProperty addr: 0x75ac6da400
Class: PerformanceAutomationGameInstance.GameInstance.Object, Addr: 0x76901f7e00
Class: PerformanceAutomationGameMode.GameMode.GameModeBase.Info.Actor.Object, Addr: 0x76901f7b80
Class: PerformanceAutomationPawn.Pawn.Actor.Object, Addr: 0x76901f7900
	CameraComponent*[] Cameras; //[Offset: 0x0, Size: 16]
	StrProperty UploadUrl; 	//[Offset: 0x0, Size: 16]
	float LevelStartDelay; 	//[Offset: 0x0, Size: 4]
	float MoveInterval; 	//[Offset: 0x0, Size: 4]
Class: PerformanceTestRuntimeManager.BlueprintFunctionLibrary.Object, Addr: 0x76901f7680
	FString StopPerformanceSnapshots(FString UploadUrl, FString ExtendContent); //Addr 0x75eb2ee030 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac6d9a00
Class: WorldCompositionUtils.BlueprintFunctionLibrary.Object, Addr: 0x76901f7400
	Void UpdateStreamingState(World* InWorld, bool NoFrameLimit); //Addr 0x75eb2f5724 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac6d8500
Class: LogicTriggerSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x76901f7180
	delegate ObjectTriggeredEvent; 	//[Offset: 0x0, Size: 16]
	delegate ObjectResetEvent; 	//[Offset: 0x0, Size: 16]
	Void TriggerObject(MechanismTrigger* InTarget); //Addr 0x75eb2f7d04 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6dc300
Class: MechanismTrigger.Actor.Object, Addr: 0x76901f6a00
Class: VAPTInfo.Object, Addr: 0x76901f6780
	delegate OnVaptCallbackDelegate; 	//[Offset: 0x0, Size: 16]
	Void VturboUpdateGameInfoStr(FString ConfigString); //Addr 0x75eb2fa9b4 [Final|Native] // UFieldProperty addr: 0x75ac6daf00
Class: SDFTextWidget.Widget.Visual.Object, Addr: 0x76901f6500
	FText Text; 	//[Offset: 0x0, Size: 24]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	MaterialInterface* TextMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* DynamicTextMaterialInstance; 	//[Offset: 0x0, Size: 8]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	int FontScale; 	//[Offset: 0x0, Size: 4]
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	bool bVerticalCenterAlignment; 	//[Offset: 0x0, Size: 1]
	float LineSpacing; 	//[Offset: 0x0, Size: 4]
	bool AutoWrapText; 	//[Offset: 0x0, Size: 1]
	float WrapTextAt; 	//[Offset: 0x0, Size: 4]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float SoftShadowBrightness; 	//[Offset: 0x0, Size: 4]
	float SoftShadowBlurIntensity; 	//[Offset: 0x0, Size: 4]
	float Throshole; 	//[Offset: 0x0, Size: 4]
	float GlowBrightness; 	//[Offset: 0x0, Size: 4]
	float GlowBlurIntensity; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	Texture* FontAtlasTexture; 	//[Offset: 0x0, Size: 8]
	Void SetThroshole(float InThroshole); //Addr 0x75eb31c9fc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6de500
Class: LiveLinkFrameInterpolationProcessor.Object, Addr: 0x76901f5d80
Class: LiveLinkBasicFrameInterpolationProcessor.LiveLinkFrameInterpolationProcessor.Object, Addr: 0x76901f6000
	bool bInterpolatePropertyValues; 	//[Offset: 0x0, Size: 1]
Class: LiveLinkAnimationFrameInterpolationProcessor.LiveLinkBasicFrameInterpolationProcessor.LiveLinkFrameInterpolationProcessor.Object, Addr: 0x76901f6280
Class: LiveLinkFrameTranslator.Object, Addr: 0x76901f5880
Class: LiveLinkAnimationRoleToTransform.LiveLinkFrameTranslator.Object, Addr: 0x76901f5b00
	FName BoneName; 	//[Offset: 0x0, Size: 12]
Class: LiveLinkVirtualSubject.Object, Addr: 0x76901f5380
	LiveLinkRole* Role; 	//[Offset: 0x0, Size: 8]
	structLiveLinkSubjectName[] Subjects; //[Offset: 0x0, Size: 16]
	LiveLinkFrameTranslator*[] FrameTranslators; //[Offset: 0x0, Size: 16]
Class: LiveLinkAnimationVirtualSubject.LiveLinkVirtualSubject.Object, Addr: 0x76901f5600
	bool bAppendSubjectNameToBones; 	//[Offset: 0x0, Size: 1]
Class: LiveLinkFramePreProcessor.Object, Addr: 0x76901ff380
Class: LiveLinkTransformAxisSwitchPreProcessor.LiveLinkFramePreProcessor.Object, Addr: 0x76901ff600
	enum ELiveLinkAxis OrientationAxisX { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
	enum ELiveLinkAxis OrientationAxisY { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
	enum ELiveLinkAxis OrientationAxisZ { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
	enum ELiveLinkAxis TranslationAxisX { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
	enum ELiveLinkAxis TranslationAxisY { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
	enum ELiveLinkAxis TranslationAxisZ { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 0
		Z = 0
		XNeg = 0
		YNeg = 0
		ZNeg = 0
		ELiveLinkAxis_MAX = 0
	};
Class: LiveLinkAnimationAxisSwitchPreProcessor.LiveLinkTransformAxisSwitchPreProcessor.LiveLinkFramePreProcessor.Object, Addr: 0x76901ff100
Class: LiveLinkBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76901fee80
	Void TransformNames(outrefstructSubjectFrameHandle SubjectFrameHandle, outFName[] TransformNames); //Addr 0x75eb37b710 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac6dfe00
Class: LiveLinkBlueprintVirtualSubject.LiveLinkVirtualSubject.Object, Addr: 0x76901fec00
	bool UpdateVirtualSubjectStaticData_Internal(constoutrefstructLiveLinkBaseStaticData InStruct); //Addr 0x75eb3458e0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6dfa00
Class: LiveLinkComponent.ActorComponent.Object, Addr: 0x76901fe980
	delegate OnLiveLinkUpdated; 	//[Offset: 0x0, Size: 16]
	Void GetSubjectDataAtWorldTime(constFName SubjectName, constfloat WorldTime, outbool bSuccess, outstructSubjectFrameHandle SubjectFrameHandle); //Addr 0x75eb37d054 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6df600
Class: LiveLinkDrivenComponent.ActorComponent.Object, Addr: 0x76901fe700
	LiveLinkSubjectName StructProperty; 	//[Offset: 0x0, Size: 12]
	FName ActorTransformBone; 	//[Offset: 0x0, Size: 12]
	bool bModifyActorTransform; 	//[Offset: 0x0, Size: 1]
	bool bSetRelativeLocation; 	//[Offset: 0x0, Size: 1]
Class: LiveLinkInstance.AnimInstance.Object, Addr: 0x76901fe480
	LiveLinkRetargetAsset* CurrentRetargetAsset; 	//[Offset: 0x0, Size: 8]
	Void SetSubject(structLiveLinkSubjectName SubjectName); //Addr 0x75eb37db60 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6df400
Class: LiveLinkMessageBusFinder.Object, Addr: 0x76901fe200
	Void GetAvailableProviders(Object* WorldContextObject, structLatentActionInfo LatentInfo, float Duration, outstructProviderPollResult[] AvailableProviders); //Addr 0x75eb37e294 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6df100
Class: LiveLinkSourceFactory.Object, Addr: 0x76901fdd00
Class: LiveLinkMessageBusSourceFactory.LiveLinkSourceFactory.Object, Addr: 0x76901fdf80
Class: LiveLinkMessageBusSourceSettings.LiveLinkSourceSettings.Object, Addr: 0x76901fda80
Class: LiveLinkPreset.Object, Addr: 0x76901fd580
	structLiveLinkSourcePreset[] Sources; //[Offset: 0x0, Size: 16]
	structLiveLinkSubjectPreset[] Subjects; //[Offset: 0x0, Size: 16]
	Void BuildFromClient(); //Addr 0x75eb37ec7c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6dee00
Class: LiveLinkRetargetAsset.Object, Addr: 0x76901fd080
Class: LiveLinkRemapAsset.LiveLinkRetargetAsset.Object, Addr: 0x76901fd300
	Void RemapCurveElements(outref<FName, float> CurveItems); //Addr 0x75eb37f1ec [Native|Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75ac6deb00
Class: LiveLinkTimecodeProvider.TimecodeProvider.Object, Addr: 0x76901fcb80
	LiveLinkSubjectKey StructProperty; 	//[Offset: 0x0, Size: 28]
	enum ELiveLinkTimecodeProviderEvaluationType Evaluation { //[Offset: 0x0, Size: 4]
		Lerp = 0
		Nearest = 65007600000000
		Latest = 58004100000000
		ELiveLinkTimecodeProviderEvaluationType_MAX = 0
	};
	bool bOverrideFrameRate; 	//[Offset: 0x0, Size: 1]
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	int BufferSize; 	//[Offset: 0x0, Size: 4]
Class: TimeSynchronizationSource.Object, Addr: 0x76901fc400
	bool bUseForSynchronization; 	//[Offset: 0x0, Size: 1]
	int FrameOffset; 	//[Offset: 0x0, Size: 4]
Class: LiveLinkTimeSynchronizationSource.TimeSynchronizationSource.Object, Addr: 0x76901fc680
	LiveLinkSubjectName StructProperty; 	//[Offset: 0x0, Size: 12]
Class: LiveLinkControllerBase.Object, Addr: 0x76901fbc80
Class: LiveLinkCameraController.LiveLinkControllerBase.Object, Addr: 0x76901fbf00
Class: LiveLinkComponentController.ActorComponent.Object, Addr: 0x76901fba00
	LiveLinkSubjectRepresentation StructProperty; 	//[Offset: 0x0, Size: 24]
	<classLiveLinkRole, LiveLinkControllerBase*> ControllerMap; //[Offset: 0x0, Size: 80]
	bool bUpdateInEditor; 	//[Offset: 0x0, Size: 1]
	delegate OnLiveLinkUpdated; 	//[Offset: 0x0, Size: 16]
	ComponentReference StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bDisableEvaluateLiveLinkWhenSpawnable; 	//[Offset: 0x0, Size: 1]
	bool bEvaluateLiveLink; 	//[Offset: 0x0, Size: 1]
Class: LiveLinkComponentSettings.Object, Addr: 0x76901fb780
	<classLiveLinkRole, classLiveLinkControllerBase> DefaultControllerForRole; //[Offset: 0x0, Size: 80]
Class: LiveLinkLightController.LiveLinkControllerBase.Object, Addr: 0x76901fb500
Class: LiveLinkTransformController.LiveLinkControllerBase.Object, Addr: 0x76901fb280
	LiveLinkTransformControllerData StructProperty; 	//[Offset: 0x0, Size: 4]
Class: MovieSceneLiveLinkSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901fb000
	LiveLinkSubjectPreset StructProperty; 	//[Offset: 0x0, Size: 64]
	bool[] ChannelMask; //[Offset: 0x0, Size: 16]
	MovieSceneLiveLinkSubSection*[] SubSections; //[Offset: 0x0, Size: 16]
	FName SubjectName; 	//[Offset: 0x0, Size: 12]
	LiveLinkFrameData StructProperty; 	//[Offset: 0x0, Size: 144]
	LiveLinkRefSkeleton StructProperty; 	//[Offset: 0x0, Size: 32]
	FName[] CurveNames; //[Offset: 0x0, Size: 16]
	structMovieSceneFloatChannel[] PropertyFloatChannels; //[Offset: 0x0, Size: 16]
Class: MovieSceneLiveLinkSubSection.Object, Addr: 0x76901fad80
	LiveLinkSubSectionData StructProperty; 	//[Offset: 0x0, Size: 16]
	LiveLinkRole* SubjectRole; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneLiveLinkSubSectionAnimation.MovieSceneLiveLinkSubSection.Object, Addr: 0x76901fab00
Class: MovieSceneLiveLinkSubSectionBasicRole.MovieSceneLiveLinkSubSection.Object, Addr: 0x76901fa880
Class: MovieSceneLiveLinkSubSectionProperties.MovieSceneLiveLinkSubSection.Object, Addr: 0x76901fa600
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901ffb00
	MovieSceneSection* SectionToKey; 	//[Offset: 0x0, Size: 8]
	MovieScenePropertyBinding StructProperty; 	//[Offset: 0x0, Size: 28]
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneLiveLinkTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76901ffd80
	LiveLinkRole* TrackRole; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneTakeSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76901ff880
	MovieSceneIntegerChannel StructProperty; 	//[Offset: 0x0, Size: 144]
	MovieSceneIntegerChannel StructProperty; 	//[Offset: 0x0, Size: 144]
	MovieSceneIntegerChannel StructProperty; 	//[Offset: 0x0, Size: 144]
	MovieSceneIntegerChannel StructProperty; 	//[Offset: 0x0, Size: 144]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneStringChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneTakeSettings.Object, Addr: 0x7690215100
	StrProperty HoursName; 	//[Offset: 0x0, Size: 16]
	StrProperty MinutesName; 	//[Offset: 0x0, Size: 16]
	StrProperty SecondsName; 	//[Offset: 0x0, Size: 16]
	StrProperty FramesName; 	//[Offset: 0x0, Size: 16]
	StrProperty SubFramesName; 	//[Offset: 0x0, Size: 16]
	StrProperty SlateName; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneTakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690214e80
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: HoudiniAsset.Object, Addr: 0x7690214c00
	StrProperty AssetFileName; 	//[Offset: 0x0, Size: 16]
	AssetBytes(ByteProperty)[] AssetBytes; //[Offset: 0x0, Size: 16]
	uint32 AssetBytesCount; 	//[Offset: 0x0, Size: 4]
	bool bAssetLimitedCommercial; 	//[Offset: 0x0, Size: 1]
	bool bAssetNonCommercial; 	//[Offset: 0x0, Size: 1]
	bool bAssetExpanded; 	//[Offset: 0x0, Size: 1]
Class: HoudiniAssetActor.Actor.Object, Addr: 0x7690214980
	HoudiniAssetComponent* HoudiniAssetComponent; 	//[Offset: 0x0, Size: 8]
Class: HoudiniAssetComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690214480
	HoudiniAsset* HoudiniAsset; 	//[Offset: 0x0, Size: 8]
	bool bCookOnParameterChange; 	//[Offset: 0x0, Size: 1]
	bool bUploadTransformsToHoudiniEngine; 	//[Offset: 0x0, Size: 1]
	bool bCookOnTransformChange; 	//[Offset: 0x0, Size: 1]
	bool bCookOnAssetInputCook; 	//[Offset: 0x0, Size: 1]
	bool bOutputless; 	//[Offset: 0x0, Size: 1]
	bool bOutputTemplateGeos; 	//[Offset: 0x0, Size: 1]
	bool bUseOutputNodes; 	//[Offset: 0x0, Size: 1]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniStaticMeshMethod StaticMeshMethod { //[Offset: 0x0, Size: 1]
		RawMesh = 0
		FMeshDescription = 65007600000000
		UHoudiniStaticMesh = 58004100000000
		EHoudiniStaticMeshMethod_MAX = 7600000000
	};
	HoudiniStaticMeshGenerationProperties StructProperty; 	//[Offset: 0x0, Size: 424]
	MeshBuildSettings StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bOverrideGlobalProxyStaticMeshSettings; 	//[Offset: 0x0, Size: 1]
	bool bEnableProxyStaticMeshOverride; 	//[Offset: 0x0, Size: 1]
	bool bEnableProxyStaticMeshRefinementByTimerOverride; 	//[Offset: 0x0, Size: 1]
	float ProxyMeshAutoRefineTimeoutSecondsOverride; 	//[Offset: 0x0, Size: 4]
	bool bEnableProxyStaticMeshRefinementOnPreSaveWorldOverride; 	//[Offset: 0x0, Size: 1]
	bool bEnableProxyStaticMeshRefinementOnPreBeginPIEOverride; 	//[Offset: 0x0, Size: 1]
	int AssetId; 	//[Offset: 0x0, Size: 4]
	int[] NodeIdsToCook; //[Offset: 0x0, Size: 16]
	<int, int> OutputNodeCookCounts; //[Offset: 0x0, Size: 80]
	HoudiniAssetComponent* DownstreamHoudiniAssets; //[Offset: 0x0, Size: 80]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty HapiAssetName; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniAssetState AssetState { //[Offset: 0x0, Size: 1]
		NeedInstantiation = 0
		NewHDA = 7600000000
		PreInstantiation = 800000000
		Instantiating = 7600000000
		PreCook = 1900000000
		Cooking = 7600000000
		PostCook = 900000000
		PreProcess = 7600000000
		Processing = 1b00000000
		None = 7600000000
		NeedRebuild = 1f00000000
		NeedDelete = 7600000000
		Deleting = 0
		ProcessTemplate = 7600000000
		EHoudiniAssetState_MAX = 0
	};
	enum EHoudiniAssetState DebugLastAssetState { //[Offset: 0x0, Size: 1]
		NeedInstantiation = 0
		NewHDA = 7600000000
		PreInstantiation = 800000000
		Instantiating = 7600000000
		PreCook = 1900000000
		Cooking = 7600000000
		PostCook = 900000000
		PreProcess = 7600000000
		Processing = 1b00000000
		None = 7600000000
		NeedRebuild = 1f00000000
		NeedDelete = 7600000000
		Deleting = 0
		ProcessTemplate = 7600000000
		EHoudiniAssetState_MAX = 0
	};
	enum EHoudiniAssetStateResult AssetStateResult { //[Offset: 0x0, Size: 1]
		None = 0
		Working = 0
		Success = 0
		FinishedWithError = 0
		FinishedWithFatalError = 0
		Aborted = 0
		EHoudiniAssetStateResult_MAX = 0
	};
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	uint32 SubAssetIndex; 	//[Offset: 0x0, Size: 4]
	int AssetCookCount; 	//[Offset: 0x0, Size: 4]
	bool bHasBeenLoaded; 	//[Offset: 0x0, Size: 1]
	bool bHasBeenDuplicated; 	//[Offset: 0x0, Size: 1]
	bool bPendingDelete; 	//[Offset: 0x0, Size: 1]
	bool bRecookRequested; 	//[Offset: 0x0, Size: 1]
	bool bRebuildRequested; 	//[Offset: 0x0, Size: 1]
	bool bEnableCooking; 	//[Offset: 0x0, Size: 1]
	bool bForceNeedUpdate; 	//[Offset: 0x0, Size: 1]
	bool bLastCookSuccess; 	//[Offset: 0x0, Size: 1]
	bool bParameterDefinitionUpdateNeeded; 	//[Offset: 0x0, Size: 1]
	bool bBlueprintStructureModified; 	//[Offset: 0x0, Size: 1]
	bool bBlueprintModified; 	//[Offset: 0x0, Size: 1]
	HoudiniParameter*[] Parameters; //[Offset: 0x0, Size: 16]
	HoudiniInput*[] Inputs; //[Offset: 0x0, Size: 16]
	HoudiniOutput*[] Outputs; //[Offset: 0x0, Size: 16]
	structHoudiniBakedOutput[] BakedOutputs; //[Offset: 0x0, Size: 16]
	Actor*[] UntrackedOutputs; //[Offset: 0x0, Size: 16]
	HoudiniHandleComponent*[] HandleComponents; //[Offset: 0x0, Size: 16]
	bool bHasComponentTransformChanged; 	//[Offset: 0x0, Size: 1]
	bool bFullyLoaded; 	//[Offset: 0x0, Size: 1]
	HoudiniPDGAssetLink* PDGAssetLink; 	//[Offset: 0x0, Size: 8]
	TimerHandle StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bNoProxyMeshNextCookRequested; 	//[Offset: 0x0, Size: 1]
	<Object*, int> InputPresets; //[Offset: 0x0, Size: 80]
	bool bBakeAfterNextCook; 	//[Offset: 0x0, Size: 1]
	bool bCachedIsPreview; 	//[Offset: 0x0, Size: 1]
	double LastTickTime; 	//[Offset: 0x0, Size: 8]
Class: HoudiniRuntimeSettings.Object, Addr: 0x769021ce00
	enum EHoudiniRuntimeSettingsSessionType SessionType { //[Offset: 0x0, Size: 1]
		HRSST_InProcess = 0
		HRSST_Socket = 6e006900000000
		HRSST_NamedPipe = 6f004800000000
		HRSST_None = 65006d00000000
		HRSST_MAX = 73007300000000
	};
	StrProperty ServerHost; 	//[Offset: 0x0, Size: 16]
	int ServerPort; 	//[Offset: 0x0, Size: 4]
	StrProperty ServerPipeName; 	//[Offset: 0x0, Size: 16]
	bool bStartAutomaticServer; 	//[Offset: 0x0, Size: 1]
	float AutomaticServerTimeout; 	//[Offset: 0x0, Size: 4]
	bool bSyncWithHoudiniCook; 	//[Offset: 0x0, Size: 1]
	bool bCookUsingHoudiniTime; 	//[Offset: 0x0, Size: 1]
	bool bSyncViewport; 	//[Offset: 0x0, Size: 1]
	bool bSyncHoudiniViewport; 	//[Offset: 0x0, Size: 1]
	bool bSyncUnrealViewport; 	//[Offset: 0x0, Size: 1]
	bool bShowMultiAssetDialog; 	//[Offset: 0x0, Size: 1]
	bool bPreferHdaMemoryCopyOverHdaSourceFile; 	//[Offset: 0x0, Size: 1]
	bool bPauseCookingOnStart; 	//[Offset: 0x0, Size: 1]
	bool bDisplaySlateCookingNotifications; 	//[Offset: 0x0, Size: 1]
	StrProperty DefaultTemporaryCookFolder; 	//[Offset: 0x0, Size: 16]
	StrProperty DefaultBakeFolder; 	//[Offset: 0x0, Size: 16]
	bool bEnableTheReferenceCountedInputSystem; 	//[Offset: 0x0, Size: 1]
	bool MarshallingLandscapesUseDefaultUnrealScaling; 	//[Offset: 0x0, Size: 1]
	bool MarshallingLandscapesUseFullResolution; 	//[Offset: 0x0, Size: 1]
	bool MarshallingLandscapesForceMinMaxValues; 	//[Offset: 0x0, Size: 1]
	float MarshallingLandscapesForcedMinValue; 	//[Offset: 0x0, Size: 4]
	float MarshallingLandscapesForcedMaxValue; 	//[Offset: 0x0, Size: 4]
	bool bAddRotAndScaleAttributesOnCurves; 	//[Offset: 0x0, Size: 1]
	bool bUseLegacyInputCurves; 	//[Offset: 0x0, Size: 1]
	float MarshallingSplineResolution; 	//[Offset: 0x0, Size: 4]
	bool bEnableProxyStaticMesh; 	//[Offset: 0x0, Size: 1]
	bool bShowDefaultMesh; 	//[Offset: 0x0, Size: 1]
	bool bEnableProxyStaticMeshRefinementByTimer; 	//[Offset: 0x0, Size: 1]
	float ProxyMeshAutoRefineTimeoutSeconds; 	//[Offset: 0x0, Size: 4]
	bool bEnableProxyStaticMeshRefinementOnPreSaveWorld; 	//[Offset: 0x0, Size: 1]
	bool bEnableProxyStaticMeshRefinementOnPreBeginPIE; 	//[Offset: 0x0, Size: 1]
	bool bDoubleSidedGeometry; 	//[Offset: 0x0, Size: 1]
	PhysicalMaterial* PhysMaterial; 	//[Offset: 0x0, Size: 8]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	enum ECollisionTraceFlag CollisionTraceFlag { //[Offset: 0x0, Size: 1]
		CTF_UseDefault = 0
		CTF_UseSimpleAndComplex = 43006e00000000
		CTF_UseSimpleAsComplex = 47004500000000
		CTF_UseComplexAsSimple = 65006c00000000
		CTF_MAX = 79005400000000
	};
	int LightMapResolution; 	//[Offset: 0x0, Size: 4]
	float LpvBiasMultiplier; 	//[Offset: 0x0, Size: 4]
	float GeneratedDistanceFieldResolutionScale; 	//[Offset: 0x0, Size: 4]
	WalkableSlopeOverride StructProperty; 	//[Offset: 0x0, Size: 16]
	int LightMapCoordinateIndex; 	//[Offset: 0x0, Size: 4]
	bool bUseMaximumStreamingTexelRatio; 	//[Offset: 0x0, Size: 1]
	float StreamingDistanceMultiplier; 	//[Offset: 0x0, Size: 4]
	FoliageType_InstancedStaticMesh* FoliageDefaultSettings; 	//[Offset: 0x0, Size: 8]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	bool bUseFullPrecisionUVs; 	//[Offset: 0x0, Size: 1]
	int SrcLightmapIndex; 	//[Offset: 0x0, Size: 4]
	int DstLightmapIndex; 	//[Offset: 0x0, Size: 4]
	int MinLightmapResolution; 	//[Offset: 0x0, Size: 4]
	bool bRemoveDegenerates; 	//[Offset: 0x0, Size: 1]
	enum EHoudiniRuntimeSettingsRecomputeFlag GenerateLightmapUVsFlag { //[Offset: 0x0, Size: 1]
		HRSRF_Always = 0
		HRSRF_OnlyIfMissing = 6e006900000000
		HRSRF_Never = 44005000000000
		HRSRF_MAX = 58000000000000
	};
	enum EHoudiniRuntimeSettingsRecomputeFlag RecomputeNormalsFlag { //[Offset: 0x0, Size: 1]
		HRSRF_Always = 0
		HRSRF_OnlyIfMissing = 6e006900000000
		HRSRF_Never = 44005000000000
		HRSRF_MAX = 58000000000000
	};
	enum EHoudiniRuntimeSettingsRecomputeFlag RecomputeTangentsFlag { //[Offset: 0x0, Size: 1]
		HRSRF_Always = 0
		HRSRF_OnlyIfMissing = 6e006900000000
		HRSRF_Never = 44005000000000
		HRSRF_MAX = 58000000000000
	};
	bool bUseMikkTSpace; 	//[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer; 	//[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals; 	//[Offset: 0x0, Size: 1]
	bool bBuildReversedIndexBuffer; 	//[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis; 	//[Offset: 0x0, Size: 1]
	float DistanceFieldResolutionScale; 	//[Offset: 0x0, Size: 4]
	bool bGenerateDistanceFieldAsIfTwoSided; 	//[Offset: 0x0, Size: 1]
	bool bSupportFaceRemap; 	//[Offset: 0x0, Size: 1]
	bool bPDGAsyncCommandletImportEnabled; 	//[Offset: 0x0, Size: 1]
	bool bEnableBackwardCompatibility; 	//[Offset: 0x0, Size: 1]
	bool bAutomaticLegacyHDARebuild; 	//[Offset: 0x0, Size: 1]
	bool bUseCustomHoudiniLocation; 	//[Offset: 0x0, Size: 1]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniExecutableType HoudiniExecutable { //[Offset: 0x0, Size: 1]
		HRSHE_Houdini = 0
		HRSHE_HoudiniFX = 6e006900000000
		HRSHE_HoudiniCore = 44005000000000
		HRSHE_HoudiniIndie = 58000000000000
		HRSHE_MAX = 0
	};
	int CookingThreadStackSize; 	//[Offset: 0x0, Size: 4]
	StrProperty HoudiniEnvironmentFiles; 	//[Offset: 0x0, Size: 16]
	StrProperty OtlSearchPath; 	//[Offset: 0x0, Size: 16]
	StrProperty DsoSearchPath; 	//[Offset: 0x0, Size: 16]
	StrProperty ImageDsoSearchPath; 	//[Offset: 0x0, Size: 16]
	StrProperty AudioDsoSearchPath; 	//[Offset: 0x0, Size: 16]
Class: HoudiniAssetBlueprintComponent.HoudiniAssetComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690214700
	bool FauxBPProperty; 	//[Offset: 0x0, Size: 1]
	bool bHoudiniAssetChanged; 	//[Offset: 0x0, Size: 1]
	bool bUpdatedFromTemplate; 	//[Offset: 0x0, Size: 1]
	bool bIsInBlueprintEditor; 	//[Offset: 0x0, Size: 1]
	bool bCanDeleteHoudiniNodes; 	//[Offset: 0x0, Size: 1]
	bool bHasRegisteredComponentTemplate; 	//[Offset: 0x0, Size: 1]
	<structHoudiniOutputObjectIdentifier, structGuid> CachedOutputNodes; //[Offset: 0x0, Size: 80]
	<structGuid, structGuid> CachedInputNodes; //[Offset: 0x0, Size: 80]
	Void SetToggleValueAt(FString Name, bool Value, int Index); //Addr 0x75eb3f998c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f1a00
Class: HoudiniAssetParameter.Object, Addr: 0x7690214200
Class: HoudiniAssetParameterButton.HoudiniAssetParameter.Object, Addr: 0x7690213f80
Class: HoudiniAssetParameterChoice.HoudiniAssetParameter.Object, Addr: 0x7690213d00
Class: HoudiniAssetParameterColor.HoudiniAssetParameter.Object, Addr: 0x7690213a80
Class: HoudiniAssetParameterFile.HoudiniAssetParameter.Object, Addr: 0x7690213800
Class: HoudiniAssetParameterFloat.HoudiniAssetParameter.Object, Addr: 0x7690213580
Class: HoudiniAssetParameterFolder.HoudiniAssetParameter.Object, Addr: 0x7690213300
Class: HoudiniAssetParameterFolderList.HoudiniAssetParameter.Object, Addr: 0x7690213080
Class: HoudiniAssetParameterInt.HoudiniAssetParameter.Object, Addr: 0x7690212e00
Class: HoudiniAssetParameterLabel.HoudiniAssetParameter.Object, Addr: 0x7690212b80
Class: HoudiniAssetParameterMultiparm.HoudiniAssetParameter.Object, Addr: 0x7690212900
Class: HoudiniAssetParameterRamp.HoudiniAssetParameter.Object, Addr: 0x7690212680
Class: HoudiniAssetParameterSeparator.HoudiniAssetParameter.Object, Addr: 0x7690212400
Class: HoudiniAssetParameterString.HoudiniAssetParameter.Object, Addr: 0x7690212180
Class: HoudiniAssetParameterToggle.HoudiniAssetParameter.Object, Addr: 0x7690211f00
Class: HoudiniAssetComponentMaterials_V1.Object, Addr: 0x7690211c80
Class: HoudiniHandleComponent_V1.SceneComponent.ActorComponent.Object, Addr: 0x7690211a00
Class: HoudiniSplineComponent_V1.SceneComponent.ActorComponent.Object, Addr: 0x7690211780
Class: HoudiniAssetInput.HoudiniAssetParameter.Object, Addr: 0x7690211500
Class: HoudiniAssetInstanceInput.HoudiniAssetParameter.Object, Addr: 0x7690211280
Class: HoudiniAssetInstanceInputField.Object, Addr: 0x7690211000
Class: HoudiniAssetComponent_V1.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690210d80
	bool bGeneratedDoubleSidedGeometry; 	//[Offset: 0x0, Size: 1]
	PhysicalMaterial* GeneratedPhysMaterial; 	//[Offset: 0x0, Size: 8]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	enum ECollisionTraceFlag GeneratedCollisionTraceFlag { //[Offset: 0x0, Size: 1]
		CTF_UseDefault = 0
		CTF_UseSimpleAndComplex = 43006e00000000
		CTF_UseSimpleAsComplex = 47004500000000
		CTF_UseComplexAsSimple = 65006c00000000
		CTF_MAX = 79005400000000
	};
	int GeneratedLightMapResolution; 	//[Offset: 0x0, Size: 4]
	float GeneratedDistanceFieldResolutionScale; 	//[Offset: 0x0, Size: 4]
	WalkableSlopeOverride StructProperty; 	//[Offset: 0x0, Size: 16]
	int GeneratedLightMapCoordinateIndex; 	//[Offset: 0x0, Size: 4]
	bool bGeneratedUseMaximumStreamingTexelRatio; 	//[Offset: 0x0, Size: 1]
	float GeneratedStreamingDistanceMultiplier; 	//[Offset: 0x0, Size: 4]
	FoliageType_InstancedStaticMesh* GeneratedFoliageDefaultSettings; 	//[Offset: 0x0, Size: 8]
	AssetUserData*[] GeneratedAssetUserData; //[Offset: 0x0, Size: 16]
	FText BakeFolder; 	//[Offset: 0x0, Size: 24]
	FText TempCookFolder; 	//[Offset: 0x0, Size: 24]
Class: HoudiniInstancedActorComponent_V1.SceneComponent.ActorComponent.Object, Addr: 0x7690210b00
Class: HoudiniMeshSplitInstancerComponent_V1.SceneComponent.ActorComponent.Object, Addr: 0x7690210880
Class: HoudiniEngineCopyPropertiesInterface.Interface.Object, Addr: 0x7690210600
Class: HoudiniHandleParameter.Object, Addr: 0x7690210380
	HoudiniParameter* AssetParameter; 	//[Offset: 0x0, Size: 8]
	int TupleIndex; 	//[Offset: 0x0, Size: 4]
Class: HoudiniHandleComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690210100
	HoudiniHandleParameter*[] XformParms; //[Offset: 0x0, Size: 16]
	HoudiniHandleParameter* RSTParm; 	//[Offset: 0x0, Size: 8]
	HoudiniHandleParameter* RotOrderParm; 	//[Offset: 0x0, Size: 8]
	enum EHoudiniHandleType HandleType { //[Offset: 0x0, Size: 1]
		Xform = 0
		Bounder = 6f004800000000
		Unsupported = 65007000000000
		EHoudiniHandleType_MAX = 7600000000
	};
	StrProperty HandleName; 	//[Offset: 0x0, Size: 16]
Class: HoudiniInput.Object, Addr: 0x769021a380
	StrProperty Name; 	//[Offset: 0x0, Size: 16]
	StrProperty label; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniInputType Type { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Geometry = 6f007000000000
		Curve = 72006500000000
		Asset = 6f004800000000
		Landscape = 72004200000000
		World = 61007200000000
		Skeletal = 6e006f00000000
		GeometryCollection = 100000000
		EHoudiniInputType_MAX = 0
	};
	enum EHoudiniInputType PreviousType { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Geometry = 6f007000000000
		Curve = 72006500000000
		Asset = 6f004800000000
		Landscape = 72004200000000
		World = 61007200000000
		Skeletal = 6e006f00000000
		GeometryCollection = 100000000
		EHoudiniInputType_MAX = 0
	};
	int AssetNodeId; 	//[Offset: 0x0, Size: 4]
	int InputNodeId; 	//[Offset: 0x0, Size: 4]
	int InputIndex; 	//[Offset: 0x0, Size: 4]
	int ParmId; 	//[Offset: 0x0, Size: 4]
	bool bIsObjectPathParameter; 	//[Offset: 0x0, Size: 1]
	int[] CreatedDataNodeIds; //[Offset: 0x0, Size: 16]
	bool bHasChanged; 	//[Offset: 0x0, Size: 1]
	bool bNeedsToTriggerUpdate; 	//[Offset: 0x0, Size: 1]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	StrProperty Help; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniXformType KeepWorldTransform { //[Offset: 0x0, Size: 1]
		None = 0
		IntoThisObject = 54007400000000
		Auto = 69007200000000
		EHoudiniXformType_MAX = 7600000000
	};
	bool bPackBeforeMerge; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReference; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceRotScaleEnabled; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceBboxEnabled; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceMaterialEnabled; 	//[Offset: 0x0, Size: 1]
	bool bExportLODs; 	//[Offset: 0x0, Size: 1]
	bool bExportSockets; 	//[Offset: 0x0, Size: 1]
	bool bExportColliders; 	//[Offset: 0x0, Size: 1]
	bool bExportMaterialParameters; 	//[Offset: 0x0, Size: 1]
	bool bCookOnCurveChanged; 	//[Offset: 0x0, Size: 1]
	HoudiniInputObject*[] GeometryInputObjects; //[Offset: 0x0, Size: 16]
	bool bStaticMeshChanged; 	//[Offset: 0x0, Size: 1]
	HoudiniInputObject*[] AssetInputObjects; //[Offset: 0x0, Size: 16]
	bool bInputAssetConnectedInHoudini; 	//[Offset: 0x0, Size: 1]
	HoudiniInputObject*[] CurveInputObjects; //[Offset: 0x0, Size: 16]
	float DefaultCurveOffset; 	//[Offset: 0x0, Size: 4]
	bool bAddRotAndScaleAttributesOnCurves; 	//[Offset: 0x0, Size: 1]
	bool bUseLegacyInputCurves; 	//[Offset: 0x0, Size: 1]
	HoudiniInputObject*[] LandscapeInputObjects; //[Offset: 0x0, Size: 16]
	bool bLandscapeHasExportTypeChanged; 	//[Offset: 0x0, Size: 1]
	HoudiniInputObject*[] WorldInputObjects; //[Offset: 0x0, Size: 16]
	Actor*[] WorldInputBoundSelectorObjects; //[Offset: 0x0, Size: 16]
	bool bIsWorldInputBoundSelector; 	//[Offset: 0x0, Size: 1]
	bool bWorldInputBoundSelectorAutoUpdate; 	//[Offset: 0x0, Size: 1]
	float UnrealSplineResolution; 	//[Offset: 0x0, Size: 4]
	HoudiniInputObject*[] SkeletalInputObjects; //[Offset: 0x0, Size: 16]
	HoudiniInputObject*[] GeometryCollectionInputObjects; //[Offset: 0x0, Size: 16]
	LandscapeComponent* LandscapeSelectedComponents; //[Offset: 0x0, Size: 80]
	int InputNodesPendingDelete; //[Offset: 0x0, Size: 80]
	HoudiniInputHoudiniSplineComponent*[] LastInsertedInputs; //[Offset: 0x0, Size: 16]
	HoudiniInputObject*[] LastUndoDeletedInputs; //[Offset: 0x0, Size: 16]
	bool bUpdateInputLandscape; 	//[Offset: 0x0, Size: 1]
	enum EHoudiniLandscapeExportType LandscapeExportType { //[Offset: 0x0, Size: 1]
		Heightfield = 0
		Mesh = 52006500000000
		Points = 6c006100000000
		EHoudiniLandscapeExportType_MAX = 0
	};
	bool bLandscapeExportSelectionOnly; 	//[Offset: 0x0, Size: 1]
	bool bLandscapeAutoSelectComponent; 	//[Offset: 0x0, Size: 1]
	bool bLandscapeExportMaterials; 	//[Offset: 0x0, Size: 1]
	bool bLandscapeExportLighting; 	//[Offset: 0x0, Size: 1]
	bool bLandscapeExportNormalizedUVs; 	//[Offset: 0x0, Size: 1]
	bool bLandscapeExportTileUVs; 	//[Offset: 0x0, Size: 1]
	bool bCanDeleteHoudiniNodes; 	//[Offset: 0x0, Size: 1]
Class: HoudiniInputObject.Object, Addr: 0x769021a100
	Object* InputObject; 	//[Offset: 0x0, Size: 48]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EHoudiniInputObjectType Type { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Object = 0
		StaticMesh = 0
		SkeletalMesh = 0
		SceneComponent = 0
		StaticMeshComponent = 0
		InstancedStaticMeshComponent = 0
		SplineComponent = 0
		HoudiniSplineComponent = 0
		HoudiniAssetComponent = 0
		Actor = 0
		Landscape = 0
		Brush = 0
		CameraComponent = 0
		DataTable = 0
		HoudiniAssetActor = 0
		FoliageType_InstancedStaticMesh = 0
		GeometryCollection = 0
		GeometryCollectionComponent = 0
		GeometryCollectionActor_Deprecated = 0
		SkeletalMeshComponent = 0
		Blueprint = 0
		EHoudiniInputObjectType_MAX = 0
	};
	int InputNodeId; 	//[Offset: 0x0, Size: 4]
	int InputObjectNodeId; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bHasChanged; 	//[Offset: 0x0, Size: 1]
	bool bNeedsToTriggerUpdate; 	//[Offset: 0x0, Size: 1]
	bool bTransformChanged; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReference; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceRotScaleEnabled; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceBboxEnabled; 	//[Offset: 0x0, Size: 1]
	bool bImportAsReferenceMaterialEnabled; 	//[Offset: 0x0, Size: 1]
	FString[] MaterialReferences; //[Offset: 0x0, Size: 16]
	bool bCanDeleteHoudiniNodes; 	//[Offset: 0x0, Size: 1]
Class: HoudiniInputStaticMesh.HoudiniInputObject.Object, Addr: 0x7690219e80
Class: HoudiniInputSkeletalMesh.HoudiniInputObject.Object, Addr: 0x7690219c00
Class: HoudiniInputGeometryCollection.HoudiniInputObject.Object, Addr: 0x7690219980
Class: HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690219700
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: HoudiniInputMeshComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690219480
	StaticMesh* StaticMesh; 	//[Offset: 0x0, Size: 48]
Class: HoudiniInputInstancedMeshComponent.HoudiniInputMeshComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690219200
	structTransform[] InstanceTransforms; //[Offset: 0x0, Size: 16]
Class: HoudiniInputSplineComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690218f80
	int NumberOfSplineControlPoints; 	//[Offset: 0x0, Size: 4]
	float SplineLength; 	//[Offset: 0x0, Size: 4]
	float SplineResolution; 	//[Offset: 0x0, Size: 4]
	bool SplineClosed; 	//[Offset: 0x0, Size: 1]
	structTransform[] SplineControlPoints; //[Offset: 0x0, Size: 16]
Class: HoudiniInputGeometryCollectionComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690218d00
Class: HoudiniInputSkeletalMeshComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690218a80
Class: HoudiniInputHoudiniSplineComponent.HoudiniInputObject.Object, Addr: 0x7690218800
	enum EHoudiniCurveType CurveType { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Polygon = 6e006900000000
		Nurbs = 6f004800000000
		Bezier = 61006300000000
		Points = 65007000000000
		EHoudiniCurveType_MAX = 0
	};
	enum EHoudiniCurveMethod CurveMethod { //[Offset: 0x0, Size: 1]
		Invalid = 0
		CVs = 6e006900000000
		Breakpoints = 6f004800000000
		Freehand = 74005300000000
		EHoudiniCurveMethod_MAX = 0
	};
	bool Reversed; 	//[Offset: 0x0, Size: 1]
	HoudiniSplineComponent* CachedComponent; 	//[Offset: 0x0, Size: 8]
Class: HoudiniInputCameraComponent.HoudiniInputSceneComponent.HoudiniInputObject.Object, Addr: 0x7690218580
	float FOV; 	//[Offset: 0x0, Size: 4]
	float AspectRatio; 	//[Offset: 0x0, Size: 4]
	bool bIsOrthographic; 	//[Offset: 0x0, Size: 1]
	float OrthoWidth; 	//[Offset: 0x0, Size: 4]
	float OrthoNearClipPlane; 	//[Offset: 0x0, Size: 4]
	float OrthoFarClipPlane; 	//[Offset: 0x0, Size: 4]
Class: HoudiniInputHoudiniAsset.HoudiniInputObject.Object, Addr: 0x7690218300
	int AssetOutputIndex; 	//[Offset: 0x0, Size: 4]
Class: HoudiniInputActor.HoudiniInputObject.Object, Addr: 0x7690218080
	HoudiniInputSceneComponent*[] ActorComponents; //[Offset: 0x0, Size: 16]
	Object* ActorSceneComponents; //[Offset: 0x0, Size: 80]
	int LastUpdateNumComponentsAdded; 	//[Offset: 0x0, Size: 4]
	int LastUpdateNumComponentsRemoved; 	//[Offset: 0x0, Size: 4]
Class: HoudiniInputLandscape.HoudiniInputActor.HoudiniInputObject.Object, Addr: 0x7690217e00
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	int CachedNumLandscapeComponents; 	//[Offset: 0x0, Size: 4]
Class: HoudiniInputBrush.HoudiniInputActor.HoudiniInputObject.Object, Addr: 0x7690217b80
	structHoudiniBrushInfo[] BrushesInfo; //[Offset: 0x0, Size: 16]
	Model* CombinedModel; 	//[Offset: 0x0, Size: 8]
	bool bIgnoreInputObject; 	//[Offset: 0x0, Size: 1]
	enum EBrushType CachedInputBrushType { //[Offset: 0x0, Size: 1]
		Brush_Default = 0
		Brush_Add = 65007500000000
		Brush_Subtract = 7a006900000000
		Brush_MAX = 65006c00000000
	};
Class: HoudiniInputDataTable.HoudiniInputObject.Object, Addr: 0x7690217900
Class: HoudiniInputFoliageType_InstancedStaticMesh.HoudiniInputStaticMesh.HoudiniInputObject.Object, Addr: 0x7690217680
Class: HoudiniInputBlueprint.HoudiniInputObject.Object, Addr: 0x7690217400
	HoudiniInputSceneComponent*[] BPComponents; //[Offset: 0x0, Size: 16]
	Object* BPSceneComponents; //[Offset: 0x0, Size: 80]
	int LastUpdateNumComponentsAdded; 	//[Offset: 0x0, Size: 4]
	int LastUpdateNumComponentsRemoved; 	//[Offset: 0x0, Size: 4]
Class: HoudiniInstancedActorComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690217180
	Object* InstancedObject; 	//[Offset: 0x0, Size: 8]
	Actor*[] InstancedActors; //[Offset: 0x0, Size: 16]
Class: HoudiniMeshSplitInstancerComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690216f00
	StaticMeshComponent*[] Instances; //[Offset: 0x0, Size: 16]
	MaterialInterface*[] OverrideMaterials; //[Offset: 0x0, Size: 16]
	StaticMesh* InstancedMesh; 	//[Offset: 0x0, Size: 8]
Class: HoudiniLandscapePtr.Object, Addr: 0x7690216c80
	LandscapeProxy* LandscapeSoftPtr; 	//[Offset: 0x0, Size: 48]
	enum EHoudiniLandscapeOutputBakeType BakeType { //[Offset: 0x0, Size: 1]
		Detachment = 0
		BakeToImage = 6e006900000000
		BakeToWorld = 6f004800000000
		InValid = 79005400000000
		EHoudiniLandscapeOutputBakeType_MAX = 0
	};
	FName EditLayerName; 	//[Offset: 0x0, Size: 12]
Class: HoudiniLandscapeEditLayer.Object, Addr: 0x7690216a00
	LandscapeProxy* LandscapeSoftPtr; 	//[Offset: 0x0, Size: 48]
	StrProperty LayerName; 	//[Offset: 0x0, Size: 16]
Class: HoudiniOutput.Object, Addr: 0x7690216780
	enum EHoudiniOutputType Type { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Mesh = 6f007000000000
		Instancer = 72006500000000
		Landscape = 6f004800000000
		Curve = 72004200000000
		Skeletal = 61007200000000
		GeometryCollection = 6e006f00000000
		DataTable = 100000000
		EHoudiniOutputType_MAX = 0
	};
	structHoudiniGeoPartObject[] HoudiniGeoPartObjects; //[Offset: 0x0, Size: 16]
	<structHoudiniOutputObjectIdentifier, structHoudiniOutputObject> OutputObjects; //[Offset: 0x0, Size: 80]
	<structHoudiniOutputObjectIdentifier, structHoudiniInstancedOutput> InstancedOutputs; //[Offset: 0x0, Size: 80]
	<FString, MaterialInterface*> AssignementMaterials; //[Offset: 0x0, Size: 80]
	<FString, MaterialInterface*> ReplacementMaterials; //[Offset: 0x0, Size: 80]
	bool bLandscapeWorldComposition; 	//[Offset: 0x0, Size: 1]
	Actor*[] HoudiniCreatedSocketActors; //[Offset: 0x0, Size: 16]
	Actor*[] HoudiniAttachedSocketActors; //[Offset: 0x0, Size: 16]
	bool bIsEditableNode; 	//[Offset: 0x0, Size: 1]
	bool bHasEditableNodeBuilt; 	//[Offset: 0x0, Size: 1]
	bool bIsUpdating; 	//[Offset: 0x0, Size: 1]
	bool bCanDeleteHoudiniNodes; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameter.Object, Addr: 0x7690216500
	StrProperty Name; 	//[Offset: 0x0, Size: 16]
	StrProperty label; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniParameterType ParmType { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Button = 0
		ButtonStrip = 0
		Color = 0
		ColorRamp = 0
		File = 0
		FileDir = 0
		FileGeo = 0
		FileImage = 0
		Float = 0
		FloatRamp = 0
		Folder = 0
		FolderList = 0
		Input = 0
		Int = 0
		IntChoice = 0
		Label = 0
		MultiParm = 0
		Separator = 0
		String = 0
		StringChoice = 0
		StringAssetRef = 0
		Toggle = 0
		EHoudiniParameterType_MAX = 0
	};
	uint32 TupleSize; 	//[Offset: 0x0, Size: 4]
	int NodeId; 	//[Offset: 0x0, Size: 4]
	int ParmId; 	//[Offset: 0x0, Size: 4]
	int ParentParmId; 	//[Offset: 0x0, Size: 4]
	int ChildIndex; 	//[Offset: 0x0, Size: 4]
	bool bIsVisible; 	//[Offset: 0x0, Size: 1]
	bool bIsParentFolderVisible; 	//[Offset: 0x0, Size: 1]
	bool bIsDisabled; 	//[Offset: 0x0, Size: 1]
	bool bHasChanged; 	//[Offset: 0x0, Size: 1]
	bool bNeedsToTriggerUpdate; 	//[Offset: 0x0, Size: 1]
	bool bIsDefault; 	//[Offset: 0x0, Size: 1]
	bool bIsSpare; 	//[Offset: 0x0, Size: 1]
	bool bJoinNext; 	//[Offset: 0x0, Size: 1]
	bool bIsChildOfMultiParm; 	//[Offset: 0x0, Size: 1]
	bool bIsDirectChildOfMultiParm; 	//[Offset: 0x0, Size: 1]
	bool bPendingRevertToDefault; 	//[Offset: 0x0, Size: 1]
	int[] TuplePendingRevertToDefault; //[Offset: 0x0, Size: 16]
	StrProperty Help; 	//[Offset: 0x0, Size: 16]
	uint32 TagCount; 	//[Offset: 0x0, Size: 4]
	int ValueIndex; 	//[Offset: 0x0, Size: 4]
	bool bHasExpression; 	//[Offset: 0x0, Size: 1]
	bool bShowExpression; 	//[Offset: 0x0, Size: 1]
	StrProperty ParamExpression; 	//[Offset: 0x0, Size: 16]
	<FString, FString> Tags; //[Offset: 0x0, Size: 80]
	bool bAutoUpdate; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterButton.HoudiniParameter.Object, Addr: 0x7690216280
Class: HoudiniParameterButtonStrip.HoudiniParameter.Object, Addr: 0x7690216000
	int Count; 	//[Offset: 0x0, Size: 4]
	FString[] Labels; //[Offset: 0x0, Size: 16]
	int[] Values; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterChoice.HoudiniParameter.Object, Addr: 0x7690215d80
	int IntValue; 	//[Offset: 0x0, Size: 4]
	int DefaultIntValue; 	//[Offset: 0x0, Size: 4]
	StrProperty StringValue; 	//[Offset: 0x0, Size: 16]
	StrProperty DefaultStringValue; 	//[Offset: 0x0, Size: 16]
	FString[] StringChoiceValues; //[Offset: 0x0, Size: 16]
	FString[] StringChoiceLabels; //[Offset: 0x0, Size: 16]
	bool bIsChildOfRamp; 	//[Offset: 0x0, Size: 1]
	int[] IntValuesArray; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterColor.HoudiniParameter.Object, Addr: 0x7690215b00
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bIsChildOfRamp; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterFile.HoudiniParameter.Object, Addr: 0x7690215880
	FString[] Values; //[Offset: 0x0, Size: 16]
	FString[] DefaultValues; //[Offset: 0x0, Size: 16]
	StrProperty Filters; 	//[Offset: 0x0, Size: 16]
	bool bIsReadOnly; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterFloat.HoudiniParameter.Object, Addr: 0x7690215600
	float[] Values; //[Offset: 0x0, Size: 16]
	float[] DefaultValues; //[Offset: 0x0, Size: 16]
	StrProperty Unit; 	//[Offset: 0x0, Size: 16]
	bool bNoSwap; 	//[Offset: 0x0, Size: 1]
	bool bHasMin; 	//[Offset: 0x0, Size: 1]
	bool bHasMax; 	//[Offset: 0x0, Size: 1]
	bool bHasUIMin; 	//[Offset: 0x0, Size: 1]
	bool bHasUIMax; 	//[Offset: 0x0, Size: 1]
	bool bIsLogarithmic; 	//[Offset: 0x0, Size: 1]
	float Min; 	//[Offset: 0x0, Size: 4]
	float Max; 	//[Offset: 0x0, Size: 4]
	float UIMin; 	//[Offset: 0x0, Size: 4]
	float UIMax; 	//[Offset: 0x0, Size: 4]
	bool bIsChildOfRamp; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterFolder.HoudiniParameter.Object, Addr: 0x7690215380
	enum EHoudiniFolderParameterType FolderType { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Collapsible = 6c006f00000000
		Simple = 45003a00000000
		Tabs = 49007000000000
		Radio = 6e006f00000000
		Other = 58004100000000
		EHoudiniFolderParameterType_MAX = 0
	};
	bool bExpanded; 	//[Offset: 0x0, Size: 1]
	bool bChosen; 	//[Offset: 0x0, Size: 1]
	int ChildCounter; 	//[Offset: 0x0, Size: 4]
	bool bIsContentShown; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterFolderList.HoudiniParameter.Object, Addr: 0x769021f600
	bool bIsTabMenu; 	//[Offset: 0x0, Size: 1]
	bool bIsTabsShown; 	//[Offset: 0x0, Size: 1]
	HoudiniParameterFolder*[] TabFolders; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterInt.HoudiniParameter.Object, Addr: 0x769021f380
	int[] Values; //[Offset: 0x0, Size: 16]
	int[] DefaultValues; //[Offset: 0x0, Size: 16]
	StrProperty Unit; 	//[Offset: 0x0, Size: 16]
	bool bHasMin; 	//[Offset: 0x0, Size: 1]
	bool bHasMax; 	//[Offset: 0x0, Size: 1]
	bool bHasUIMin; 	//[Offset: 0x0, Size: 1]
	bool bHasUIMax; 	//[Offset: 0x0, Size: 1]
	bool bIsLogarithmic; 	//[Offset: 0x0, Size: 1]
	int Min; 	//[Offset: 0x0, Size: 4]
	int Max; 	//[Offset: 0x0, Size: 4]
	int UIMin; 	//[Offset: 0x0, Size: 4]
	int UIMax; 	//[Offset: 0x0, Size: 4]
Class: HoudiniParameterLabel.HoudiniParameter.Object, Addr: 0x769021f100
	FString[] LabelStrings; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterMultiParm.HoudiniParameter.Object, Addr: 0x769021ee80
	bool bIsShown; 	//[Offset: 0x0, Size: 1]
	int Value; 	//[Offset: 0x0, Size: 4]
	StrProperty TemplateName; 	//[Offset: 0x0, Size: 16]
	int MultiparmValue; 	//[Offset: 0x0, Size: 4]
	uint32 MultiParmInstanceNum; 	//[Offset: 0x0, Size: 4]
	uint32 MultiParmInstanceLength; 	//[Offset: 0x0, Size: 4]
	uint32 MultiParmInstanceCount; 	//[Offset: 0x0, Size: 4]
	uint32 InstanceStartOffset; 	//[Offset: 0x0, Size: 4]
	enum EHoudiniMultiParmModificationType[] MultiParmInstanceLastModifyArray; //[Offset: 0x0, Size: 16]
	int DefaultInstanceCount; 	//[Offset: 0x0, Size: 4]
Class: HoudiniParameterOperatorPath.HoudiniParameter.Object, Addr: 0x769021ec00
	HoudiniInput* HoudiniInput; 	//[Offset: 0x0, Size: 8]
Class: HoudiniParameterRampModificationEvent.Object, Addr: 0x769021e980
	bool bIsInsertEvent; 	//[Offset: 0x0, Size: 1]
	bool bIsFloatRamp; 	//[Offset: 0x0, Size: 1]
	int DeleteInstanceIndex; 	//[Offset: 0x0, Size: 4]
	float InsertPosition; 	//[Offset: 0x0, Size: 4]
	float InsertFloat; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniRampInterpolationType InsertInterpolation { //[Offset: 0x0, Size: 1]
		InValid = 0
		CONSTANT = 6f007000000000
		LINEAR = 72006500000000
		CATMULL_ROM = 6f004800000000
		MONOTONE_CUBIC = 72004200000000
		BEZIER = 61007200000000
		BSPLINE = 6e006f00000000
		HERMITE = 100000000
		EHoudiniRampInterpolationType_MAX = 0
	};
Class: HoudiniParameterRampFloatPoint.Object, Addr: 0x769021e700
	float position; 	//[Offset: 0x0, Size: 4]
	float Value; 	//[Offset: 0x0, Size: 4]
	enum EHoudiniRampInterpolationType Interpolation { //[Offset: 0x0, Size: 1]
		InValid = 0
		CONSTANT = 6f007000000000
		LINEAR = 72006500000000
		CATMULL_ROM = 6f004800000000
		MONOTONE_CUBIC = 72004200000000
		BEZIER = 61007200000000
		BSPLINE = 6e006f00000000
		HERMITE = 100000000
		EHoudiniRampInterpolationType_MAX = 0
	};
	int InstanceIndex; 	//[Offset: 0x0, Size: 4]
	HoudiniParameterFloat* PositionParentParm; 	//[Offset: 0x0, Size: 8]
	HoudiniParameterFloat* ValueParentParm; 	//[Offset: 0x0, Size: 8]
	HoudiniParameterChoice* InterpolationParentParm; 	//[Offset: 0x0, Size: 8]
Class: HoudiniParameterRampColorPoint.Object, Addr: 0x769021e480
	float position; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHoudiniRampInterpolationType Interpolation { //[Offset: 0x0, Size: 1]
		InValid = 0
		CONSTANT = 6f007000000000
		LINEAR = 72006500000000
		CATMULL_ROM = 6f004800000000
		MONOTONE_CUBIC = 72004200000000
		BEZIER = 61007200000000
		BSPLINE = 6e006f00000000
		HERMITE = 100000000
		EHoudiniRampInterpolationType_MAX = 0
	};
	int InstanceIndex; 	//[Offset: 0x0, Size: 4]
	HoudiniParameterFloat* PositionParentParm; 	//[Offset: 0x0, Size: 8]
	HoudiniParameterColor* ValueParentParm; 	//[Offset: 0x0, Size: 8]
	HoudiniParameterChoice* InterpolationParentParm; 	//[Offset: 0x0, Size: 8]
Class: HoudiniParameterRampFloat.HoudiniParameterMultiParm.HoudiniParameter.Object, Addr: 0x769021e200
	HoudiniParameterRampFloatPoint*[] Points; //[Offset: 0x0, Size: 16]
	HoudiniParameterRampFloatPoint*[] CachedPoints; //[Offset: 0x0, Size: 16]
	float[] DefaultPositions; //[Offset: 0x0, Size: 16]
	float[] DefaultValues; //[Offset: 0x0, Size: 16]
	int[] DefaultChoices; //[Offset: 0x0, Size: 16]
	int NumDefaultPoints; 	//[Offset: 0x0, Size: 4]
	bool bCaching; 	//[Offset: 0x0, Size: 1]
	HoudiniParameterRampModificationEvent*[] ModificationEvents; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterRampColor.HoudiniParameterMultiParm.HoudiniParameter.Object, Addr: 0x769021df80
	HoudiniParameterRampColorPoint*[] Points; //[Offset: 0x0, Size: 16]
	bool bCaching; 	//[Offset: 0x0, Size: 1]
	HoudiniParameterRampColorPoint*[] CachedPoints; //[Offset: 0x0, Size: 16]
	float[] DefaultPositions; //[Offset: 0x0, Size: 16]
	structLinearColor[] DefaultValues; //[Offset: 0x0, Size: 16]
	int[] DefaultChoices; //[Offset: 0x0, Size: 16]
	int NumDefaultPoints; 	//[Offset: 0x0, Size: 4]
	HoudiniParameterRampModificationEvent*[] ModificationEvents; //[Offset: 0x0, Size: 16]
Class: HoudiniParameterSeparator.HoudiniParameter.Object, Addr: 0x769021dd00
Class: HoudiniParameterString.HoudiniParameter.Object, Addr: 0x769021da80
	FString[] Values; //[Offset: 0x0, Size: 16]
	FString[] DefaultValues; //[Offset: 0x0, Size: 16]
	Object*[] ChosenAssets; //[Offset: 0x0, Size: 16]
	bool bIsAssetRef; 	//[Offset: 0x0, Size: 1]
Class: HoudiniParameterToggle.HoudiniParameter.Object, Addr: 0x769021d800
	int[] Values; //[Offset: 0x0, Size: 16]
	int[] DefaultValues; //[Offset: 0x0, Size: 16]
Class: TOPNode.Object, Addr: 0x769021d580
	int NodeId; 	//[Offset: 0x0, Size: 4]
	StrProperty NodeName; 	//[Offset: 0x0, Size: 16]
	StrProperty NodePath; 	//[Offset: 0x0, Size: 16]
	StrProperty ParentName; 	//[Offset: 0x0, Size: 16]
	Object* WorkResultParent; 	//[Offset: 0x0, Size: 8]
	structTOPWorkResult[] WorkResult; //[Offset: 0x0, Size: 16]
	bool bHidden; 	//[Offset: 0x0, Size: 1]
	bool bAutoLoad; 	//[Offset: 0x0, Size: 1]
	enum EPDGNodeState NodeState { //[Offset: 0x0, Size: 1]
		None = 0
		Dirtied = 6e006f00000000
		Dirtying = 73007500000000
		Cooking = 61005200000000
		Cook_Complete = 74007300000000
		Cook_Failed = 4d005f00000000
		EPDGNodeState_MAX = 0
	};
	bool bCachedHaveNotLoadedWorkResults; 	//[Offset: 0x0, Size: 1]
	bool bCachedHaveLoadedWorkResults; 	//[Offset: 0x0, Size: 1]
	bool bHasChildNodes; 	//[Offset: 0x0, Size: 1]
	FString ClearedLandscapeLayers; //[Offset: 0x0, Size: 80]
	bool bShow; 	//[Offset: 0x0, Size: 1]
	<FString, structHoudiniPDGWorkResultObjectBakedOutput> BakedWorkResultObjectOutputs; //[Offset: 0x0, Size: 80]
	WorkItemTally StructProperty; 	//[Offset: 0x0, Size: 568]
	AggregatedWorkItemTally StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bHasReceivedCookCompleteEvent; 	//[Offset: 0x0, Size: 1]
	OutputActorOwner StructProperty; 	//[Offset: 0x0, Size: 16]
Class: TOPNetwork.Object, Addr: 0x769021d300
	int NodeId; 	//[Offset: 0x0, Size: 4]
	StrProperty NodeName; 	//[Offset: 0x0, Size: 16]
	StrProperty NodePath; 	//[Offset: 0x0, Size: 16]
	TOPNode*[] AllTOPNodes; //[Offset: 0x0, Size: 16]
	int SelectedTOPIndex; 	//[Offset: 0x0, Size: 4]
	StrProperty ParentName; 	//[Offset: 0x0, Size: 16]
	bool bShowResults; 	//[Offset: 0x0, Size: 1]
	bool bAutoLoadResults; 	//[Offset: 0x0, Size: 1]
Class: HoudiniPDGAssetLink.Object, Addr: 0x769021d080
	StrProperty AssetName; 	//[Offset: 0x0, Size: 16]
	StrProperty AssetNodePath; 	//[Offset: 0x0, Size: 16]
	int AssetId; 	//[Offset: 0x0, Size: 4]
	TOPNetwork*[] AllTOPNetworks; //[Offset: 0x0, Size: 16]
	int SelectedTOPNetworkIndex; 	//[Offset: 0x0, Size: 4]
	enum EPDGLinkState LinkState { //[Offset: 0x0, Size: 1]
		Inactive = 0
		Linking = 6e006900000000
		Linked = 44005000000000
		Error_Not_Linked = 58000000000000
		EPDGLinkState_MAX = 0
	};
	bool bAutoCook; 	//[Offset: 0x0, Size: 1]
	bool bUseTOPNodeFilter; 	//[Offset: 0x0, Size: 1]
	bool bUseTOPOutputFilter; 	//[Offset: 0x0, Size: 1]
	StrProperty TOPNodeFilter; 	//[Offset: 0x0, Size: 16]
	StrProperty TOPOutputFilter; 	//[Offset: 0x0, Size: 16]
	int NumWorkItems; 	//[Offset: 0x0, Size: 4]
	AggregatedWorkItemTally StructProperty; 	//[Offset: 0x0, Size: 40]
	StrProperty OutputCachePath; 	//[Offset: 0x0, Size: 16]
	bool bNeedsUIRefresh; 	//[Offset: 0x0, Size: 1]
	Actor* OutputParentActor; 	//[Offset: 0x0, Size: 8]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
Class: HoudiniSplineComponent.SceneComponent.ActorComponent.Object, Addr: 0x769021cb80
	structTransform[] CurvePoints; //[Offset: 0x0, Size: 16]
	structVector[] DisplayPoints; //[Offset: 0x0, Size: 16]
	int[] DisplayPointIndexDivider; //[Offset: 0x0, Size: 16]
	StrProperty HoudiniSplineName; 	//[Offset: 0x0, Size: 16]
	bool bClosed; 	//[Offset: 0x0, Size: 1]
	bool bReversed; 	//[Offset: 0x0, Size: 1]
	int CurveOrder; 	//[Offset: 0x0, Size: 4]
	bool bIsHoudiniSplineVisible; 	//[Offset: 0x0, Size: 1]
	enum EHoudiniCurveType CurveType { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Polygon = 6e006900000000
		Nurbs = 6f004800000000
		Bezier = 61006300000000
		Points = 65007000000000
		EHoudiniCurveType_MAX = 0
	};
	enum EHoudiniCurveMethod CurveMethod { //[Offset: 0x0, Size: 1]
		Invalid = 0
		CVs = 6e006900000000
		Breakpoints = 6f004800000000
		Freehand = 74005300000000
		EHoudiniCurveMethod_MAX = 0
	};
	enum EHoudiniCurveBreakpointParameterization CurveBreakpointParameterization { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Uniform = 6e006900000000
		Chord = 6f004800000000
		Centripetal = 74005300000000
		EHoudiniCurveBreakpointParameterization_MAX = 0
	};
	bool bIsOutputCurve; 	//[Offset: 0x0, Size: 1]
	bool bCookOnCurveChanged; 	//[Offset: 0x0, Size: 1]
	bool bIsLegacyInputCurve; 	//[Offset: 0x0, Size: 1]
	bool bHasChanged; 	//[Offset: 0x0, Size: 1]
	bool bNeedsToTriggerUpdate; 	//[Offset: 0x0, Size: 1]
	bool bIsInputCurve; 	//[Offset: 0x0, Size: 1]
	bool bIsEditableOutputCurve; 	//[Offset: 0x0, Size: 1]
	int NodeId; 	//[Offset: 0x0, Size: 4]
	StrProperty PartName; 	//[Offset: 0x0, Size: 16]
Class: HoudiniStaticMesh.Object, Addr: 0x769021c900
	bool bHasNormals; 	//[Offset: 0x0, Size: 1]
	bool bHasTangents; 	//[Offset: 0x0, Size: 1]
	bool bHasColors; 	//[Offset: 0x0, Size: 1]
	uint32 NumUVLayers; 	//[Offset: 0x0, Size: 4]
	bool bHasPerFaceMaterials; 	//[Offset: 0x0, Size: 1]
	structVector[] VertexPositions; //[Offset: 0x0, Size: 16]
	structIntVector[] TriangleIndices; //[Offset: 0x0, Size: 16]
	structColor[] VertexInstanceColors; //[Offset: 0x0, Size: 16]
	structVector[] VertexInstanceNormals; //[Offset: 0x0, Size: 16]
	structVector[] VertexInstanceUTangents; //[Offset: 0x0, Size: 16]
	structVector[] VertexInstanceVTangents; //[Offset: 0x0, Size: 16]
	structVector2D[] VertexInstanceUVs; //[Offset: 0x0, Size: 16]
	int[] MaterialIDsPerTriangle; //[Offset: 0x0, Size: 16]
	structStaticMaterial[] StaticMaterials; //[Offset: 0x0, Size: 16]
	Void SetVertexPosition(uint32 InVertexIndex, constoutrefstructVector InPosition); //Addr 0x75eb4159e8 [Final|Native] // UFieldProperty addr: 0x75ac6f3200
Class: HoudiniStaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769021c680
	HoudiniStaticMesh* Mesh; 	//[Offset: 0x0, Size: 8]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	bool bHoudiniIconVisible; 	//[Offset: 0x0, Size: 1]
	Void SetMesh(HoudiniStaticMesh* InMesh); //Addr 0x75eb418104 [Final|Native] // UFieldProperty addr: 0x75ac6f2d00
Class: HoudiniAssetStateEvents.Interface.Object, Addr: 0x769021c400
Class: DirectLinkTestLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769021c180
	bool TestParameters(); //Addr 0x75eb4236bc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f6100
Class: DatasmithObjectTemplate.Object, Addr: 0x769021bc80
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object, Addr: 0x769021bf00
	FName Layers; //[Offset: 0x0, Size: 80]
	FName Tags; //[Offset: 0x0, Size: 80]
Class: DatasmithAdditionalData.Object, Addr: 0x769021ba00
Class: DatasmithAreaLightActor.Actor.Object, Addr: 0x769021b780
	enum EDatasmithAreaLightActorType LightType { //[Offset: 0x0, Size: 1]
		Point = 0
		Spot = 4c004700000000
		Rect = 58004100000000
		EDatasmithAreaLightActorType_MAX = 0
	};
	enum EDatasmithAreaLightActorShape LightShape { //[Offset: 0x0, Size: 1]
		Rectangle = 0
		Disc = 41007400000000
		Sphere = 44004500000000
		Cylinder = 61006500000000
		None = 79005400000000
		EDatasmithAreaLightActorShape_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	enum ELightUnits IntensityUnits { //[Offset: 0x0, Size: 1]
		Unitless = 0
		Candelas = 52004500000000
		Lumens = 79005400000000
		ELightUnits_MAX = 0
	};
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float Temperature; 	//[Offset: 0x0, Size: 4]
	TextureLightProfile* IESTexture; 	//[Offset: 0x0, Size: 8]
	bool bUseIESBrightness; 	//[Offset: 0x0, Size: 1]
	float IESBrightnessScale; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float SourceRadius; 	//[Offset: 0x0, Size: 4]
	float SourceLength; 	//[Offset: 0x0, Size: 4]
	float AttenuationRadius; 	//[Offset: 0x0, Size: 4]
	float SpotlightInnerAngle; 	//[Offset: 0x0, Size: 4]
	float SpotlightOuterAngle; 	//[Offset: 0x0, Size: 4]
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object, Addr: 0x769021b500
	enum EDatasmithAreaLightActorType LightType { //[Offset: 0x0, Size: 1]
		Point = 0
		Spot = 4c004700000000
		Rect = 58004100000000
		EDatasmithAreaLightActorType_MAX = 0
	};
	enum EDatasmithAreaLightActorShape LightShape { //[Offset: 0x0, Size: 1]
		Rectangle = 0
		Disc = 41007400000000
		Sphere = 44004500000000
		Cylinder = 61006500000000
		None = 79005400000000
		EDatasmithAreaLightActorShape_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	enum ELightUnits IntensityUnits { //[Offset: 0x0, Size: 1]
		Unitless = 0
		Candelas = 52004500000000
		Lumens = 79005400000000
		ELightUnits_MAX = 0
	};
	float Temperature; 	//[Offset: 0x0, Size: 4]
	TextureLightProfile* IESTexture; 	//[Offset: 0x0, Size: 48]
	bool bUseIESBrightness; 	//[Offset: 0x0, Size: 1]
	float IESBrightnessScale; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float SourceRadius; 	//[Offset: 0x0, Size: 4]
	float SourceLength; 	//[Offset: 0x0, Size: 4]
	float AttenuationRadius; 	//[Offset: 0x0, Size: 4]
Class: DatasmithAssetImportData.AssetImportData.Object, Addr: 0x769021b280
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x769021ad80
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x769021ab00
Class: DatasmithSceneImportData.AssetImportData.Object, Addr: 0x769021a880
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x769021a600
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x769021fd80
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x769021fb00
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x769021f880
	StrProperty Generator; 	//[Offset: 0x0, Size: 16]
	float Version; 	//[Offset: 0x0, Size: 4]
	StrProperty Author; 	//[Offset: 0x0, Size: 16]
	StrProperty License; 	//[Offset: 0x0, Size: 16]
	StrProperty Source; 	//[Offset: 0x0, Size: 16]
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x7690225100
	StrProperty SourceMeshName; 	//[Offset: 0x0, Size: 16]
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x7690224e80
	bool bGenerateLightmapUVs; 	//[Offset: 0x0, Size: 1]
	StrProperty TexturesDir; 	//[Offset: 0x0, Size: 16]
	byte IntermediateSerialization; //[Offset: 0x0, Size: 1]
	bool bColorizeMaterials; 	//[Offset: 0x0, Size: 1]
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x7690224c00
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x7690224980
	bool bMergeNodes; 	//[Offset: 0x0, Size: 1]
	bool bOptimizeDuplicatedNodes; 	//[Offset: 0x0, Size: 1]
	bool bRemoveInvisibleNodes; 	//[Offset: 0x0, Size: 1]
	bool bSimplifyNodeHierarchy; 	//[Offset: 0x0, Size: 1]
	bool bImportVar; 	//[Offset: 0x0, Size: 1]
	StrProperty VarPath; 	//[Offset: 0x0, Size: 16]
	bool bImportPos; 	//[Offset: 0x0, Size: 1]
	StrProperty PosPath; 	//[Offset: 0x0, Size: 16]
	bool bImportTml; 	//[Offset: 0x0, Size: 1]
	StrProperty TmlPath; 	//[Offset: 0x0, Size: 16]
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x7690224700
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x7690224480
	bool bMergeNodes; 	//[Offset: 0x0, Size: 1]
	bool bOptimizeDuplicatedNodes; 	//[Offset: 0x0, Size: 1]
	bool bImportMats; 	//[Offset: 0x0, Size: 1]
	StrProperty MatsPath; 	//[Offset: 0x0, Size: 16]
	bool bImportVar; 	//[Offset: 0x0, Size: 1]
	bool bCleanVar; 	//[Offset: 0x0, Size: 1]
	StrProperty VarPath; 	//[Offset: 0x0, Size: 16]
	bool bImportLightInfo; 	//[Offset: 0x0, Size: 1]
	StrProperty LightInfoPath; 	//[Offset: 0x0, Size: 16]
	bool bImportClipInfo; 	//[Offset: 0x0, Size: 1]
	StrProperty ClipInfoPath; 	//[Offset: 0x0, Size: 16]
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object, Addr: 0x7690224200
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object, Addr: 0x7690223f80
	StrProperty SourceGlobalId; 	//[Offset: 0x0, Size: 16]
Class: DatasmithAssetUserData.AssetUserData.Object, Addr: 0x7690223d00
	<FName, FString> MetaData; //[Offset: 0x0, Size: 80]
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690223800
	DatasmithCameraLookatTrackingSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 56]
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690223580
	DatasmithCameraFilmbackSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 8]
	DatasmithCameraLensSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 4]
	DatasmithCameraFocusSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 8]
	float CurrentFocalLength; 	//[Offset: 0x0, Size: 4]
	float CurrentAperture; 	//[Offset: 0x0, Size: 4]
	DatasmithPostProcessSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 64]
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690223300
	FString GetDatasmithUserDataValueForKey(Object* Object, FName Key); //Addr 0x75eb42cf3c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f5e00
Class: DatasmithCustomActionBase.Object, Addr: 0x7690223080
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690222e00
	int SortOrder; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
Class: DatasmithImportedSequencesActor.Actor.Object, Addr: 0x7690222b80
	LevelSequence*[] ImportedSequences; //[Offset: 0x0, Size: 16]
	Void PlayLevelSequence(LevelSequence* SequenceToPlay); //Addr 0x75eb42d724 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f5d00
Class: DatasmithOptionsBase.Object, Addr: 0x7690222900
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object, Addr: 0x7690222680
	DatasmithTessellationOptions StructProperty; 	//[Offset: 0x0, Size: 16]
Class: DatasmithImportOptions.DatasmithOptionsBase.Object, Addr: 0x7690222400
	enum EDatasmithImportSearchPackagePolicy SearchPackagePolicy { //[Offset: 0x0, Size: 1]
		Current = 0
		All = 6700000000
		EDatasmithImportSearchPackagePolicy_MAX = 800000000
	};
	enum EDatasmithImportAssetConflictPolicy MaterialConflictPolicy { //[Offset: 0x0, Size: 1]
		Replace = 0
		Update = 68006700000000
		Use = 47004900000000
		Ignore = 65006300000000
		EDatasmithImportAssetConflictPolicy_MAX = 0
	};
	enum EDatasmithImportAssetConflictPolicy TextureConflictPolicy { //[Offset: 0x0, Size: 1]
		Replace = 0
		Update = 68006700000000
		Use = 47004900000000
		Ignore = 65006300000000
		EDatasmithImportAssetConflictPolicy_MAX = 0
	};
	enum EDatasmithImportActorPolicy StaticMeshActorImportPolicy { //[Offset: 0x0, Size: 1]
		Update = 0
		Full = 68006700000000
		Ignore = 58004100000000
		EDatasmithImportActorPolicy_MAX = 7600000000
	};
	enum EDatasmithImportActorPolicy LightImportPolicy { //[Offset: 0x0, Size: 1]
		Update = 0
		Full = 68006700000000
		Ignore = 58004100000000
		EDatasmithImportActorPolicy_MAX = 7600000000
	};
	enum EDatasmithImportActorPolicy CameraImportPolicy { //[Offset: 0x0, Size: 1]
		Update = 0
		Full = 68006700000000
		Ignore = 58004100000000
		EDatasmithImportActorPolicy_MAX = 7600000000
	};
	enum EDatasmithImportActorPolicy OtherActorImportPolicy { //[Offset: 0x0, Size: 1]
		Update = 0
		Full = 68006700000000
		Ignore = 58004100000000
		EDatasmithImportActorPolicy_MAX = 7600000000
	};
	enum EDatasmithImportMaterialQuality MaterialQuality { //[Offset: 0x0, Size: 1]
		UseNoFresnelCurves = 0
		UseSimplifierFresnelCurves = 68006700000000
		UseRealFresnelCurves = 58004100000000
		EDatasmithImportMaterialQuality_MAX = 0
	};
	DatasmithImportBaseOptions StructProperty; 	//[Offset: 0x0, Size: 24]
	DatasmithReimportOptions StructProperty; 	//[Offset: 0x0, Size: 2]
	StrProperty Filename; 	//[Offset: 0x0, Size: 16]
	StrProperty FilePath; 	//[Offset: 0x0, Size: 16]
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690222180
	MaterialInterface* LandscapeMaterial; 	//[Offset: 0x0, Size: 8]
	int StaticLightingLOD; 	//[Offset: 0x0, Size: 4]
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690221f00
	bool bVisible; 	//[Offset: 0x0, Size: 1]
	bool CastShadows; 	//[Offset: 0x0, Size: 1]
	bool bUseTemperature; 	//[Offset: 0x0, Size: 1]
	bool bUseIESBrightness; 	//[Offset: 0x0, Size: 1]
	float Intensity; 	//[Offset: 0x0, Size: 4]
	float Temperature; 	//[Offset: 0x0, Size: 4]
	float IESBrightnessScale; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	MaterialInterface* LightFunctionMaterial; 	//[Offset: 0x0, Size: 8]
	TextureLightProfile* IESTexture; 	//[Offset: 0x0, Size: 8]
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690221c80
	MaterialInterface* ParentMaterial; 	//[Offset: 0x0, Size: 48]
	<FName, float> ScalarParameterValues; //[Offset: 0x0, Size: 80]
	<FName, structLinearColor> VectorParameterValues; //[Offset: 0x0, Size: 80]
	<FName, Texture*> TextureParameterValues; //[Offset: 0x0, Size: 80]
	DatasmithStaticParameterSetTemplate StructProperty; 	//[Offset: 0x0, Size: 80]
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690221a00
	enum ELightUnits IntensityUnits { //[Offset: 0x0, Size: 1]
		Unitless = 0
		Candelas = 52004500000000
		Lumens = 79005400000000
		ELightUnits_MAX = 0
	};
	float SourceRadius; 	//[Offset: 0x0, Size: 4]
	float SourceLength; 	//[Offset: 0x0, Size: 4]
	float AttenuationRadius; 	//[Offset: 0x0, Size: 4]
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690221780
	DatasmithPostProcessSettingsTemplate StructProperty; 	//[Offset: 0x0, Size: 64]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	bool bUnbound; 	//[Offset: 0x0, Size: 1]
Class: DatasmithScene.Object, Addr: 0x7690221500
Class: DatasmithSceneActor.Actor.Object, Addr: 0x7690221280
	DatasmithScene* Scene; 	//[Offset: 0x0, Size: 8]
	<FName, Actor*> RelatedActors; //[Offset: 0x0, Size: 80]
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690221000
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EComponentMobility Mobility { //[Offset: 0x0, Size: 1]
		Static = 0
		Stationary = 65004400000000
		Movable = 65006c00000000
		EComponentMobility_MAX = 7600000000
	};
	SceneComponent* AttachParent; 	//[Offset: 0x0, Size: 48]
	bool bVisible; 	//[Offset: 0x0, Size: 1]
	FName Tags; //[Offset: 0x0, Size: 80]
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690220d80
	enum ESkyLightSourceType SourceType { //[Offset: 0x0, Size: 1]
		SLS_CapturedScene = 0
		SLS_SpecifiedCubemap = 4c007900000000
		SLS_MAX = 79005400000000
	};
	int CubemapResolution; 	//[Offset: 0x0, Size: 4]
	TextureCube* Cubemap; 	//[Offset: 0x0, Size: 8]
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690220b00
	float InnerConeAngle; 	//[Offset: 0x0, Size: 4]
	float OuterConeAngle; 	//[Offset: 0x0, Size: 4]
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690220880
	StaticMesh* StaticMesh; 	//[Offset: 0x0, Size: 8]
	MaterialInterface*[] OverrideMaterials; //[Offset: 0x0, Size: 16]
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object, Addr: 0x7690220600
	DatasmithMeshSectionInfoMapTemplate StructProperty; 	//[Offset: 0x0, Size: 80]
	int LightMapCoordinateIndex; 	//[Offset: 0x0, Size: 4]
	int LightMapResolution; 	//[Offset: 0x0, Size: 4]
	structDatasmithMeshBuildSettingsTemplate[] BuildSettings; //[Offset: 0x0, Size: 16]
	structDatasmithStaticMaterialTemplate[] StaticMaterials; //[Offset: 0x0, Size: 16]
Class: LevelVariantSets.Object, Addr: 0x7690220380
	Object* DirectorClass; 	//[Offset: 0x0, Size: 8]
	VariantSet*[] VariantSets; //[Offset: 0x0, Size: 16]
	VariantSet* GetVariantSetByName(FString VariantSetName); //Addr 0x75eb447544 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac6f5a00
Class: LevelVariantSetsActor.Actor.Object, Addr: 0x7690220100
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName); //Addr 0x75eb447d00 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f5600
Class: LevelVariantSetsFunctionDirector.Object, Addr: 0x769022a380
Class: PropertyValue.Object, Addr: 0x769022a100
	Properties(FieldPathProperty)[] Properties; //[Offset: 0x0, Size: 16]
	int[] PropertyIndices; //[Offset: 0x0, Size: 16]
	structCapturedPropSegment[] CapturedPropSegments; //[Offset: 0x0, Size: 16]
	StrProperty FullDisplayString; 	//[Offset: 0x0, Size: 16]
	FName PropertySetterName; 	//[Offset: 0x0, Size: 12]
	<FString, FString> PropertySetterParameterDefaults; //[Offset: 0x0, Size: 80]
	bool bHasRecordedData; 	//[Offset: 0x0, Size: 1]
	Object* LeafPropertyClass; 	//[Offset: 0x0, Size: 8]
	ValueBytes(ByteProperty)[] ValueBytes; //[Offset: 0x0, Size: 16]
	enum EPropertyValueCategory PropCategory { //[Offset: 0x0, Size: 1]
		Undefined = 0
		Generic = ffffffff00000000
		RelativeLocation = ffffffff00000000
		RelativeRotation = ffffffff00000000
		RelativeScale3D = ffffffff00000000
		Visibility = ffffffff00000000
		Material = ffffffff00000000
		Color = ffffffff00000000
		Option = ffffffff00000000
		EPropertyValueCategory_MAX = 0
	};
	bool HasRecordedData(); //Addr 0x75eb448708 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac6f5300
Class: PropertyValueTransform.PropertyValue.Object, Addr: 0x7690229e80
Class: PropertyValueVisibility.PropertyValue.Object, Addr: 0x7690229c00
Class: PropertyValueColor.PropertyValue.Object, Addr: 0x7690229980
Class: PropertyValueMaterial.PropertyValue.Object, Addr: 0x7690229700
Class: PropertyValueOption.PropertyValue.Object, Addr: 0x7690229480
Class: PropertyValueSoftObject.PropertyValue.Object, Addr: 0x7690229200
Class: SwitchActor.Actor.Object, Addr: 0x7690228f80
	SceneComponent* SceneComponent; 	//[Offset: 0x0, Size: 8]
	int LastSelectedOption; 	//[Offset: 0x0, Size: 4]
	Void SelectOption(int OptionIndex); //Addr 0x75eb4492ec [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f5000
Class: Variant.Object, Addr: 0x7690228d00
	structVariantDependency[] Dependencies; //[Offset: 0x0, Size: 16]
	FText DisplayText; 	//[Offset: 0x0, Size: 24]
	VariantObjectBinding*[] ObjectBindings; //[Offset: 0x0, Size: 16]
	Texture2D* Thumbnail; 	//[Offset: 0x0, Size: 8]
	Void SwitchOn(); //Addr 0x75eb44a2fc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f8000
Class: VariantObjectBinding.Object, Addr: 0x7690228a80
	StrProperty CachedActorLabel; 	//[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	Object* LazyObjectPtr; 	//[Offset: 0x0, Size: 28]
	PropertyValue*[] CapturedProperties; //[Offset: 0x0, Size: 16]
	structFunctionCaller[] FunctionCallers; //[Offset: 0x0, Size: 16]
Class: VariantSet.Object, Addr: 0x7690228800
	FText DisplayText; 	//[Offset: 0x0, Size: 24]
	bool bExpanded; 	//[Offset: 0x0, Size: 1]
	Variant*[] Variants; //[Offset: 0x0, Size: 16]
	Texture2D* Thumbnail; 	//[Offset: 0x0, Size: 8]
	Void SetThumbnailFromTexture(Texture2D* NewThumbnail); //Addr 0x75eb44b3c0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6f7500
Class: EditableMeshAdapter.Object, Addr: 0x7690228300
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object, Addr: 0x7690228580
	GeometryCollection* GeometryCollection; 	//[Offset: 0x0, Size: 8]
	GeometryCollection* OriginalGeometryCollection; 	//[Offset: 0x0, Size: 8]
	int GeometryCollectionLODIndex; 	//[Offset: 0x0, Size: 4]
Class: EditableMesh.Object, Addr: 0x7690228080
	EditableMeshAdapter*[] Adapters; //[Offset: 0x0, Size: 16]
	int TextureCoordinateCount; 	//[Offset: 0x0, Size: 4]
	int PendingCompactCounter; 	//[Offset: 0x0, Size: 4]
	int SubdivisionCount; 	//[Offset: 0x0, Size: 4]
	Void WeldVertices(constoutrefstructVertexID[] VertexIDs, outstructVertexID OutNewVertexID); //Addr 0x75eb4ae04c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6ff300
Class: EditableMeshFactory.Object, Addr: 0x7690227e00
	EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, constint LODIndex); //Addr 0x75eb4b90fc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac6ff200
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object, Addr: 0x7690227b80
	StaticMesh* StaticMesh; 	//[Offset: 0x0, Size: 8]
	StaticMesh* OriginalStaticMesh; 	//[Offset: 0x0, Size: 8]
	int StaticMeshLODIndex; 	//[Offset: 0x0, Size: 4]
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690227900
	MovieSceneGeometryCollectionParams StructProperty; 	//[Offset: 0x0, Size: 56]
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690227680
	MovieSceneSection*[] AnimationSections; //[Offset: 0x0, Size: 16]
Class: ParticleSystemWidget.Widget.Visual.Object, Addr: 0x7690227400
	ParticleSystem* ParticleSystemTemplate; 	//[Offset: 0x0, Size: 8]
	bool bReactivate; 	//[Offset: 0x0, Size: 1]
	ParticleSystemComponent* WorldParticleComponent; 	//[Offset: 0x0, Size: 8]
	Actor* WorldParticleActor; 	//[Offset: 0x0, Size: 8]
	Void SetReactivate(bool bActivateAndReset); //Addr 0x75eb4cb3c4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac6ff000
Class: UIParticleComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690227180
Class: UIParticleActor.Actor.Object, Addr: 0x7690226a00
Class: UIParticle.Widget.Visual.Object, Addr: 0x7690226780
	UIParticleAsset* Asset; 	//[Offset: 0x0, Size: 8]
	delegate EventOnEnd; 	//[Offset: 0x0, Size: 16]
	bool bPlayParticle; 	//[Offset: 0x0, Size: 1]
	bool IsPlaying; 	//[Offset: 0x0, Size: 1]
	Void StopEmit(); //Addr 0x75eb4dca78 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac750300
Class: UIParticleAsset.Object, Addr: 0x7690226500
	bool AutoPlay; 	//[Offset: 0x0, Size: 1]
	structUIParticleEmitterInfo[] Emitters; //[Offset: 0x0, Size: 16]
Class: UIParticleEmitter.Widget.Visual.Object, Addr: 0x7690226280
	UIParticleEmitterAsset* Asset; 	//[Offset: 0x0, Size: 8]
	delegate EventOnEnd; 	//[Offset: 0x0, Size: 16]
	bool bPlayParticle; 	//[Offset: 0x0, Size: 1]
	bool IsPlaying; 	//[Offset: 0x0, Size: 1]
	Void StopEmit(); //Addr 0x75eb4dd26c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac754100
Class: UIParticleEmitterAsset.Object, Addr: 0x7690226000
	bool AutoPlay; 	//[Offset: 0x0, Size: 1]
	float StartTimeOffset; 	//[Offset: 0x0, Size: 4]
	int SamplingTimes; 	//[Offset: 0x0, Size: 4]
	enum EEmitterType EmitterType { //[Offset: 0x0, Size: 1]
		Gravity = 0
		Radial = 45002f00000000
		Curve = 65007000000000
		EEmitterType_MAX = 0
	};
	float EmitSeconds; 	//[Offset: 0x0, Size: 4]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	Range_Vector2D StructProperty; 	//[Offset: 0x0, Size: 20]
	Posotion_Vector2DCurve StructProperty; 	//[Offset: 0x0, Size: 4048]
	bool AutoEmitPosRange; 	//[Offset: 0x0, Size: 1]
	bool AutoScale; 	//[Offset: 0x0, Size: 1]
	bool ScaleByX; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool EmitAngleByWidgetAngle; 	//[Offset: 0x0, Size: 1]
	enum EPositionType PositionType { //[Offset: 0x0, Size: 1]
		FREE = 0
		RELATIVE = 0
		EPositionType_MAX = 800000000
	};
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	Object* ResourceObject; 	//[Offset: 0x0, Size: 8]
	bool RotationFollowSpeed; 	//[Offset: 0x0, Size: 1]
	bool UseSeparateSize; 	//[Offset: 0x0, Size: 1]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	structChildEmitter[] ChildrenEmitters; //[Offset: 0x0, Size: 16]
	structScalarParamCurve[] ScalarParams; //[Offset: 0x0, Size: 16]
	structScalarParamCurve[] ScalarParamsWhenStart; //[Offset: 0x0, Size: 16]
	enum EParticleDrawEffect DrawEffect { //[Offset: 0x0, Size: 1]
		None = 0
		NoBlending = ffffffff00000000
		PreMultipliedAlpha = ffffffff00000000
		NoGamma = ffffffff00000000
		InvertAlpha = ffffffff00000000
		NoPixelSnapping = ffffffff00000000
		DisabledEffect = ffffffff00000000
		IgnoreTextureAlpha = ffffffff00000000
		ReverseGamma = ffffffff00000000
		EParticleDrawEffect_MAX = 0
	};
	bool UseScaleFollowSpeedDirection; 	//[Offset: 0x0, Size: 1]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	bool UseScaleFollowSpeedVertical; 	//[Offset: 0x0, Size: 1]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleProperty StructProperty; 	//[Offset: 0x0, Size: 2024]
	UIParticleEmitterAsset*[] LevelOfDetail; //[Offset: 0x0, Size: 16]
Class: UIParticleUtility.Object, Addr: 0x7690225d80
	Void SetMultiThread(bool Value); //Addr 0x75eb4dea18 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac753d00
Class: RemoteControlPreset.Object, Addr: 0x7690225b00
	RemoteControlPresetLayout StructProperty; 	//[Offset: 0x0, Size: 192]
	<FString, FString> MetaData; //[Offset: 0x0, Size: 80]
	<FName, structRemoteControlTarget> RemoteControlTargets; //[Offset: 0x0, Size: 80]
	<structGuid, structRCCachedFieldData> FieldCache; //[Offset: 0x0, Size: 80]
	<FName, structGuid> NameToGuidMap; //[Offset: 0x0, Size: 80]
Class: RemoteControlPresetActor.Actor.Object, Addr: 0x7690225880
	RemoteControlPreset* Preset; 	//[Offset: 0x0, Size: 8]
Class: DNAAsset.AssetUserData.Object, Addr: 0x7690225600
	StrProperty DNAFileName; 	//[Offset: 0x0, Size: 16]
Class: ControlRig.Object, Addr: 0x769022f600
	enum ERigExecutionType ExecutionType { //[Offset: 0x0, Size: 1]
		Runtime = 0
		Editing = 45002f00000000
		Max = 6e006f00000000
		ERigExecutionType_MAX = 7500000000
	};
	RigVM* VM; 	//[Offset: 0x0, Size: 8]
	RigHierarchyContainer StructProperty; 	//[Offset: 0x0, Size: 872]
	ControlRigGizmoLibrary* GizmoLibrary; 	//[Offset: 0x0, Size: 48]
	<FName, structCachedPropertyPath> InputProperties; //[Offset: 0x0, Size: 80]
	<FName, structCachedPropertyPath> OutputProperties; //[Offset: 0x0, Size: 80]
	ControlRigDrawContainer StructProperty; 	//[Offset: 0x0, Size: 24]
	AnimationDataSourceRegistry* DataSourceRegistry; 	//[Offset: 0x0, Size: 8]
	FName[] EventQueue; //[Offset: 0x0, Size: 16]
	RigInfluenceMapPerEvent StructProperty; 	//[Offset: 0x0, Size: 96]
	ControlRig* InteractionRig; 	//[Offset: 0x0, Size: 8]
	ControlRig* InteractionRigClass; 	//[Offset: 0x0, Size: 8]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	Void SetInteractionRigClass(classControlRig InInteractionRigClass); //Addr 0x75eb5c483c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac753900
Class: RigVM.Object, Addr: 0x76903dd580
	RigVMMemoryContainer StructProperty; 	//[Offset: 0x0, Size: 160]
	RigVMMemoryContainer StructProperty; 	//[Offset: 0x0, Size: 160]
	RigVMByteCode StructProperty; 	//[Offset: 0x0, Size: 48]
	RigVMInstructionArray StructProperty; 	//[Offset: 0x0, Size: 16]
	RigVMExecuteContext StructProperty; 	//[Offset: 0x0, Size: 96]
	FName[] FunctionNamesStorage; //[Offset: 0x0, Size: 16]
	structRigVMParameter[] Parameters; //[Offset: 0x0, Size: 16]
	<FName, int> ParametersNameMap; //[Offset: 0x0, Size: 80]
	RigVM* DeferredVMToCopy; 	//[Offset: 0x0, Size: 8]
	Void SetParameterValueVector2D(constoutrefFName InParameterName, constoutrefstructVector2D InValue, int InArrayIndex); //Addr 0x75ee74cbc4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc56a00
Class: AnimationDataSourceRegistry.Object, Addr: 0x7690291a00
	<FName, Object*> DataSources; //[Offset: 0x0, Size: 80]
Class: AdditiveControlRig.ControlRig.Object, Addr: 0x7690225380
Class: ControlRigAnimInstance.AnimInstance.Object, Addr: 0x769022f380
Class: ControlRigBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object, Addr: 0x769022f100
Class: ControlRigComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769022ec00
	ControlRig* ControlRigClass; 	//[Offset: 0x0, Size: 8]
	delegate OnPostInitializeDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnPreSetupDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnPostSetupDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnPreUpdateDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnPostUpdateDelegate; 	//[Offset: 0x0, Size: 16]
	structControlRigComponentMappedElement[] MappedElements; //[Offset: 0x0, Size: 16]
	bool bResetTransformBeforeTick; 	//[Offset: 0x0, Size: 1]
	bool bResetInitialsBeforeSetup; 	//[Offset: 0x0, Size: 1]
	bool bUpdateRigOnTick; 	//[Offset: 0x0, Size: 1]
	bool bUpdateInEditor; 	//[Offset: 0x0, Size: 1]
	bool bDrawBones; 	//[Offset: 0x0, Size: 1]
	ControlRig* ControlRig; 	//[Offset: 0x0, Size: 8]
	Void Update(float DeltaTime); //Addr 0x75eb5c7dd4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac755000
Class: ControlRigControlActor.Actor.Object, Addr: 0x769022e980
	Actor* ActorToTrack; 	//[Offset: 0x0, Size: 8]
	ControlRig* ControlRigClass; 	//[Offset: 0x0, Size: 8]
	bool bRefreshOnTick; 	//[Offset: 0x0, Size: 1]
	bool bIsSelectable; 	//[Offset: 0x0, Size: 1]
	MaterialInterface* MaterialOverride; 	//[Offset: 0x0, Size: 8]
	StrProperty ColorParameter; 	//[Offset: 0x0, Size: 16]
	bool bCastShadows; 	//[Offset: 0x0, Size: 1]
	SceneComponent* ActorRootComponent; 	//[Offset: 0x0, Size: 8]
	ControlRig* ControlRig; 	//[Offset: 0x0, Size: 8]
	FName[] ControlNames; //[Offset: 0x0, Size: 16]
	structTransform[] GizmoTransforms; //[Offset: 0x0, Size: 16]
	StaticMeshComponent*[] Components; //[Offset: 0x0, Size: 16]
	MaterialInstanceDynamic*[] Materials; //[Offset: 0x0, Size: 16]
	FName ColorParameterName; 	//[Offset: 0x0, Size: 12]
	Void Refresh(); //Addr 0x75eb5cdbf0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac754e00
Class: ControlRigGizmoActor.Actor.Object, Addr: 0x769022e700
	SceneComponent* ActorRootComponent; 	//[Offset: 0x0, Size: 8]
	StaticMeshComponent* StaticMeshComponent; 	//[Offset: 0x0, Size: 8]
	uint32 ControlRigIndex; 	//[Offset: 0x0, Size: 4]
	FName ControlName; 	//[Offset: 0x0, Size: 12]
	FName ColorParameterName; 	//[Offset: 0x0, Size: 12]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	bool bSelected; 	//[Offset: 0x0, Size: 1]
	bool bSelectable; 	//[Offset: 0x0, Size: 1]
	bool bHovered; 	//[Offset: 0x0, Size: 1]
	Void SetSelected(bool bInSelected); //Addr 0x75eb5cea64 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac758200
Class: ControlRigGizmoLibrary.Object, Addr: 0x769022e480
	ControlRigGizmoDefinition StructProperty; 	//[Offset: 0x0, Size: 112]
	Material* DefaultMaterial; 	//[Offset: 0x0, Size: 48]
	FName MaterialColorParameter; 	//[Offset: 0x0, Size: 12]
	structControlRigGizmoDefinition[] Gizmos; //[Offset: 0x0, Size: 16]
Class: ControlRigLayerInstance.AnimInstance.Object, Addr: 0x769022e200
Class: ControlRigValidationPass.Object, Addr: 0x769022dd00
Class: ControlRigNumericalValidationPass.ControlRigValidationPass.Object, Addr: 0x769022df80
	bool bCheckControls; 	//[Offset: 0x0, Size: 1]
	bool bCheckBones; 	//[Offset: 0x0, Size: 1]
	bool bCheckCurves; 	//[Offset: 0x0, Size: 1]
	float TranslationPrecision; 	//[Offset: 0x0, Size: 4]
	float RotationPrecision; 	//[Offset: 0x0, Size: 4]
	float ScalePrecision; 	//[Offset: 0x0, Size: 4]
	float CurvePrecision; 	//[Offset: 0x0, Size: 4]
	FName EventNameA; 	//[Offset: 0x0, Size: 12]
	FName EventNameB; 	//[Offset: 0x0, Size: 12]
	RigPose StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ControlRigObjectHolder.Object, Addr: 0x769022da80
	Object*[] objects; //[Offset: 0x0, Size: 16]
Class: MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x769022d300
	MovieSceneCompiledData* CompiledData; 	//[Offset: 0x0, Size: 8]
	enum EMovieSceneCompletionMode DefaultCompletionMode { //[Offset: 0x0, Size: 1]
		KeepState = 0
		RestoreState = 45002f00000000
		ProjectDefault = 6c004200000000
		EMovieSceneCompletionMode_MAX = 0
	};
	bool bParentContextsAreSignificant; 	//[Offset: 0x0, Size: 1]
	bool bPlayableDirectly; 	//[Offset: 0x0, Size: 1]
	enum EMovieSceneSequenceFlags SequenceFlags { //[Offset: 0x0, Size: 1]
		None = 0
		Volatile = 45002f00000000
		BlockingEvaluation = 65005300000000
		InheritedFlags = 7300000000
		EMovieSceneSequenceFlags_MAX = 0
	};
	structMovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName); //Addr 0x75ed1d0cdc [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac758000
Class: MovieSceneCompiledDataManager.Object, Addr: 0x769028fd80
	<int, structMovieSceneSequenceHierarchy> Hierarchies; //[Offset: 0x0, Size: 80]
	<int, structMovieSceneEvaluationTemplate> TrackTemplates; //[Offset: 0x0, Size: 80]
	<int, structMovieSceneEvaluationField> TrackTemplateFields; //[Offset: 0x0, Size: 80]
	<int, structMovieSceneEntityComponentField> EntityComponentFields; //[Offset: 0x0, Size: 80]
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x769022d580
	MovieScene* MovieScene; 	//[Offset: 0x0, Size: 8]
	LevelSequenceObjectReferenceMap StructProperty; 	//[Offset: 0x0, Size: 80]
	LevelSequenceBindingReferences StructProperty; 	//[Offset: 0x0, Size: 160]
	<FString, structLevelSequenceObject> PossessedObjects; //[Offset: 0x0, Size: 80]
	Object* DirectorClass; 	//[Offset: 0x0, Size: 8]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
	Void RemoveMetaDataByClass(classObject InClass); //Addr 0x75ed5e680c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac757b00
Class: ControlRigSequence.LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x769022d800
	AnimSequence* LastExportedToAnimationSequence; 	//[Offset: 0x0, Size: 48]
	SkeletalMesh* LastExportedUsingSkeletalMesh; 	//[Offset: 0x0, Size: 48]
	float LastExportedFrameRate; 	//[Offset: 0x0, Size: 4]
Class: AnimSequencerInstance.AnimInstance.Object, Addr: 0x769022ce00
Class: ControlRigSequencerAnimInstance.AnimSequencerInstance.AnimInstance.Object, Addr: 0x769022d080
Class: ControlRigSettings.DeveloperSettings.Object, Addr: 0x769022cb80
Class: ControlRigValidator.Object, Addr: 0x769022c680
	ControlRigValidationPass*[] Passes; //[Offset: 0x0, Size: 16]
Class: FKControlRig.ControlRig.Object, Addr: 0x769022c400
	bool[] IsControlActive; //[Offset: 0x0, Size: 16]
	enum EControlRigFKRigExecuteMode ApplyMode { //[Offset: 0x0, Size: 1]
		Replace = 0
		Additive = 45002f00000000
		Max = 6f004600000000
		EControlRigFKRigExecuteMode_MAX = 7500000000
	};
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769022bf00
	structBoolParameterNameAndCurve[] BoolParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structVector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structVectorParameterNameAndCurves[] VectorParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structColorParameterNameAndCurves[] ColorParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structTransformParameterNameAndCurves[] TransformParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	bool RemoveVectorParameter(FName InParameterName); //Addr 0x75ed330680 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac756e00
Class: MovieSceneControlRigParameterSection.MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769022c180
	ControlRig* ControlRig; 	//[Offset: 0x0, Size: 8]
	bool[] ControlsMask; //[Offset: 0x0, Size: 16]
	MovieSceneTransformMask StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bAdditive; 	//[Offset: 0x0, Size: 1]
	bool bApplyBoneFilter; 	//[Offset: 0x0, Size: 1]
	InputBlendPose StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	<FName, structChannelMapInfo> ControlChannelMap; //[Offset: 0x0, Size: 80]
	structEnumParameterNameAndCurve[] EnumParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
	structIntegerParameterNameAndCurve[] IntegerParameterNamesAndCurves; //[Offset: 0x0, Size: 16]
Class: MovieSceneControlRigParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769022bc80
	ControlRig* ControlRig; 	//[Offset: 0x0, Size: 8]
	MovieSceneSection* SectionToKey; 	//[Offset: 0x0, Size: 8]
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
	FName TrackName; 	//[Offset: 0x0, Size: 12]
Class: GroomActor.Actor.Object, Addr: 0x769022ba00
	GroomComponent* GroomComponent; 	//[Offset: 0x0, Size: 8]
Class: GroomComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769022ad80
	GroomAsset* GroomAsset; 	//[Offset: 0x0, Size: 8]
	NiagaraComponent*[] NiagaraComponents; //[Offset: 0x0, Size: 16]
	SkeletalMesh* SourceSkeletalMesh; 	//[Offset: 0x0, Size: 8]
	GroomBindingAsset* BindingAsset; 	//[Offset: 0x0, Size: 8]
	PhysicsAsset* PhysicsAsset; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Strands_DebugMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Strands_DefaultMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Cards_DefaultMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* Meshes_DefaultMaterial; 	//[Offset: 0x0, Size: 8]
	NiagaraSystem* AngularSpringsSystem; 	//[Offset: 0x0, Size: 8]
	NiagaraSystem* CosseratRodsSystem; 	//[Offset: 0x0, Size: 8]
	StrProperty AttachmentName; 	//[Offset: 0x0, Size: 16]
	structHairGroupDesc[] GroomGroupsDesc; //[Offset: 0x0, Size: 16]
	Void SetGroomAsset(GroomAsset* Asset); //Addr 0x75eb753c94 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac756a00
Class: GroomAsset.Object, Addr: 0x769022b780
	structHairGroupInfoWithVisibility[] HairGroupsInfo; //[Offset: 0x0, Size: 16]
	structHairGroupsRendering[] HairGroupsRendering; //[Offset: 0x0, Size: 16]
	structHairGroupsPhysics[] HairGroupsPhysics; //[Offset: 0x0, Size: 16]
	structHairGroupsInterpolation[] HairGroupsInterpolation; //[Offset: 0x0, Size: 16]
	structHairGroupsLOD[] HairGroupsLOD; //[Offset: 0x0, Size: 16]
	structHairGroupsCardsSourceDescription[] HairGroupsCards; //[Offset: 0x0, Size: 16]
	structHairGroupsMeshesSourceDescription[] HairGroupsMeshes; //[Offset: 0x0, Size: 16]
	structHairGroupsMaterial[] HairGroupsMaterials; //[Offset: 0x0, Size: 16]
	bool EnableGlobalInterpolation; 	//[Offset: 0x0, Size: 1]
	enum EGroomInterpolationType HairInterpolationType { //[Offset: 0x0, Size: 1]
		None = 0
		RigidTransform = 43007300000000
		OffsetTransform = 6e004900000000
		SmoothTransform = 54006e00000000
		EGroomInterpolationType_MAX = 0
	};
	enum EHairLODSelectionType LODSelectionType { //[Offset: 0x0, Size: 1]
		Cpu = 0
		Gpu = 43007300000000
		EHairLODSelectionType_MAX = 800000000
	};
	PerPlatformInt StructProperty; 	//[Offset: 0x0, Size: 4]
	PerPlatformBool StructProperty; 	//[Offset: 0x0, Size: 1]
	float[] EffectiveLODBias; //[Offset: 0x0, Size: 16]
	AssetUserData*[] AssetUserData; //[Offset: 0x0, Size: 16]
Class: GroomAssetImportData.AssetImportData.Object, Addr: 0x769022b500
	GroomImportOptions* ImportOptions; 	//[Offset: 0x0, Size: 8]
Class: GroomBindingAsset.Object, Addr: 0x769022b280
	GroomAsset* Groom; 	//[Offset: 0x0, Size: 8]
	SkeletalMesh* SourceSkeletalMesh; 	//[Offset: 0x0, Size: 8]
	SkeletalMesh* TargetSkeletalMesh; 	//[Offset: 0x0, Size: 8]
	int NumInterpolationPoints; 	//[Offset: 0x0, Size: 4]
	int MatchingSection; 	//[Offset: 0x0, Size: 4]
	structGoomBindingGroupInfo[] GroupInfos; //[Offset: 0x0, Size: 16]
Class: GroomBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769022b000
	GroomBindingAsset* CreateNewGroomBindingAssetWithPath(FString InDesiredPackagePath, GroomAsset* InGroomAsset, SkeletalMesh* InSkeletalMesh, int InNumInterpolationPoints, SkeletalMesh* InSourceSkeletalMeshForTransfer, int InMatchingSection); //Addr 0x75eb75372c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac756c00
Class: GroomCreateBindingOptions.Object, Addr: 0x769022ab00
	SkeletalMesh* SourceSkeletalMesh; 	//[Offset: 0x0, Size: 8]
	SkeletalMesh* TargetSkeletalMesh; 	//[Offset: 0x0, Size: 8]
	int NumInterpolationPoints; 	//[Offset: 0x0, Size: 4]
	int MatchingSection; 	//[Offset: 0x0, Size: 4]
Class: GroomCreateFollicleMaskOptions.Object, Addr: 0x769022a880
	int Resolution; 	//[Offset: 0x0, Size: 4]
	int RootRadius; 	//[Offset: 0x0, Size: 4]
	structFollicleMaskOptions[] Grooms; //[Offset: 0x0, Size: 16]
Class: GroomCreateStrandsTexturesOptions.Object, Addr: 0x769022a600
	int Resolution; 	//[Offset: 0x0, Size: 4]
	enum EStrandsTexturesTraceType TraceType { //[Offset: 0x0, Size: 1]
		TraceInside = 0
		TraceOuside = 68007300000000
		TraceBidirectional = 74006500000000
		EStrandsTexturesTraceType_MAX = 7600000000
	};
	float TraceDistance; 	//[Offset: 0x0, Size: 4]
	enum EStrandsTexturesMeshType MeshType { //[Offset: 0x0, Size: 1]
		Static = 0
		Skeletal = 43007300000000
		EStrandsTexturesMeshType_MAX = 800000000
	};
	StaticMesh* StaticMesh; 	//[Offset: 0x0, Size: 8]
	SkeletalMesh* SkeletalMesh; 	//[Offset: 0x0, Size: 8]
	int LODIndex; 	//[Offset: 0x0, Size: 4]
	int SectionIndex; 	//[Offset: 0x0, Size: 4]
	int UVChannelIndex; 	//[Offset: 0x0, Size: 4]
	int[] GroupIndex; //[Offset: 0x0, Size: 16]
Class: GroomImportOptions.Object, Addr: 0x769022fd80
	GroomConversionSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	structHairGroupsInterpolation[] InterpolationSettings; //[Offset: 0x0, Size: 16]
Class: GroomHairGroupsPreview.Object, Addr: 0x769022fb00
	structGroomHairGroupPreview[] Groups; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690234e80
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235100
Class: NiagaraDataInterfaceHairStrands.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769022f880
	GroomAsset* DefaultSource; 	//[Offset: 0x0, Size: 8]
	Actor* SourceActor; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfacePhysicsAsset.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690234980
	PhysicsAsset* DefaultSource; 	//[Offset: 0x0, Size: 8]
	Actor* SourceActor; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690234200
	int OutputShaderStages; //[Offset: 0x0, Size: 80]
	int IterationShaderStages; //[Offset: 0x0, Size: 80]
Class: NiagaraDataInterfaceVelocityGrid.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690234480
	IntVector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: NiagaraDataInterfacePressureGrid.NiagaraDataInterfaceVelocityGrid.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690234700
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233a80
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233d00
	NiagaraVariable StructProperty; 	//[Offset: 0x0, Size: 32]
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233f80
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233800
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233580
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690233300
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690233080
	enum ENiagaraSystemSpawnSectionStartBehavior SectionStartBehavior { //[Offset: 0x0, Size: 4]
		Activate = 0
		ENiagaraSystemSpawnSectionStartBehavior_MAX = 0
	};
	enum ENiagaraSystemSpawnSectionEvaluateBehavior SectionEvaluateBehavior { //[Offset: 0x0, Size: 4]
		ActivateIfInactive = 0
		None = 43007300000000
		ENiagaraSystemSpawnSectionEvaluateBehavior_MAX = 800000000
	};
	enum ENiagaraSystemSpawnSectionEndBehavior SectionEndBehavior { //[Offset: 0x0, Size: 4]
		SetSystemInactive = 0
		Deactivate = 51006e00000000
		None = 6e006b00000000
		ENiagaraSystemSpawnSectionEndBehavior_MAX = 7500000000
	};
	enum ENiagaraAgeUpdateMode AgeUpdateMode { //[Offset: 0x0, Size: 1]
		TickDeltaTime = 0
		DesiredAge = 61006900000000
		DesiredAgeNoSeek = 74006100000000
		ENiagaraAgeUpdateMode_MAX = 7500000000
	};
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690232e00
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690232b80
	int ChannelsUsed; 	//[Offset: 0x0, Size: 4]
Class: NiagaraActor.Actor.Object, Addr: 0x7690232900
	NiagaraComponent* NiagaraComponent; 	//[Offset: 0x0, Size: 8]
	bool bDestroyOnSystemFinish; 	//[Offset: 0x0, Size: 1]
	Void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish); //Addr 0x75eb9a958c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac756800
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690232680
	NiagaraSystem* Asset; 	//[Offset: 0x0, Size: 8]
	enum ENiagaraTickBehavior TickBehavior { //[Offset: 0x0, Size: 1]
		UsePrereqs = 0
		UseComponentTickGroup = 3a006500000000
		ForceTickFirst = 66006500000000
		ForceTickLast = 58004100000000
		ENiagaraTickBehavior_MAX = 0
	};
	NiagaraUserRedirectionParameterStore StructProperty; 	//[Offset: 0x0, Size: 200]
	bool bForceSolo; 	//[Offset: 0x0, Size: 1]
	bool bEnableGpuComputeDebug; 	//[Offset: 0x0, Size: 1]
	bool bAutoDestroy; 	//[Offset: 0x0, Size: 1]
	bool bRenderingEnabled; 	//[Offset: 0x0, Size: 1]
	bool bAutoManageAttachment; 	//[Offset: 0x0, Size: 1]
	bool bAutoAttachWeldSimulatedBodies; 	//[Offset: 0x0, Size: 1]
	float MaxTimeBeforeForceUpdateTransform; 	//[Offset: 0x0, Size: 4]
	bool bOverrideNiagaraEffectType; 	//[Offset: 0x0, Size: 1]
	structNiagaraComponentScalabilitySettings[] ScalabilitySettings; //[Offset: 0x0, Size: 16]
	structNiagaraMaterialOverride[] EmitterMaterials; //[Offset: 0x0, Size: 16]
	delegate OnSystemFinished; 	//[Offset: 0x0, Size: 16]
	SceneComponent* AutoAttachParent; 	//[Offset: 0x0, Size: 8]
	FName AutoAttachSocketName; 	//[Offset: 0x0, Size: 12]
	enum EAttachmentRule AutoAttachLocationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachRotationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AutoAttachScaleRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	Void SetVariableVec4(FName InVariableName, constoutrefstructVector4 InValue); //Addr 0x75eb9b2a74 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac75b100
Class: NiagaraComponentPool.Object, Addr: 0x7690232400
	<NiagaraSystem*, structNCPool> WorldParticleSystemPools; //[Offset: 0x0, Size: 80]
Class: NiagaraComponentSettings.Object, Addr: 0x7690231c80
	FName SuppressActivationList; //[Offset: 0x0, Size: 80]
	FName ForceAutoPooolingList; //[Offset: 0x0, Size: 80]
	structNiagaraEmitterNameSettingsRef SuppressEmitterList; //[Offset: 0x0, Size: 80]
Class: NiagaraConvertInPlaceUtilityBase.Object, Addr: 0x7690231a00
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690231780
	Texture2DArray* Texture; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690231500
	int MaxElements; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690231280
	float[] FloatData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690231000
	structVector2D[] FloatData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690230d80
	structVector[] FloatData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690230b00
	structVector4[] FloatData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690230880
	structLinearColor[] ColorData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690230600
	structQuat[] QuatData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690230380
	Void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, constoutrefstructVector4[] ArrayData); //Addr 0x75eb9b9b24 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac75e300
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690230100
	int[] IntData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023a380
	bool[] BoolData; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023a100
	SoundSubmix* Submix; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239e80
	SoundSubmix* Submix; 	//[Offset: 0x0, Size: 8]
	int Resolution; 	//[Offset: 0x0, Size: 4]
	float ScopeInMilliseconds; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239c00
	SoundBase* SoundToPlay; 	//[Offset: 0x0, Size: 8]
	SoundAttenuation* Attenuation; 	//[Offset: 0x0, Size: 8]
	SoundConcurrency* Concurrency; 	//[Offset: 0x0, Size: 8]
	FName[] ParameterNames; //[Offset: 0x0, Size: 16]
	bool bLimitPlaysPerTick; 	//[Offset: 0x0, Size: 1]
	int MaxPlaysPerTick; 	//[Offset: 0x0, Size: 4]
	bool bStopWhenComponentIsDestroyed; 	//[Offset: 0x0, Size: 1]
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239980
	int Resolution; 	//[Offset: 0x0, Size: 4]
	float MinimumFrequency; 	//[Offset: 0x0, Size: 4]
	float MaximumFrequency; 	//[Offset: 0x0, Size: 4]
	float NoiseFloorDb; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239700
	int PlayerControllerIndex; 	//[Offset: 0x0, Size: 4]
	bool bRequireCurrentFrameData; 	//[Offset: 0x0, Size: 1]
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239480
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238f80
	float[] ShaderLUT; //[Offset: 0x0, Size: 16]
	float LUTMinTime; 	//[Offset: 0x0, Size: 4]
	float LUTMaxTime; 	//[Offset: 0x0, Size: 4]
	float LUTInvTimeRange; 	//[Offset: 0x0, Size: 4]
	float LUTNumSamplesMinusOne; 	//[Offset: 0x0, Size: 4]
	bool bUseLUT; 	//[Offset: 0x0, Size: 1]
	bool bExposeCurve; 	//[Offset: 0x0, Size: 1]
	FName ExposedName; 	//[Offset: 0x0, Size: 12]
	Texture2D* ExposedTexture; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690239200
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238d00
	uint32 Seed; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238a80
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
Class: NiagaraParticleCallbackHandler.Interface.Object, Addr: 0x7690238800
	Void ReceiveParticleData(constoutrefstructBasicParticleData[] Data, NiagaraSystem* NiagaraSystem); //Addr 0x75eb9bbfd8 [Native|Event|BlueprintCallabl|BlueprintEvent] // UFieldProperty addr: 0x75ac75e200
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238580
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	enum ENDIExport_GPUAllocationMode GPUAllocationMode { //[Offset: 0x0, Size: 1]
		FixedSize = 0
		PerParticle = 6500000000
		ENDIExport_MAX = ffffffff00000000
	};
	int GPUAllocationFixedSize; 	//[Offset: 0x0, Size: 4]
	float GPUAllocationPerParticleSize; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238300
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237e00
	int NumCellsX; 	//[Offset: 0x0, Size: 4]
	int NumCellsY; 	//[Offset: 0x0, Size: 4]
	int NumCellsMaxAxis; 	//[Offset: 0x0, Size: 4]
	int NumAttributes; 	//[Offset: 0x0, Size: 4]
	bool SetGridFromMaxAxis; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690238080
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	enum ENiagaraGpuBufferFormat OverrideBufferFormat { //[Offset: 0x0, Size: 1]
		Float = 0
		HalfFloat = 3a006500000000
		UnsignedNormalizedByte = 66006500000000
		Max = 58004100000000
		ENiagaraGpuBufferFormat_MAX = 0
	};
	bool bOverrideFormat; 	//[Offset: 0x0, Size: 1]
	<uint64, TextureRenderTarget2DArray*> ManagedRenderTargets; //[Offset: 0x0, Size: 80]
	Void GetTextureSize(constNiagaraComponent* Component, outint SizeX, outint SizeY); //Addr 0x75eb9bc95c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac75de00
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237b80
	StrProperty EmitterName; 	//[Offset: 0x0, Size: 16]
	StrProperty DIName; 	//[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237680
	IntVector StructProperty; 	//[Offset: 0x0, Size: 12]
	float CellSize; 	//[Offset: 0x0, Size: 4]
	int NumCellsMaxAxis; 	//[Offset: 0x0, Size: 4]
	enum ESetResolutionMethod SetResolutionMethod { //[Offset: 0x0, Size: 4]
		Independent = 0
		MaxAxis = 74006500000000
		CellSize = 65004d00000000
		ESetResolutionMethod_MAX = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237900
	int NumAttributes; 	//[Offset: 0x0, Size: 4]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	enum ENiagaraGpuBufferFormat BufferFormat { //[Offset: 0x0, Size: 1]
		Float = 0
		HalfFloat = 3a006500000000
		UnsignedNormalizedByte = 66006500000000
		Max = 58004100000000
		ENiagaraGpuBufferFormat_MAX = 0
	};
	Void GetTextureSize(constNiagaraComponent* Component, outint SizeX, outint SizeY, outint SizeZ); //Addr 0x75eb9bd4d8 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac75da00
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237400
	Actor* SourceLandscape; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceMeshRendererInfo.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690237180
	NiagaraMeshRendererProperties* MeshRenderer; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236f00
	uint32 MaxNeighborsPerCell; 	//[Offset: 0x0, Size: 4]
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236c80
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236a00
	StrProperty EmitterName; 	//[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236780
	NiagaraPlatformSet StructProperty; 	//[Offset: 0x0, Size: 48]
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236500
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	enum ETextureRenderTargetFormat OverrideRenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	bool bOverrideFormat; 	//[Offset: 0x0, Size: 1]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	<uint64, TextureRenderTarget2D*> ManagedRenderTargets; //[Offset: 0x0, Size: 80]
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236280
	IntVector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ETextureRenderTargetFormat OverrideRenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	bool bOverrideFormat; 	//[Offset: 0x0, Size: 1]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	<uint64, TextureRenderTarget2DArray*> ManagedRenderTargets; //[Offset: 0x0, Size: 80]
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690236000
	IntVector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ETextureRenderTargetFormat OverrideRenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	bool bOverrideFormat; 	//[Offset: 0x0, Size: 1]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	<uint64, TextureRenderTargetVolume*> ManagedRenderTargets; //[Offset: 0x0, Size: 80]
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235d80
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235b00
	enum ENDISkeletalMesh_SourceMode SourceMode { //[Offset: 0x0, Size: 1]
		Default = 0
		Source = 58004100000000
		AttachParent = 3a00000000
		ENDISkeletalMesh_MAX = 0
	};
	Actor* Source; 	//[Offset: 0x0, Size: 8]
	NiagaraUserParameterBinding StructProperty; 	//[Offset: 0x0, Size: 32]
	SkeletalMeshComponent* SourceComponent; 	//[Offset: 0x0, Size: 8]
	enum ENDISkeletalMesh_SkinningMode SkinningMode { //[Offset: 0x0, Size: 1]
		Invalid = 0
		None = 49004400000000
		SkinOnTheFly = 68007300000000
		PreSkin = 64006f00000000
		ENDISkeletalMesh_MAX = 0
	};
	FName[] SamplingRegions; //[Offset: 0x0, Size: 16]
	int WholeMeshLOD; 	//[Offset: 0x0, Size: 4]
	FName[] FilteredBones; //[Offset: 0x0, Size: 16]
	FName[] FilteredSockets; //[Offset: 0x0, Size: 16]
	FName ExcludeBoneName; 	//[Offset: 0x0, Size: 12]
	bool bExcludeBone; 	//[Offset: 0x0, Size: 1]
	bool bRequireCurrentFrameData; 	//[Offset: 0x0, Size: 1]
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235880
	Actor* Source; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235600
	enum ENDIStaticMesh_SourceMode SourceMode { //[Offset: 0x0, Size: 1]
		Default = 0
		Source = 49004400000000
		AttachParent = 53005f00000000
		DefaultMeshOnly = 6500000000
		ENDIStaticMesh_MAX = 0
	};
	StaticMesh* DefaultMesh; 	//[Offset: 0x0, Size: 8]
	Actor* Source; 	//[Offset: 0x0, Size: 8]
	StaticMeshComponent* SourceComponent; 	//[Offset: 0x0, Size: 8]
	NDIStaticMeshSectionFilter StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bUsePhysicsBodyVelocity; 	//[Offset: 0x0, Size: 1]
	FName[] FilteredSockets; //[Offset: 0x0, Size: 16]
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x7690235380
	Texture* Texture; 	//[Offset: 0x0, Size: 8]
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023f600
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023f380
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023f100
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	RichCurve StructProperty; 	//[Offset: 0x0, Size: 128]
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023ee80
	VectorField* Field; 	//[Offset: 0x0, Size: 8]
	bool bTileX; 	//[Offset: 0x0, Size: 1]
	bool bTileY; 	//[Offset: 0x0, Size: 1]
	bool bTileZ; 	//[Offset: 0x0, Size: 1]
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object, Addr: 0x769023ec00
	VolumeTexture* Texture; 	//[Offset: 0x0, Size: 8]
Class: NiagaraEditorDataBase.Object, Addr: 0x769023e980
Class: NiagaraSignificanceHandler.Object, Addr: 0x769023e700
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object, Addr: 0x769023e480
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object, Addr: 0x769023e200
Class: NiagaraEffectType.Object, Addr: 0x769023df80
	enum ENiagaraScalabilityUpdateFrequency UpdateFrequency { //[Offset: 0x0, Size: 4]
		SpawnOnly = 0
		Low = 72006f00000000
		Medium = 73007100000000
		High = 6c006100000000
		Continuous = 4d005f00000000
		ENiagaraScalabilityUpdateFrequency_MAX = 0
	};
	enum ENiagaraCullReaction CullReaction { //[Offset: 0x0, Size: 4]
		Deactivate = 0
		DeactivateImmediate = 55007900000000
		DeactivateResume = 6e006500000000
		DeactivateImmediateResume = 6c006e00000000
		ENiagaraCullReaction_MAX = 0
	};
	NiagaraSignificanceHandler* SignificanceHandler; 	//[Offset: 0x0, Size: 8]
	structNiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings; //[Offset: 0x0, Size: 16]
	NiagaraSystemScalabilitySettingsArray StructProperty; 	//[Offset: 0x0, Size: 16]
	NiagaraEmitterScalabilitySettingsArray StructProperty; 	//[Offset: 0x0, Size: 16]
Class: NiagaraEmitter.Object, Addr: 0x769023dd00
	bool bLocalSpace; 	//[Offset: 0x0, Size: 1]
	bool bDeterminism; 	//[Offset: 0x0, Size: 1]
	int RandomSeed; 	//[Offset: 0x0, Size: 4]
	enum EParticleAllocationMode AllocationMode { //[Offset: 0x0, Size: 1]
		AutomaticEstimate = 0
		ManualEstimate = 6d000000000000
		EParticleAllocationMode_MAX = 0
	};
	int PreAllocationCount; 	//[Offset: 0x0, Size: 4]
	NiagaraEmitterScriptProperties StructProperty; 	//[Offset: 0x0, Size: 40]
	NiagaraEmitterScriptProperties StructProperty; 	//[Offset: 0x0, Size: 40]
	enum ENiagaraSimTarget SimTarget { //[Offset: 0x0, Size: 1]
		CPUSim = 0
		GPUComputeSim = 6500000000
		ENiagaraSimTarget_MAX = 800000000
	};
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	int MinDetailLevel; 	//[Offset: 0x0, Size: 4]
	int MaxDetailLevel; 	//[Offset: 0x0, Size: 4]
	NiagaraDetailsLevelScaleOverrides StructProperty; 	//[Offset: 0x0, Size: 20]
	NiagaraPlatformSet StructProperty; 	//[Offset: 0x0, Size: 48]
	NiagaraEmitterScalabilityOverrides StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bInterpolatedSpawning; 	//[Offset: 0x0, Size: 1]
	bool bFixedBounds; 	//[Offset: 0x0, Size: 1]
	bool bUseMinDetailLevel; 	//[Offset: 0x0, Size: 1]
	bool bUseMaxDetailLevel; 	//[Offset: 0x0, Size: 1]
	bool bOverrideGlobalSpawnCountScale; 	//[Offset: 0x0, Size: 1]
	bool bRequiresPersistentIDs; 	//[Offset: 0x0, Size: 1]
	bool bCombineEventSpawn; 	//[Offset: 0x0, Size: 1]
	float MaxDeltaTimePerTick; 	//[Offset: 0x0, Size: 4]
	uint32 DefaultShaderStageIndex; 	//[Offset: 0x0, Size: 4]
	uint32 MaxUpdateIterations; 	//[Offset: 0x0, Size: 4]
	uint32 SpawnStages; //[Offset: 0x0, Size: 80]
	bool bSimulationStagesEnabled; 	//[Offset: 0x0, Size: 1]
	bool bDeprecatedShaderStagesEnabled; 	//[Offset: 0x0, Size: 1]
	bool bLimitDeltaTime; 	//[Offset: 0x0, Size: 1]
	StrProperty UniqueEmitterName; 	//[Offset: 0x0, Size: 16]
	NiagaraRendererProperties*[] RendererProperties; //[Offset: 0x0, Size: 16]
	structNiagaraEventScriptProperties[] EventHandlerScriptProps; //[Offset: 0x0, Size: 16]
	NiagaraSimulationStageBase*[] SimulationStages; //[Offset: 0x0, Size: 16]
	NiagaraScript* GPUComputeScript; 	//[Offset: 0x0, Size: 8]
	FName[] SharedEventGeneratorIds; //[Offset: 0x0, Size: 16]
Class: NiagaraEventReceiverEmitterAction.Object, Addr: 0x769023da80
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object, Addr: 0x769023d800
	uint32 NumParticles; 	//[Offset: 0x0, Size: 4]
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769023d580
	NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, structVector Location, structRotator Rotation, LocationType(ByteProperty) LocationType, bool bAutoDestroy, bool bAutoActivate, enum ENCPoolMethod PoolingMethod, bool bPreCullCheck); //Addr 0x75eb9cb458 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac75d000
Class: NiagaraMessageDataBase.Object, Addr: 0x769023ce00
Class: NiagaraParameterCollectionInstance.Object, Addr: 0x769023cb80
	NiagaraParameterCollection* Collection; 	//[Offset: 0x0, Size: 8]
	structNiagaraVariable[] OverridenParameters; //[Offset: 0x0, Size: 16]
	NiagaraParameterStore StructProperty; 	//[Offset: 0x0, Size: 120]
	Void SetVectorParameter(FString InVariableName, structVector InValue); //Addr 0x75eb9cd008 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac75f900
Class: NiagaraParameterCollection.Object, Addr: 0x769023c900
	FName Namespace; 	//[Offset: 0x0, Size: 12]
	structNiagaraVariable[] Parameters; //[Offset: 0x0, Size: 16]
	MaterialParameterCollection* SourceMaterialCollection; 	//[Offset: 0x0, Size: 8]
	NiagaraParameterCollectionInstance* DefaultInstance; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: NiagaraPrecompileContainer.Object, Addr: 0x769023c680
	NiagaraScript*[] Scripts; //[Offset: 0x0, Size: 16]
	NiagaraSystem* System; 	//[Offset: 0x0, Size: 8]
Class: NiagaraPreviewBase.Actor.Object, Addr: 0x769023c400
	Void SetSystem(NiagaraSystem* InSystem); //Addr 0x75ec080c04 [Event|BlueprintCallabl|BlueprintEvent] // UFieldProperty addr: 0x75ac75f700
Class: NiagaraPreviewAxis.Object, Addr: 0x769023c180
	int Num(); //Addr 0x75eb9d25b8 [Native|Event|BlueprintEvent] // UFieldProperty addr: 0x75ac75f500
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023bf00
	FName Param; 	//[Offset: 0x0, Size: 12]
	int Count; 	//[Offset: 0x0, Size: 4]
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023bc80
	int Min; 	//[Offset: 0x0, Size: 4]
	int Max; 	//[Offset: 0x0, Size: 4]
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023ba00
	float Min; 	//[Offset: 0x0, Size: 4]
	float Max; 	//[Offset: 0x0, Size: 4]
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023b780
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023b500
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023b280
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object, Addr: 0x769023b000
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: NiagaraPreviewGrid.Actor.Object, Addr: 0x769023ad80
	NiagaraSystem* System; 	//[Offset: 0x0, Size: 8]
	enum ENiagaraPreviewGridResetMode ResetMode { //[Offset: 0x0, Size: 1]
		Never = 0
		Individual = 53007400000000
		All = 6c006200000000
		ENiagaraPreviewGridResetMode_MAX = 0
	};
	NiagaraPreviewAxis* PreviewAxisX; 	//[Offset: 0x0, Size: 8]
	NiagaraPreviewAxis* PreviewAxisY; 	//[Offset: 0x0, Size: 8]
	NiagaraPreviewBase* PreviewClass; 	//[Offset: 0x0, Size: 8]
	float SpacingX; 	//[Offset: 0x0, Size: 4]
	float SpacingY; 	//[Offset: 0x0, Size: 4]
	int NumX; 	//[Offset: 0x0, Size: 4]
	int NumY; 	//[Offset: 0x0, Size: 4]
	ChildActorComponent*[] PreviewComponents; //[Offset: 0x0, Size: 16]
	Void SetPaused(bool bPaused); //Addr 0x75eb9d3494 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac75f100
Class: NiagaraScriptBase.Object, Addr: 0x769023a600
Class: NiagaraScript.NiagaraScriptBase.Object, Addr: 0x769023a880
	enum ENiagaraScriptUsage Usage { //[Offset: 0x0, Size: 1]
		Function = 0
		Module = 0
		DynamicInput = 0
		ParticleSpawnScript = 0
		ParticleSpawnScriptInterpolated = 0
		ParticleUpdateScript = 0
		ParticleEventScript = 0
		ParticleSimulationStageScript = 0
		ParticleGPUComputeScript = 0
		EmitterSpawnScript = 0
		EmitterUpdateScript = 0
		SystemSpawnScript = 0
		SystemUpdateScript = 0
		ENiagaraScriptUsage_MAX = 7500000000
	};
	int UsageIndex; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	NiagaraParameterStore StructProperty; 	//[Offset: 0x0, Size: 120]
	NiagaraScriptExecutionParameterStore StructProperty; 	//[Offset: 0x0, Size: 152]
	structNiagaraBoundParameter[] ScriptExecutionBoundParameters; //[Offset: 0x0, Size: 16]
	NiagaraVMExecutableDataId StructProperty; 	//[Offset: 0x0, Size: 72]
	NiagaraVMExecutableData StructProperty; 	//[Offset: 0x0, Size: 224]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences; //[Offset: 0x0, Size: 16]
	structNiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces; //[Offset: 0x0, Size: 16]
	Void RaiseOnGPUCompilationComplete(); //Addr 0x75eb9d4810 [Final|Native] // UFieldProperty addr: 0x75ac75f000
Class: NiagaraScriptSourceBase.Object, Addr: 0x769023fd80
Class: NiagaraSettings.DeveloperSettings.Object, Addr: 0x769023fb00
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	FText[] QualityLevels; //[Offset: 0x0, Size: 16]
	<FString, FText> ComponentRendererWarningsPerClass; //[Offset: 0x0, Size: 80]
	enum ETextureRenderTargetFormat DefaultRenderTargetFormat { //[Offset: 0x0, Size: 1]
		RTF_R8 = 0
		RTF_RG8 = 3000600000000
		RTF_RGBA8 = 3000e00000000
		RTF_RGBA8_SRGB = 3001800000000
		RTF_R16f = 3002100000000
		RTF_RG16f = 3002d00000000
		RTF_RGBA16f = 3003800000000
		RTF_R32f = 3004200000000
		RTF_RG32f = 3004e00000000
		RTF_RGBA32f = 3005700000000
		RTF_RGB10A2 = 3005e00000000
		RTF_RG11B10 = 3006f00000000
		RTF_MAX = 3d00000000
	};
	enum ENiagaraGpuBufferFormat DefaultGridFormat { //[Offset: 0x0, Size: 1]
		Float = 0
		HalfFloat = 3a006500000000
		UnsignedNormalizedByte = 66006500000000
		Max = 58004100000000
		ENiagaraGpuBufferFormat_MAX = 0
	};
	NiagaraEffectType* DefaultEffectTypePtr; 	//[Offset: 0x0, Size: 8]
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object, Addr: 0x769023f880
	NiagaraScript* Script; 	//[Offset: 0x0, Size: 8]
	FName SimulationStageName; 	//[Offset: 0x0, Size: 12]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object, Addr: 0x7690245100
	enum ENiagaraIterationSource IterationSource { //[Offset: 0x0, Size: 1]
		Particles = 0
		DataInterface = 43007300000000
		ENiagaraIterationSource_MAX = 1800000000
	};
	int Iterations; 	//[Offset: 0x0, Size: 4]
	bool bSpawnOnly; 	//[Offset: 0x0, Size: 1]
	bool bDisablePartialParticleUpdate; 	//[Offset: 0x0, Size: 1]
	NiagaraVariableDataInterfaceBinding StructProperty; 	//[Offset: 0x0, Size: 32]
Class: NiagaraSystem.FXSystemAsset.Object, Addr: 0x7690244c00
	bool bDumpDebugSystemInfo; 	//[Offset: 0x0, Size: 1]
	bool bDumpDebugEmitterInfo; 	//[Offset: 0x0, Size: 1]
	bool bRequireCurrentFrameData; 	//[Offset: 0x0, Size: 1]
	bool bFixedBounds; 	//[Offset: 0x0, Size: 1]
	NiagaraEffectType* EffectType; 	//[Offset: 0x0, Size: 8]
	bool bOverrideScalabilitySettings; 	//[Offset: 0x0, Size: 1]
	structNiagaraSystemScalabilityOverride[] ScalabilityOverrides; //[Offset: 0x0, Size: 16]
	NiagaraSystemScalabilityOverrides StructProperty; 	//[Offset: 0x0, Size: 16]
	structNiagaraEmitterHandle[] EmitterHandles; //[Offset: 0x0, Size: 16]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides; //[Offset: 0x0, Size: 16]
	NiagaraScript* SystemSpawnScript; 	//[Offset: 0x0, Size: 8]
	NiagaraScript* SystemUpdateScript; 	//[Offset: 0x0, Size: 8]
	NiagaraSystemCompiledData StructProperty; 	//[Offset: 0x0, Size: 536]
	NiagaraUserRedirectionParameterStore StructProperty; 	//[Offset: 0x0, Size: 200]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	bool bAutoDeactivate; 	//[Offset: 0x0, Size: 1]
	bool bDeterminism; 	//[Offset: 0x0, Size: 1]
	int RandomSeed; 	//[Offset: 0x0, Size: 4]
	float WarmupTime; 	//[Offset: 0x0, Size: 4]
	int WarmupTickCount; 	//[Offset: 0x0, Size: 4]
	float WarmupTickDelta; 	//[Offset: 0x0, Size: 4]
	bool bHasSystemScriptDIsWithPerInstanceData; 	//[Offset: 0x0, Size: 1]
	FName[] UserDINamesReadInSystemScripts; //[Offset: 0x0, Size: 16]
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object, Addr: 0x7690244700
	NiagaraSystem* Template; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bAbsoluteScale; 	//[Offset: 0x0, Size: 1]
	bool Attached; 	//[Offset: 0x0, Size: 1]
	FName SocketName; 	//[Offset: 0x0, Size: 12]
	FXSystemComponent* GetSpawnedEffect(); //Addr 0x75eb9e2974 [Final|Native|BlueprintCallabl|Const] // UFieldProperty addr: 0x75ac75ed00
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object, Addr: 0x7690244200
	NiagaraSystem* Template; 	//[Offset: 0x0, Size: 8]
	FName SocketName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bDestroyAtEnd; 	//[Offset: 0x0, Size: 1]
Class: OpenColorIOBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690243d00
	bool ApplyColorSpaceTransform(constObject* WorldContextObject, constoutrefstructOpenColorIOColorConversionSettings ConversionSettings, Texture* InputTexture, TextureRenderTarget2D* OutputRenderTarget); //Addr 0x75eba0d104 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac75e800
Class: OpenColorIOColorTransform.Object, Addr: 0x7690243a80
	OpenColorIOConfiguration* ConfigurationOwner; 	//[Offset: 0x0, Size: 8]
	StrProperty SourceColorSpace; 	//[Offset: 0x0, Size: 16]
	StrProperty DestinationColorSpace; 	//[Offset: 0x0, Size: 16]
Class: OpenColorIOConfiguration.Object, Addr: 0x7690243800
	FilePath StructProperty; 	//[Offset: 0x0, Size: 16]
	structOpenColorIOColorSpace[] DesiredColorSpaces; //[Offset: 0x0, Size: 16]
	OpenColorIOColorTransform*[] ColorTransforms; //[Offset: 0x0, Size: 16]
Class: OpenColorIODisplayExtensionWrapper.Object, Addr: 0x7690243580
	Void SetSceneExtensionIsActiveFunctions(constoutrefstructSceneViewExtensionIsActiveFunctor[] IsActiveFunctions); //Addr 0x75eba0dd50 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb1d00
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690243300
	Void RemoveActorFromLayer(Actor* InActor, constoutrefstructActorLayer Layer); //Addr 0x75eba0fbf8 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb1a00
Class: LocationServices.BlueprintFunctionLibrary.Object, Addr: 0x7690242b80
	bool StopLocationServices(); //Addr 0x75eba12978 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb1300
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690242680
	bool CheckPermissionAgain(FString permission); //Addr 0x75eba14d80 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb0f00
Class: WebBrowser.Widget.Visual.Object, Addr: 0x7690242400
	delegate OnUrlChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnBeforePopup; 	//[Offset: 0x0, Size: 16]
	StrProperty InitialURL; 	//[Offset: 0x0, Size: 16]
	bool bSupportsTransparency; 	//[Offset: 0x0, Size: 1]
	Void OnUrlChanged__DelegateSignature(constoutrefFText Text); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75abfb0800
Class: MediaOutput.Object, Addr: 0x7690241c80
	int NumberOfTextureBuffers; 	//[Offset: 0x0, Size: 4]
	bool Validate(outFString OutFailureReason); //Addr 0x75eba580f4 [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abfb0600
Class: RemoteSessionMediaOutput.MediaOutput.Object, Addr: 0x7690241f00
Class: MediaCapture.Object, Addr: 0x7690241780
	delegate OnStateChanged; 	//[Offset: 0x0, Size: 16]
	MediaOutput* MediaOutput; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* CapturingRenderTarget; 	//[Offset: 0x0, Size: 8]
	bool UpdateTextureRenderTarget2D(TextureRenderTarget2D* RenderTarget); //Addr 0x75eba56e10 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb4000
Class: RemoteSessionMediaCapture.MediaCapture.Object, Addr: 0x7690241a00
Class: RemoteSessionSettings.Object, Addr: 0x7690241500
	int HostPort; 	//[Offset: 0x0, Size: 4]
	int ConnectionTimeout; 	//[Offset: 0x0, Size: 4]
	int ConnectionTimeoutWhenDebugging; 	//[Offset: 0x0, Size: 4]
	int PingTime; 	//[Offset: 0x0, Size: 4]
	bool bAllowInShipping; 	//[Offset: 0x0, Size: 1]
	bool bAutoHostWithPIE; 	//[Offset: 0x0, Size: 1]
	bool bAutoHostWithGame; 	//[Offset: 0x0, Size: 1]
	int ImageQuality; 	//[Offset: 0x0, Size: 4]
	int FrameRate; 	//[Offset: 0x0, Size: 4]
	FString[] WhitelistedChannels; //[Offset: 0x0, Size: 16]
	FString[] BlacklistedChannels; //[Offset: 0x0, Size: 16]
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object, Addr: 0x7690241280
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFailure; 	//[Offset: 0x0, Size: 16]
	AppleImageUtilsImageConversionResult StructProperty; 	//[Offset: 0x0, Size: 32]
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum ETextureRotationDirection Rotate); //Addr 0x75eba49d8c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb3c00
Class: AppleImageInterface.Interface.Object, Addr: 0x7690241000
Class: FileMediaCapture.MediaCapture.Object, Addr: 0x7690240d80
Class: FileMediaOutput.MediaOutput.Object, Addr: 0x7690240b00
	ImageWriteOptions StructProperty; 	//[Offset: 0x0, Size: 96]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty BaseFileName; 	//[Offset: 0x0, Size: 16]
	bool bOverrideDesiredSize; 	//[Offset: 0x0, Size: 1]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bOverridePixelFormat; 	//[Offset: 0x0, Size: 1]
	enum EFileMediaOutputPixelFormat DesiredPixelFormat { //[Offset: 0x0, Size: 4]
		B8G8R8A8 = 0
		FloatRGBA = 6500000000
		EFileMediaOutputPixelFormat_MAX = 0
	};
Class: MFReferenceFinderLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690240880
	FString GetObjectReferenceReason(Object* InReferencer, Object* ReferencedObject); //Addr 0x75eba615dc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb3b00
Class: RichtapClip.Object, Addr: 0x7690240600
	int Duration; 	//[Offset: 0x0, Size: 4]
	StrProperty Filename; 	//[Offset: 0x0, Size: 16]
	StrProperty ClipData; 	//[Offset: 0x0, Size: 16]
Class: RichtapFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690240100
	Void UnInit(); //Addr 0x75eba67ebc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb3000
Class: RichtapReceiverComponent.ActorComponent.Object, Addr: 0x769024a100
Class: RichtapSourceComponent.ActorComponent.Object, Addr: 0x7690249c00
	Void Stop(); //Addr 0x75eba69a64 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb2700
Class: RichtapSourceClipComponent.RichtapSourceComponent.ActorComponent.Object, Addr: 0x7690249e80
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	int Loop; 	//[Offset: 0x0, Size: 4]
	int Interval; 	//[Offset: 0x0, Size: 4]
	int Priority; 	//[Offset: 0x0, Size: 4]
	int Amplitude; 	//[Offset: 0x0, Size: 4]
	int Frequency; 	//[Offset: 0x0, Size: 4]
	int Preview; 	//[Offset: 0x0, Size: 4]
	Void SendLoopParam(int Amp, int Inter, int Freq); //Addr 0x75eba69350 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb2400
Class: RichtapSourcePresetComponent.RichtapSourceComponent.ActorComponent.Object, Addr: 0x7690249980
	enum ERichtapPrebakeId PrebakeId { //[Offset: 0x0, Size: 1]
		RT_CLICK = 0
		RT_DOUBLE_CLICK = 100000000
		RT_SOFT_CLICK = 0
		RT_TICK = 0
		RT_THUD = 0
		RT_FAILURE = 0
		RT_SUCCESS = 0
		RT_RAMP_UP = 700000000
		RT_TOGGLE_SWITCH = 100000000
		RT_LONG_PRESS = 0
		RT_VIRTUAL_KEY = 0
		RT_KEYBOARD_TAP = 0
		RT_CLOCK_TICK = 0
		RT_CALENDAR_DATE = 0
		RT_CONTEXT_CLICK = 700000000
		RT_KEYBOARD_RELEASE = 100000000
		RT_VIRTUAL_KEY_RELEASE = 0
		RT_TEXT_HANDLE_MOVE = 0
		RT_ENTRY_BUMP = 0
		RT_DRAG_CROSSING = 0
		RT_GESTURE = 0
		RT_CONFIRM = 700000000
		RT_REJECT = 100000000
		RT_BOMB = 0
		RT_SWORD = 0
		RT_GUNSHOT = 0
		RT_SPEED_UP = 0
		RT_JUMP = 0
		RT_DRUM = 600000000
		RT_COIN_DROP = 100000000
		RT_HEARTBEAT = 0
		RT_PLUCKING = 0
		RT_DRAWING_ARROW = 0
		RT_CAMERA_SHUTTER = 0
		RT_FIREWORKS = 0
		RT_SNIPER_RIFLE = 700000000
		RT_ASSAULT_RIFLE = 100000000
		RT_CYMBAL = 0
		RT_TAMBOURINE = 0
		RT_FAST_MOVING = 0
		RT_FLY = 0
		RT_FOOTSTEP = 0
		RT_ICE = 700000000
		RT_LIGHTNING = 100000000
		RT_SPRING = 0
		RT_SWING = 0
		RT_WIND = 0
		RT_VICTORY = 0
		RT_AWARD = 0
		RT_GAMEOVER = 0
		RT_MAX = 0
	};
	int Priority; 	//[Offset: 0x0, Size: 4]
	int Amplitude; 	//[Offset: 0x0, Size: 4]
	int Preview; 	//[Offset: 0x0, Size: 4]
	Void PlayOneShot(enum ERichtapPrebakeId ID, int Amp); //Addr 0x75eba69d78 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb2200
Class: CMSceneImportActor.Actor.Object, Addr: 0x7690249700
Class: CMSplineActor.Actor.Object, Addr: 0x7690249480
	SplineComponent* SplineComponent; 	//[Offset: 0x0, Size: 8]
Class: MInstancedActor.Actor.Object, Addr: 0x7690249200
	InstancedStaticMeshComponent* InstacedMesh; 	//[Offset: 0x0, Size: 8]
	bool IsEGOFixedObject; 	//[Offset: 0x0, Size: 1]
	bool IsEGORigidBodyObject; 	//[Offset: 0x0, Size: 1]
Class: KawaiiPhysicsLimitsDataAsset.DataAsset.Object, Addr: 0x7690248f80
	structSphericalLimitData[] SphericalLimitsData; //[Offset: 0x0, Size: 16]
	structCapsuleLimitData[] CapsuleLimitsData; //[Offset: 0x0, Size: 16]
	structPlanarLimitData[] PlanarLimitsData; //[Offset: 0x0, Size: 16]
	structSphericalLimit[] SphericalLimits; //[Offset: 0x0, Size: 16]
	structCapsuleLimit[] CapsuleLimits; //[Offset: 0x0, Size: 16]
	structPlanarLimit[] PlanarLimits; //[Offset: 0x0, Size: 16]
	Void SetSphericalLimitData(constoutrefstructSphericalLimitData[] NewSphericalLimitsData); //Addr 0x75eba75454 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb6100
Class: LevelDataObject.Object, Addr: 0x7690248d00
Class: MDecalActor.Actor.Object, Addr: 0x7690248a80
	StaticMeshComponent* StaticDecalMesh; 	//[Offset: 0x0, Size: 8]
Class: MDecalComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690248800
	ProceduralMeshComponent* DecalMesh; 	//[Offset: 0x0, Size: 8]
Class: PanguAssetActor.Actor.Object, Addr: 0x7690248580
	SceneComponent* DummyRoot; 	//[Offset: 0x0, Size: 8]
Class: PanguRuntimeSplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690248300
	bool IsClosedLoop(); //Addr 0x75eba7ab2c [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abfb5a00
Class: PanguRuntimeSplineControlPoint.Object, Addr: 0x7690248080
Class: PanguRuntimeSplineSegment.Object, Addr: 0x7690247e00
Class: PerfInspectorBPLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690247b80
	FString GetBasePassInfo(bool bUseOnScreenPrintFormatting); //Addr 0x75eba7c318 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb5800
Class: PrefabActor.Actor.Object, Addr: 0x7690247900
	PrefabComponent* PrefabComponent; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	int Seed; 	//[Offset: 0x0, Size: 4]
	Void SavePrefab(); //Addr 0x75eba8bf30 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb5300
Class: PrefabComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690247400
	PrefabricatorAssetInterface* PrefabAssetInterface; 	//[Offset: 0x0, Size: 48]
Class: ReplicablePrefabActor.PrefabActor.Actor.Object, Addr: 0x7690247680
Class: PrefabDebugActor.Actor.Object, Addr: 0x7690247180
	Actor* Actor; 	//[Offset: 0x0, Size: 8]
	ActorData(ByteProperty)[] ActorData; //[Offset: 0x0, Size: 16]
Class: PrefabRandomizer.Actor.Object, Addr: 0x7690246f00
	bool bRandomizeOnBeginPlay; 	//[Offset: 0x0, Size: 1]
	int SeedOffset; 	//[Offset: 0x0, Size: 4]
	float MaxBuildTimePerFrame; 	//[Offset: 0x0, Size: 4]
	delegate OnRandomizationComplete; 	//[Offset: 0x0, Size: 16]
	bool bFastSyncBuild; 	//[Offset: 0x0, Size: 1]
	PrefabActor*[] ActorsToRandomize; //[Offset: 0x0, Size: 16]
	Void Randomize(int InSeed); //Addr 0x75eba8cc30 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb5200
Class: PrefabricatorProperty.Object, Addr: 0x7690246c80
	StrProperty PropertyName; 	//[Offset: 0x0, Size: 16]
	StrProperty ExportedValue; 	//[Offset: 0x0, Size: 16]
	structPrefabricatorPropertyAssetMapping[] AssetSoftReferenceMappings; //[Offset: 0x0, Size: 16]
	bool bIsCrossReferencedActor; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: PrefabricatorEventListener.Object, Addr: 0x7690246a00
	Void PostSpawn(PrefabActor* Prefab); //Addr 0x75eba8d5d4 [Native|Event|BlueprintEvent] // UFieldProperty addr: 0x75abfb5100
Class: PrefabricatorAssetInterface.Object, Addr: 0x7690246780
	PrefabricatorEventListener* EventListener; 	//[Offset: 0x0, Size: 8]
	bool bReplicates; 	//[Offset: 0x0, Size: 1]
Class: PrefabricatorAsset.PrefabricatorAssetInterface.Object, Addr: 0x7690246500
	structPrefabricatorActorData[] ActorData; //[Offset: 0x0, Size: 16]
	enum EComponentMobility PrefabMobility { //[Offset: 0x0, Size: 1]
		Static = 0
		Stationary = 65004400000000
		Movable = 65006c00000000
		EComponentMobility_MAX = 7600000000
	};
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	ThumbnailInfo* ThumbnailInfo; 	//[Offset: 0x0, Size: 8]
	uint32 Version; 	//[Offset: 0x0, Size: 4]
Class: PrefabricatorAssetCollection.PrefabricatorAssetInterface.Object, Addr: 0x7690246280
	structPrefabricatorAssetCollectionItem[] Prefabs; //[Offset: 0x0, Size: 16]
	uint32 Version; 	//[Offset: 0x0, Size: 4]
Class: PrefabricatorAssetUserData.AssetUserData.Object, Addr: 0x7690246000
	PrefabActor* PrefabActor; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: PrefabricatorBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690245d80
	Void UnlinkPrefab(PrefabActor* PrefabActor); //Addr 0x75eba8e49c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb4b00
Class: PrefabricatorSettings.DeveloperSettings.Object, Addr: 0x7690245b00
	enum EPrefabricatorPivotPosition PivotPosition { //[Offset: 0x0, Size: 1]
		ExtremeLeft = 0
		ExtremeRight = 63006900000000
		Center = 6e006f00000000
		EPrefabricatorPivotPosition_MAX = 0
	};
	bool bAllowDynamicUpdate; 	//[Offset: 0x0, Size: 1]
	classObject IgnoreBoundingBoxForObjects; //[Offset: 0x0, Size: 80]
	float DefaultThumbnailPitch; 	//[Offset: 0x0, Size: 4]
	float DefaultThumbnailYaw; 	//[Offset: 0x0, Size: 4]
	float DefaultThumbnailZoom; 	//[Offset: 0x0, Size: 4]
Class: PrefabSeedLinkerComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690245880
Class: PrefabSeedLinker.Actor.Object, Addr: 0x7690245600
	PrefabActor*[] LinkedActors; //[Offset: 0x0, Size: 16]
	PrefabSeedLinkerComponent* SeedLinkerComponent; 	//[Offset: 0x0, Size: 8]
Class: ConstructionSystemTool.Object, Addr: 0x769024f600
Class: ConstructionSystemBuildTool.ConstructionSystemTool.Object, Addr: 0x7690245380
	float TraceDistance; 	//[Offset: 0x0, Size: 4]
	float CursorRotationStepAngle; 	//[Offset: 0x0, Size: 4]
	ConstructionSystemCursor* Cursor; 	//[Offset: 0x0, Size: 8]
	PrefabricatorAssetInterface* ActivePrefabAsset; 	//[Offset: 0x0, Size: 8]
	Void SetActivePrefab(PrefabricatorAssetInterface* InActivePrefabAsset); //Addr 0x75ebaa0b00 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb4600
Class: ConstructionSystemComponent.ActorComponent.Object, Addr: 0x769024f380
	MaterialInterface* CursorMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* CursorInvalidMaterial; 	//[Offset: 0x0, Size: 8]
	float TraceStartDistance; 	//[Offset: 0x0, Size: 4]
	float TraceSweepRadius; 	//[Offset: 0x0, Size: 4]
	Actor* ConstructionCameraActor; 	//[Offset: 0x0, Size: 8]
	float ConstructionCameraTransitionTime; 	//[Offset: 0x0, Size: 4]
	float ConstructionCameraTransitionExp; 	//[Offset: 0x0, Size: 4]
	UserWidget* BuildMenuUI; 	//[Offset: 0x0, Size: 8]
	ConstructionSystemUIAsset* BuildMenuData; 	//[Offset: 0x0, Size: 8]
	UserWidget* BuildMenuUIInstance; 	//[Offset: 0x0, Size: 8]
	enum EConstructionSystemToolType ActiveToolType { //[Offset: 0x0, Size: 1]
		BuildTool = 0
		RemoveTool = 63006900000000
		EConstructionSystemToolType_MAX = 800000000
	};
	<enum EConstructionSystemToolType, ConstructionSystemTool*> Tools; //[Offset: 0x0, Size: 80]
	Void ToggleConstructionSystem(); //Addr 0x75ebaa1614 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb7f00
Class: ConstructionSystemItemUserData.AssetUserData.Object, Addr: 0x769024f100
	int Seed; 	//[Offset: 0x0, Size: 4]
Class: ConstructionSystemCursor.Object, Addr: 0x769024ee80
	PrefabActor* CursorGhostActor; 	//[Offset: 0x0, Size: 8]
	int CursorSeed; 	//[Offset: 0x0, Size: 4]
	MaterialInterface* CursorMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* CursorInvalidMaterial; 	//[Offset: 0x0, Size: 8]
	PrefabricatorConstructionSnapComponent*[] SnapComponents; //[Offset: 0x0, Size: 16]
	int ActiveSnapComponentIndex; 	//[Offset: 0x0, Size: 4]
Class: ConstructionSystemRemoveTool.ConstructionSystemTool.Object, Addr: 0x769024ec00
	float TraceDistance; 	//[Offset: 0x0, Size: 4]
	PrefabActor* FocusedActor; 	//[Offset: 0x0, Size: 8]
	Void HandleInput_RemoveAtCursor(); //Addr 0x75ebaa2320 [Final|Native] // UFieldProperty addr: 0x75abfb7e00
Class: ConstructionSystemSaveGame.SaveGame.Object, Addr: 0x769024e980
	StrProperty SaveSlotName; 	//[Offset: 0x0, Size: 16]
	uint32 UserIndex; 	//[Offset: 0x0, Size: 4]
	ConstructionSystemSavePlayerInfo StructProperty; 	//[Offset: 0x0, Size: 80]
	structConstructionSystemSaveConstructedItem[] ConstructedItems; //[Offset: 0x0, Size: 16]
Class: ConstructionSystemSaveSystem.BlueprintFunctionLibrary.Object, Addr: 0x769024e480
	Void SaveConstructionSystemLevel(constObject* WorldContextObject, FString SaveSlotName, int UserIndex, bool bSavePlayerState); //Addr 0x75ebaa2d40 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfb7b00
Class: PrefabricatorConstructionSnapComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024e200
	enum EPrefabricatorConstructionSnapType SnapType { //[Offset: 0x0, Size: 1]
		Floor = 0
		Wall = 6e006f00000000
		Object = 6d006900000000
		EPrefabricatorConstructionSnapType_MAX = 7600000000
	};
	PCSnapConstraintFloor StructProperty; 	//[Offset: 0x0, Size: 6]
	PCSnapConstraintWall StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bAlignToGroundSlope; 	//[Offset: 0x0, Size: 1]
	bool bUseMaxGroundSlopeConstraint; 	//[Offset: 0x0, Size: 1]
	float MaxGroundPlacementSlope; 	//[Offset: 0x0, Size: 4]
Class: PrefabricatorConstructionSnap.Actor.Object, Addr: 0x769024da80
	PrefabricatorConstructionSnapComponent* ConstructionSnapComponent; 	//[Offset: 0x0, Size: 8]
Class: ConstructionSystemBuildUI.Interface.Object, Addr: 0x769024d800
	Void SetUIAsset(ConstructionSystemUIAsset* UIAsset); //Addr 0x75ec080c04 [Event|BlueprintCallabl|BlueprintEvent] // UFieldProperty addr: 0x75abfb7600
Class: ConstructionSystemUIAsset.DataAsset.Object, Addr: 0x769024d580
	FText MenuTitle; 	//[Offset: 0x0, Size: 24]
	structConstructionSystemUICategory[] Categories; //[Offset: 0x0, Size: 16]
Class: RaceActor.Actor.Object, Addr: 0x769024d300
	RaceSplinesComponent* SplineComponent; 	//[Offset: 0x0, Size: 8]
Class: RaceSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024c900
	RaceSplineControlPoint*[] ControlPoints; //[Offset: 0x0, Size: 16]
	RaceSplineSegment*[] Segments; //[Offset: 0x0, Size: 16]
Class: RaceControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024d080
	float VirtualTextureMainPassMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
Class: RaceSplineControlPoint.Object, Addr: 0x769024cb80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float Width; 	//[Offset: 0x0, Size: 4]
	float SideFalloff; 	//[Offset: 0x0, Size: 4]
	float LeftSideFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float RightSideFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float EndFalloff; 	//[Offset: 0x0, Size: 4]
	structRaceSplineConnection[] ConnectedSegments; //[Offset: 0x0, Size: 16]
	structRaceSplineInterpPoint[] Points; //[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	RaceControlPointMeshComponent* LocalMeshComponent; 	//[Offset: 0x0, Size: 8]
Class: RaceSplineSegment.Object, Addr: 0x769024c680
	RaceSplineSegmentConnection StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	structRaceSplineInterpPoint[] Points; //[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents; //[Offset: 0x0, Size: 16]
	SplineMeshComponent*[] LocalLaneComponents; //[Offset: 0x0, Size: 16]
Class: ScreenEffectVolume.Volume.Brush.Actor.Object, Addr: 0x769024c400
	bool bUnbound; 	//[Offset: 0x0, Size: 1]
	bool bEnabled; 	//[Offset: 0x0, Size: 1]
	float Priority; 	//[Offset: 0x0, Size: 4]
	ScreenEffectSettings StructProperty; 	//[Offset: 0x0, Size: 44]
Class: ScreenNiagaraActor.Actor.Object, Addr: 0x769024c180
	NiagaraComponent* NiagaraComponent; 	//[Offset: 0x0, Size: 8]
Class: ScreenNiagaraCaptureActor.Actor.Object, Addr: 0x769024bf00
	NiagaraSystem* NiagaraSystemReference; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* TextureTarget; 	//[Offset: 0x0, Size: 8]
	bool bAutoActive; 	//[Offset: 0x0, Size: 1]
	ScreenNiagaraActor* NiagaraActor; 	//[Offset: 0x0, Size: 8]
	SceneCaptureComponent2D* NiagaraCaptureComponent; 	//[Offset: 0x0, Size: 8]
	ScreenEffectVolume*[] ScreenEffectVolumes; //[Offset: 0x0, Size: 16]
	Void UpdateParticleParams(); //Addr 0x75ebaad1fc [Final|Native] // UFieldProperty addr: 0x75abfba400
Class: ScreenParticleSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x769024bc80
Class: LightPropagationVolumeBlendable.Object, Addr: 0x769024ba00
	LightPropagationVolumeSettings StructProperty; 	//[Offset: 0x0, Size: 64]
	float BlendWeight; 	//[Offset: 0x0, Size: 4]
Class: AnimSharingStateInstance.AnimInstance.Object, Addr: 0x769024b780
	AnimSequence* AnimationToPlay; 	//[Offset: 0x0, Size: 8]
	float PermutationTimeOffset; 	//[Offset: 0x0, Size: 4]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	bool bStateBool; 	//[Offset: 0x0, Size: 1]
	AnimSharingInstance* Instance; 	//[Offset: 0x0, Size: 8]
	Void GetInstancedActors(outActor*[] Actors); //Addr 0x75ebabb290 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfba300
Class: AnimSharingTransitionInstance.AnimInstance.Object, Addr: 0x769024b500
	SkeletalMeshComponent* FromComponent; 	//[Offset: 0x0, Size: 8]
	SkeletalMeshComponent* ToComponent; 	//[Offset: 0x0, Size: 8]
	float BlendTime; 	//[Offset: 0x0, Size: 4]
	bool bBlendBool; 	//[Offset: 0x0, Size: 1]
Class: AnimSharingAdditiveInstance.AnimInstance.Object, Addr: 0x769024b280
	SkeletalMeshComponent* BaseComponent; 	//[Offset: 0x0, Size: 8]
	AnimSequence* AdditiveAnimation; 	//[Offset: 0x0, Size: 8]
	float Alpha; 	//[Offset: 0x0, Size: 4]
	bool bStateBool; 	//[Offset: 0x0, Size: 1]
Class: AnimSharingInstance.Object, Addr: 0x769024b000
	Actor*[] RegisteredActors; //[Offset: 0x0, Size: 16]
	AnimationSharingStateProcessor* StateProcessor; 	//[Offset: 0x0, Size: 8]
	AnimSequence*[] UsedAnimationSequences; //[Offset: 0x0, Size: 16]
	Enum* StateEnum; 	//[Offset: 0x0, Size: 8]
	Actor* SharingActor; 	//[Offset: 0x0, Size: 8]
Class: AnimationSharingManager.Object, Addr: 0x769024ad80
	Skeleton*[] Skeletons; //[Offset: 0x0, Size: 16]
	AnimSharingInstance*[] PerSkeletonData; //[Offset: 0x0, Size: 16]
	Void RegisterActorWithSkeletonBP(Actor* InActor, constSkeleton* SharingSkeleton); //Addr 0x75ebabc120 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfb9f00
Class: AnimationSharingSetup.Object, Addr: 0x769024ab00
	structPerSkeletonAnimationSharingSetup[] SkeletonSetups; //[Offset: 0x0, Size: 16]
	AnimationSharingScalability StructProperty; 	//[Offset: 0x0, Size: 16]
Class: AnimationSharingStateProcessor.Object, Addr: 0x769024a880
	Enum* AnimationStateEnum; 	//[Offset: 0x0, Size: 48]
	Void ProcessActorState(outint OutState, Actor* InActor, CurrentState(ByteProperty) CurrentState, OnDemandState(ByteProperty) OnDemandState, outbool bShouldProcess); //Addr 0x75ebabcec4 [Native|Event|BlueprintEvent] // UFieldProperty addr: 0x75abfb9d00
Class: SignificanceManager.Object, Addr: 0x769024a600
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
Class: MyPluginObject.Object, Addr: 0x769024fd80
	MyPluginStruct StructProperty; 	//[Offset: 0x0, Size: 16]
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object, Addr: 0x769024fb00
	FName CurveSourceBindingName; 	//[Offset: 0x0, Size: 12]
	float CurveSyncOffset; 	//[Offset: 0x0, Size: 4]
Class: GeometryCache.Object, Addr: 0x7690255100
	MaterialInterface*[] Materials; //[Offset: 0x0, Size: 16]
	GeometryCacheTrack*[] Tracks; //[Offset: 0x0, Size: 16]
	int StartFrame; 	//[Offset: 0x0, Size: 4]
	int EndFrame; 	//[Offset: 0x0, Size: 4]
Class: GeometryCacheActor.Actor.Object, Addr: 0x7690254e80
	GeometryCacheComponent* GeometryCacheComponent; 	//[Offset: 0x0, Size: 8]
	GeometryCacheComponent* GetGeometryCacheComponent(); //Addr 0x75ebadc484 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abfbbc00
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690254480
	GeometryCache* GeometryCache; 	//[Offset: 0x0, Size: 8]
	bool bRunning; 	//[Offset: 0x0, Size: 1]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	float StartTimeOffset; 	//[Offset: 0x0, Size: 4]
	float PlaybackSpeed; 	//[Offset: 0x0, Size: 4]
	int NumTracks; 	//[Offset: 0x0, Size: 4]
	float ElapsedTime; 	//[Offset: 0x0, Size: 4]
	float Duration; 	//[Offset: 0x0, Size: 4]
	bool bManualTick; 	//[Offset: 0x0, Size: 1]
	Void TickAtThisTime(constfloat Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping); //Addr 0x75ebadcca4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfba800
Class: GeometryCacheCodecBase.Object, Addr: 0x7690254c00
	int[] TopologyRanges; //[Offset: 0x0, Size: 16]
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object, Addr: 0x7690254980
	int DummyProperty; 	//[Offset: 0x0, Size: 4]
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object, Addr: 0x7690254700
Class: GeometryCacheTrack.Object, Addr: 0x7690254200
	float Duration; 	//[Offset: 0x0, Size: 4]
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object, Addr: 0x7690253f80
	uint32 NumMeshSamples; 	//[Offset: 0x0, Size: 4]
	Void AddMeshSample(constoutrefstructGeometryCacheMeshData MeshData, constfloat SampleTime); //Addr 0x75ebade060 [Final|Native] // UFieldProperty addr: 0x75abfba700
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object, Addr: 0x7690253d00
	GeometryCacheCodecBase* Codec; 	//[Offset: 0x0, Size: 8]
	float StartSampleTime; 	//[Offset: 0x0, Size: 4]
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object, Addr: 0x7690253a80
	Void SetMesh(constoutrefstructGeometryCacheMeshData NewMeshData); //Addr 0x75ebade584 [Final|Native] // UFieldProperty addr: 0x75abfba600
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object, Addr: 0x7690253800
	Void SetMesh(constoutrefstructGeometryCacheMeshData NewMeshData); //Addr 0x75ebade878 [Final|Native] // UFieldProperty addr: 0x75abfbe700
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690253580
	MovieSceneGeometryCacheParams StructProperty; 	//[Offset: 0x0, Size: 72]
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690253300
	MovieSceneSection*[] AnimationSections; //[Offset: 0x0, Size: 16]
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690253080
	Void TakeGameplayAutomationScreenshot(constFString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride); //Addr 0x75ebae87cc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abfbe600
Class: ClothConfigBase.Object, Addr: 0x7690252900
Class: ClothConfigCommon.ClothConfigBase.Object, Addr: 0x7690252b80
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object, Addr: 0x7690252e00
	enum EClothMassMode MassMode { //[Offset: 0x0, Size: 1]
		UniformMass = 0
		TotalMass = 74007300000000
		Density = 62006900000000
		MaxClothMassMode = 7900000000
		EClothMassMode_MAX = 0
	};
	float UniformMass; 	//[Offset: 0x0, Size: 4]
	float TotalMass; 	//[Offset: 0x0, Size: 4]
	float Density; 	//[Offset: 0x0, Size: 4]
	float MinPerParticleMass; 	//[Offset: 0x0, Size: 4]
	float EdgeStiffness; 	//[Offset: 0x0, Size: 4]
	float BendingStiffness; 	//[Offset: 0x0, Size: 4]
	bool bUseBendingElements; 	//[Offset: 0x0, Size: 1]
	float AreaStiffness; 	//[Offset: 0x0, Size: 4]
	float VolumeStiffness; 	//[Offset: 0x0, Size: 4]
	float StrainLimitingStiffness; 	//[Offset: 0x0, Size: 4]
	float LimitScale; 	//[Offset: 0x0, Size: 4]
	enum EChaosClothTetherMode TetherMode { //[Offset: 0x0, Size: 1]
		FastTetherFastLength = 0
		AccurateTetherFastLength = 45002f00000000
		AccurateTetherAccurateLength = 65005400000000
		MaxChaosClothTetherMode = 6500000000
		EChaosClothTetherMode_MAX = 0
	};
	bool bUseGeodesicDistance; 	//[Offset: 0x0, Size: 1]
	float ShapeTargetStiffness; 	//[Offset: 0x0, Size: 4]
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	float FrictionCoefficient; 	//[Offset: 0x0, Size: 4]
	bool bUseSelfCollisions; 	//[Offset: 0x0, Size: 1]
	float SelfCollisionThickness; 	//[Offset: 0x0, Size: 4]
	bool bUseLegacyBackstop; 	//[Offset: 0x0, Size: 1]
	float DampingCoefficient; 	//[Offset: 0x0, Size: 4]
	bool bUsePointBasedWindModel; 	//[Offset: 0x0, Size: 1]
	float DragCoefficient; 	//[Offset: 0x0, Size: 4]
	float LiftCoefficient; 	//[Offset: 0x0, Size: 4]
	bool bUseGravityOverride; 	//[Offset: 0x0, Size: 1]
	float GravityScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float AnimDriveSpringStiffness; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float AngularVelocityScale; 	//[Offset: 0x0, Size: 4]
	bool bUseTetrahedralConstraints; 	//[Offset: 0x0, Size: 1]
	bool bUseThinShellVolumeConstraints; 	//[Offset: 0x0, Size: 1]
	bool bUseContinuousCollisionDetection; 	//[Offset: 0x0, Size: 1]
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object, Addr: 0x7690252400
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object, Addr: 0x7690252680
	int IterationCount; 	//[Offset: 0x0, Size: 4]
	int SubdivisionCount; 	//[Offset: 0x0, Size: 4]
	float SelfCollisionThickness; 	//[Offset: 0x0, Size: 4]
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	bool bUseDampingOverride; 	//[Offset: 0x0, Size: 1]
	float Damping; 	//[Offset: 0x0, Size: 4]
	bool bUseGravityOverride; 	//[Offset: 0x0, Size: 1]
	float GravityScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUseLocalSpaceSimulation; 	//[Offset: 0x0, Size: 1]
	bool bUseXPBDConstraints; 	//[Offset: 0x0, Size: 1]
Class: ClothingSimulationFactory.Object, Addr: 0x7690251f00
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object, Addr: 0x7690252180
Class: ClothingSimulationInteractor.Object, Addr: 0x7690251a00
	Void SetAnimDriveSpringStiffness(float InStiffness); //Addr 0x75ed5cf570 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfbdb00
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object, Addr: 0x7690251c80
Class: MotoSynthPreset.Object, Addr: 0x7690251780
	MotoSynthRuntimeSettings StructProperty; 	//[Offset: 0x0, Size: 104]
Class: MotoSynthSource.Object, Addr: 0x7690251500
	bool bConvertTo8Bit; 	//[Offset: 0x0, Size: 1]
	float DownSampleFactor; 	//[Offset: 0x0, Size: 4]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	float[] SourceData; //[Offset: 0x0, Size: 16]
	int16[] SourceDataPCM; //[Offset: 0x0, Size: 16]
	int SourceSampleRate; 	//[Offset: 0x0, Size: 4]
	structGrainTableEntry[] GrainTable; //[Offset: 0x0, Size: 16]
Class: SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690251000
	bool bAutoDestroy; 	//[Offset: 0x0, Size: 1]
	bool bStopWhenOwnerDestroyed; 	//[Offset: 0x0, Size: 1]
	bool bAllowSpatialization; 	//[Offset: 0x0, Size: 1]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
	bool bOutputToBusOnly; 	//[Offset: 0x0, Size: 1]
	SoundAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	SoundAttenuationSettings StructProperty; 	//[Offset: 0x0, Size: 928]
	SoundConcurrency* ConcurrencySettings; 	//[Offset: 0x0, Size: 8]
	SoundConcurrency* ConcurrencySet; //[Offset: 0x0, Size: 80]
	SoundClass* SoundClass; 	//[Offset: 0x0, Size: 8]
	SoundEffectSourcePresetChain* SourceEffectChain; 	//[Offset: 0x0, Size: 8]
	SoundSubmixBase* SoundSubmix; 	//[Offset: 0x0, Size: 8]
	structSoundSubmixSendInfo[] SoundSubmixSends; //[Offset: 0x0, Size: 16]
	structSoundSourceBusSendInfo[] BusSends; //[Offset: 0x0, Size: 16]
	structSoundSourceBusSendInfo[] PreEffectBusSends; //[Offset: 0x0, Size: 16]
	bool bIsUISound; 	//[Offset: 0x0, Size: 1]
	bool bIsPreviewSound; 	//[Offset: 0x0, Size: 1]
	int EnvelopeFollowerAttackTime; 	//[Offset: 0x0, Size: 4]
	int EnvelopeFollowerReleaseTime; 	//[Offset: 0x0, Size: 4]
	delegate OnAudioEnvelopeValue; 	//[Offset: 0x0, Size: 16]
	SynthSound* Synth; 	//[Offset: 0x0, Size: 8]
	AudioComponent* AudioComponent; 	//[Offset: 0x0, Size: 8]
	Void Stop(); //Addr 0x75ed0c9e00 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfbd400
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690251280
	MotoSynthPreset* MotoSynthPreset; 	//[Offset: 0x0, Size: 8]
	float RPM; 	//[Offset: 0x0, Size: 4]
	Void SetSettings(constoutrefstructMotoSynthRuntimeSettings InSettings); //Addr 0x75ebb1ef54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfbd000
Class: AndroidMediaSettings.Object, Addr: 0x7690250d80
	bool CacheableVideoSampleBuffers; 	//[Offset: 0x0, Size: 1]
Class: MediaSource.Object, Addr: 0x7690250600
	bool Validate(); //Addr 0x75ed0ffed8 [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abfbca00
Class: BaseMediaSource.MediaSource.Object, Addr: 0x7690250880
	FName PlayerName; 	//[Offset: 0x0, Size: 12]
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object, Addr: 0x7690250b00
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	StrProperty ProxyOverride; 	//[Offset: 0x0, Size: 16]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSequencePath(FString Path); //Addr 0x75ebb465b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abfbc700
Class: ImgMediaSettings.Object, Addr: 0x7690250380
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	float CacheBehindPercentage; 	//[Offset: 0x0, Size: 4]
	float CacheSizeGB; 	//[Offset: 0x0, Size: 4]
	int CacheThreads; 	//[Offset: 0x0, Size: 4]
	int CacheThreadStackSizeKB; 	//[Offset: 0x0, Size: 4]
	float GlobalCacheSizeGB; 	//[Offset: 0x0, Size: 4]
	bool UseGlobalCache; 	//[Offset: 0x0, Size: 1]
	uint32 ExrDecoderThreads; 	//[Offset: 0x0, Size: 4]
	StrProperty DefaultProxy; 	//[Offset: 0x0, Size: 16]
	bool UseDefaultProxy; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690250100
	MediaSource* MediaSource; 	//[Offset: 0x0, Size: 8]
	bool bLoop; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769025a380
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769025a100
	MediaSource* MediaSource; 	//[Offset: 0x0, Size: 8]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	MediaTexture* MediaTexture; 	//[Offset: 0x0, Size: 8]
	MediaSoundComponent* MediaSoundComponent; 	//[Offset: 0x0, Size: 8]
	bool bUseExternalMediaPlayer; 	//[Offset: 0x0, Size: 1]
	MediaPlayer* ExternalMediaPlayer; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690259e80
	MovieSceneSection*[] MediaSections; //[Offset: 0x0, Size: 16]
Class: TcpMessagingSettings.Object, Addr: 0x7690259c00
	bool EnableTransport; 	//[Offset: 0x0, Size: 1]
	StrProperty ListenEndpoint; 	//[Offset: 0x0, Size: 16]
	FString[] ConnectToEndpoints; //[Offset: 0x0, Size: 16]
	int ConnectionRetryDelay; 	//[Offset: 0x0, Size: 4]
	bool bStopServiceWhenAppDeactivates; 	//[Offset: 0x0, Size: 1]
Class: UdpMessagingSettings.Object, Addr: 0x7690259980
	bool EnabledByDefault; 	//[Offset: 0x0, Size: 1]
	bool EnableTransport; 	//[Offset: 0x0, Size: 1]
	bool bAutoRepair; 	//[Offset: 0x0, Size: 1]
	bool bStopServiceWhenAppDeactivates; 	//[Offset: 0x0, Size: 1]
	StrProperty UnicastEndpoint; 	//[Offset: 0x0, Size: 16]
	StrProperty MulticastEndpoint; 	//[Offset: 0x0, Size: 16]
	enum EUdpMessageFormat MessageFormat { //[Offset: 0x0, Size: 1]
		None = 0
		Json = 6e006f00000000
		TaggedProperty = 6d006900000000
		CborPlatformEndianness = 74006300000000
		CborStandardEndianness = 6f006f00000000
		EUdpMessageFormat_MAX = 0
	};
	byte MulticastTimeToLive; //[Offset: 0x0, Size: 1]
	FString[] StaticEndpoints; //[Offset: 0x0, Size: 16]
	bool EnableTunnel; 	//[Offset: 0x0, Size: 1]
	StrProperty TunnelUnicastEndpoint; 	//[Offset: 0x0, Size: 16]
	StrProperty TunnelMulticastEndpoint; 	//[Offset: 0x0, Size: 16]
	FString[] RemoteTunnelEndpoints; //[Offset: 0x0, Size: 16]
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x7690259700
	MovieScene* MovieScene; 	//[Offset: 0x0, Size: 8]
	ActorSequenceObjectReferenceMap StructProperty; 	//[Offset: 0x0, Size: 32]
Class: MovieScene.MovieSceneSignedObject.Object, Addr: 0x769028bc80
	structMovieSceneSpawnable[] Spawnables; //[Offset: 0x0, Size: 16]
	structMovieScenePossessable[] Possessables; //[Offset: 0x0, Size: 16]
	structMovieSceneBinding[] ObjectBindings; //[Offset: 0x0, Size: 16]
	<FName, structMovieSceneObjectBindingIDs> BindingGroups; //[Offset: 0x0, Size: 80]
	MovieSceneTrack*[] MasterTracks; //[Offset: 0x0, Size: 16]
	MovieSceneTrack* CameraCutTrack; 	//[Offset: 0x0, Size: 8]
	MovieSceneFrameRange StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneFrameRange StructProperty; 	//[Offset: 0x0, Size: 16]
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	enum EMovieSceneEvaluationType EvaluationType { //[Offset: 0x0, Size: 1]
		FrameLocked = 0
		WithSubFrames = 3a000000000000
		EMovieSceneEvaluationType_MAX = 0
	};
	enum EUpdateClockSource ClockSource { //[Offset: 0x0, Size: 1]
		Tick = 0
		Platform = 0
		Audio = 0
		RelativeTimecode = 0
		Timecode = 0
		Custom = 0
		EUpdateClockSource_MAX = 0
	};
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	structMovieSceneMarkedFrame[] MarkedFrames; //[Offset: 0x0, Size: 16]
Class: ActorSequenceComponent.ActorComponent.Object, Addr: 0x7690259480
	MovieSceneSequencePlaybackSettings StructProperty; 	//[Offset: 0x0, Size: 20]
	ActorSequence* Sequence; 	//[Offset: 0x0, Size: 8]
	ActorSequencePlayer* SequencePlayer; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneSequencePlayer.Object, Addr: 0x7690258f80
	delegate OnPlay; 	//[Offset: 0x0, Size: 16]
	delegate OnPlayReverse; 	//[Offset: 0x0, Size: 16]
	delegate OnStop; 	//[Offset: 0x0, Size: 16]
	delegate OnPause; 	//[Offset: 0x0, Size: 16]
	delegate OnFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnEvent; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateDialogue; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateStoryBGM; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateStoryVoice; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateStoryOption; 	//[Offset: 0x0, Size: 16]
	enum EMovieScenePlayerStatus Status { //[Offset: 0x0, Size: 1]
		Stopped = 0
		Playing = 46007900000000
		Recording = 44006e00000000
		Scrubbing = 65006d00000000
		Jumping = 67006e00000000
		Stepping = 0
		Paused = 0
		MAX = 0
	};
	bool bReversePlayback; 	//[Offset: 0x0, Size: 1]
	MovieSceneSequence* Sequence; 	//[Offset: 0x0, Size: 8]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	int DurationFrames; 	//[Offset: 0x0, Size: 4]
	float DurationSubFrames; 	//[Offset: 0x0, Size: 4]
	int CurrentNumLoops; 	//[Offset: 0x0, Size: 4]
	MovieSceneSequencePlaybackSettings StructProperty; 	//[Offset: 0x0, Size: 20]
	MovieSceneRootEvaluationTemplateInstance StructProperty; 	//[Offset: 0x0, Size: 232]
	MovieSceneSequenceReplProperties StructProperty; 	//[Offset: 0x0, Size: 16]
	interface class MovieScenePlaybackClient* PlaybackClient; 	//[Offset: 0x0, Size: 16]
	MovieSceneSequenceTickManager* TickManager; 	//[Offset: 0x0, Size: 8]
	Void StopAtCurrentTime(); //Addr 0x75ed1d373c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff1100
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object, Addr: 0x7690259200
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x7690258a80
	MovieScene* MovieScene; 	//[Offset: 0x0, Size: 8]
	Actor* BoundActorClass; 	//[Offset: 0x0, Size: 48]
	Actor* BoundPreviewActor; 	//[Offset: 0x0, Size: 48]
	<structGuid, FName> BoundActorComponents; //[Offset: 0x0, Size: 80]
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x7690258d00
Class: SequenceCameraShakeCameraStandIn.Object, Addr: 0x7690258800
	float FieldOfView; 	//[Offset: 0x0, Size: 4]
Class: SequenceCameraShake.CameraShakeBase.Object, Addr: 0x7690258580
	CameraAnimationSequence* Sequence; 	//[Offset: 0x0, Size: 8]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	float Scale; 	//[Offset: 0x0, Size: 4]
	float BlendInTime; 	//[Offset: 0x0, Size: 4]
	float BlendOutTime; 	//[Offset: 0x0, Size: 4]
	float RandomSegmentDuration; 	//[Offset: 0x0, Size: 4]
	bool bRandomSegment; 	//[Offset: 0x0, Size: 1]
	SequenceCameraShakeSequencePlayer* Player; 	//[Offset: 0x0, Size: 8]
	SequenceCameraShakeCameraStandIn* CameraStandIn; 	//[Offset: 0x0, Size: 8]
Class: SequenceCameraShakeSequencePlayer.Object, Addr: 0x7690258080
	Object* BoundObjectOverride; 	//[Offset: 0x0, Size: 8]
	MovieSceneSequence* Sequence; 	//[Offset: 0x0, Size: 8]
	MovieSceneRootEvaluationTemplateInstance StructProperty; 	//[Offset: 0x0, Size: 232]
Class: TemplateSequenceActor.Actor.Object, Addr: 0x7690257e00
	MovieSceneSequencePlaybackSettings StructProperty; 	//[Offset: 0x0, Size: 20]
	TemplateSequencePlayer* SequencePlayer; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	TemplateSequenceBindingOverrideData StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetSequence(TemplateSequence* InSequence); //Addr 0x75ebb7903c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff0c00
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object, Addr: 0x7690257b80
	TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, structMovieSceneSequencePlaybackSettings Settings, outTemplateSequenceActor* OutActor); //Addr 0x75ebb79740 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abff0b00
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690257680
	MovieSceneSectionParameters StructProperty; 	//[Offset: 0x0, Size: 36]
	float StartOffset; 	//[Offset: 0x0, Size: 4]
	float TimeScale; 	//[Offset: 0x0, Size: 4]
	float PrerollTime; 	//[Offset: 0x0, Size: 4]
	MovieSceneSequence* SubSequence; 	//[Offset: 0x0, Size: 8]
	Actor* ActorToRecord; 	//[Offset: 0x0, Size: 28]
	StrProperty TargetSequenceName; 	//[Offset: 0x0, Size: 16]
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSequence(MovieSceneSequence* Sequence); //Addr 0x75ed1daf10 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff0900
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690257900
Class: MovieSceneEntitySystem.Object, Addr: 0x7690257180
	MovieSceneEntitySystemLinker* Linker; 	//[Offset: 0x0, Size: 8]
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object, Addr: 0x7690257400
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690256c80
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
	MovieSceneSection*[] GetSortedSections(); //Addr 0x75ed1db31c [Final|Native|Const] // UFieldProperty addr: 0x75abff0800
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690256f00
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object, Addr: 0x7690256780
	FName[] GetCollectionsContainingAssetPtr(constObject* AssetPtr); //Addr 0x75ebb86434 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff0200
Class: AudioGenerator.Object, Addr: 0x7690255d80
Class: AudioCapture.AudioGenerator.Object, Addr: 0x7690256000
	Void StopCapturingAudio(); //Addr 0x75ebb88450 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff4000
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690255b00
	AudioCapture* CreateAudioCapture(); //Addr 0x75ebb889d0 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abff3f00
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690255880
	int JitterLatencyFrames; 	//[Offset: 0x0, Size: 4]
Class: CableActor.Actor.Object, Addr: 0x7690255600
	CableComponent* CableComponent; 	//[Offset: 0x0, Size: 8]
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690255380
	bool bAttachStart; 	//[Offset: 0x0, Size: 1]
	bool bAttachEnd; 	//[Offset: 0x0, Size: 1]
	ComponentReference StructProperty; 	//[Offset: 0x0, Size: 48]
	FName AttachEndToSocketName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float CableLength; 	//[Offset: 0x0, Size: 4]
	int NumSegments; 	//[Offset: 0x0, Size: 4]
	float SubstepTime; 	//[Offset: 0x0, Size: 4]
	int SolverIterations; 	//[Offset: 0x0, Size: 4]
	bool bEnableStiffness; 	//[Offset: 0x0, Size: 1]
	bool bUseSubstepping; 	//[Offset: 0x0, Size: 1]
	bool bSkipCableUpdateWhenNotVisible; 	//[Offset: 0x0, Size: 1]
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered; 	//[Offset: 0x0, Size: 1]
	bool bEnableCollision; 	//[Offset: 0x0, Size: 1]
	float CollisionFriction; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float CableGravityScale; 	//[Offset: 0x0, Size: 4]
	float CableWidth; 	//[Offset: 0x0, Size: 4]
	int NumSides; 	//[Offset: 0x0, Size: 4]
	float TileMaterial; 	//[Offset: 0x0, Size: 4]
	Void SetAttachEndToComponent(SceneComponent* Component, FName SocketName); //Addr 0x75ebb8da1c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff3a00
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769025f600
	bool SetCustomMeshTriangles(constoutrefstructCustomMeshTriangle[] Triangles); //Addr 0x75ebb9a448 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff3700
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769025f380
	enum EGooglePADErrorCode ShowCellularDataConfirmation(); //Addr 0x75ebb9e174 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abff2800
Class: MobileInstalledContent.Object, Addr: 0x769025f100
	bool Mount(int PakOrder, FString MountPoint); //Addr 0x75ebba3ea4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff6300
Class: MobilePendingContent.MobileInstalledContent.Object, Addr: 0x769025ee80
	Void StartInstall(delegate OnSucceeded, delegate OnFailed); //Addr 0x75ebba4468 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff5c00
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769025ec00
	Void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed); //Addr 0x75ebba4e50 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abff5700
Class: SoundfieldEncodingSettingsBase.Object, Addr: 0x769025e700
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object, Addr: 0x769025e980
	int AmbisonicsOrder; 	//[Offset: 0x0, Size: 4]
Class: ModularSynthPresetBank.Object, Addr: 0x769025e480
	structModularSynthPresetBankEntry[] Presets; //[Offset: 0x0, Size: 16]
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769025e200
	Void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, constoutrefstructModularSynthPreset Preset, FString PresetName); //Addr 0x75ebbebeb4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abff5600
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x769025df80
	int VoiceCount; 	//[Offset: 0x0, Size: 4]
	Void SetSynthPreset(constoutrefstructModularSynthPreset SynthPreset); //Addr 0x75ebbec610 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff9d00
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025dd00
	SourceEffectBitCrusherSettings StructProperty; 	//[Offset: 0x0, Size: 48]
	Void SetSettings(constoutrefstructSourceEffectBitCrusherBaseSettings Settings); //Addr 0x75ebbf26d4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff9700
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025d580
	SourceEffectChorusSettings StructProperty; 	//[Offset: 0x0, Size: 120]
	Void SetWetModulator(constSoundModulatorBase* Modulator); //Addr 0x75ebbf3560 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff8900
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025d300
	SourceEffectDynamicsProcessorSettings StructProperty; 	//[Offset: 0x0, Size: 40]
	Void SetSettings(constoutrefstructSourceEffectDynamicsProcessorSettings InSettings); //Addr 0x75ebbf449c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff8800
Class: EnvelopeFollowerListener.ActorComponent.Object, Addr: 0x769025d080
	delegate OnEnvelopeFollowerUpdate; 	//[Offset: 0x0, Size: 16]
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025ce00
	SourceEffectEnvelopeFollowerSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	Void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener); //Addr 0x75ebbf4c54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abff8500
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025cb80
	SourceEffectEQSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSettings(constoutrefstructSourceEffectEQSettings InSettings); //Addr 0x75ebbf5374 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc600
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025c900
	SourceEffectFilterSettings StructProperty; 	//[Offset: 0x0, Size: 32]
	Void SetSettings(constoutrefstructSourceEffectFilterSettings InSettings); //Addr 0x75ebbf5a58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc500
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025c680
	SourceEffectFoldbackDistortionSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetSettings(constoutrefstructSourceEffectFoldbackDistortionSettings InSettings); //Addr 0x75ebbf5ec8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc400
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025c400
	SourceEffectMidSideSpreaderSettings StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetSettings(constoutrefstructSourceEffectMidSideSpreaderSettings InSettings); //Addr 0x75ebbf63bc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc300
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025c180
	SourceEffectPannerSettings StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetSettings(constoutrefstructSourceEffectPannerSettings InSettings); //Addr 0x75ebbf6810 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc200
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025bf00
	SourceEffectPhaserSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSettings(constoutrefstructSourceEffectPhaserSettings InSettings); //Addr 0x75ebbf6cf0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc100
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025bc80
	SourceEffectRingModulationSettings StructProperty; 	//[Offset: 0x0, Size: 32]
	Void SetSettings(constoutrefstructSourceEffectRingModulationSettings InSettings); //Addr 0x75ebbf71f0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffc000
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025ba00
	SourceEffectSimpleDelaySettings StructProperty; 	//[Offset: 0x0, Size: 24]
	Void SetSettings(constoutrefstructSourceEffectSimpleDelaySettings InSettings); //Addr 0x75ebbfdec4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffbf00
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025b780
	SourceEffectStereoDelaySettings StructProperty; 	//[Offset: 0x0, Size: 36]
	Void SetSettings(constoutrefstructSourceEffectStereoDelaySettings InSettings); //Addr 0x75ebbfe470 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffbe00
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object, Addr: 0x769025b500
	SourceEffectWaveShaperSettings StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetSettings(constoutrefstructSourceEffectWaveShaperSettings InSettings); //Addr 0x75ebbfe8fc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffbd00
Class: AudioImpulseResponse.Object, Addr: 0x769025b280
	float[] ImpulseResponse; //[Offset: 0x0, Size: 16]
	int NumChannels; 	//[Offset: 0x0, Size: 4]
	int SampleRate; 	//[Offset: 0x0, Size: 4]
	float NormalizationVolumeDb; 	//[Offset: 0x0, Size: 4]
	bool bTrueStereo; 	//[Offset: 0x0, Size: 1]
	float[] IRData; //[Offset: 0x0, Size: 16]
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025b000
	AudioImpulseResponse* ImpulseResponse; 	//[Offset: 0x0, Size: 8]
	SubmixEffectConvolutionReverbSettings StructProperty; 	//[Offset: 0x0, Size: 40]
	enum ESubmixEffectConvolutionReverbBlockSize BlockSize { //[Offset: 0x0, Size: 1]
		BlockSize256 = 0
		BlockSize512 = 66004500000000
		BlockSize1024 = 6f005000000000
		ESubmixEffectConvolutionReverbBlockSize_MAX = 0
	};
	bool bEnableHardwareAcceleration; 	//[Offset: 0x0, Size: 1]
	Void SetSettings(constoutrefstructSubmixEffectConvolutionReverbSettings InSettings); //Addr 0x75ebbff094 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffbb00
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025ab00
	SubmixEffectDelaySettings StructProperty; 	//[Offset: 0x0, Size: 12]
	SubmixEffectDelaySettings StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetSettings(constoutrefstructSubmixEffectDelaySettings InSettings); //Addr 0x75ebbff6c8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffb700
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025a880
	SubmixEffectFilterSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SetSettings(constoutrefstructSubmixEffectFilterSettings InSettings); //Addr 0x75ebc001e8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffb000
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025a600
	SubmixEffectFlexiverbSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSettings(constoutrefstructSubmixEffectFlexiverbSettings InSettings); //Addr 0x75ebc007f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffaf00
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025fd80
	SubmixEffectMultibandCompressorSettings StructProperty; 	//[Offset: 0x0, Size: 32]
	Void SetSettings(constoutrefstructSubmixEffectMultibandCompressorSettings InSettings); //Addr 0x75ebc00d4c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffae00
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025fb00
	SubmixEffectStereoDelaySettings StructProperty; 	//[Offset: 0x0, Size: 36]
	Void SetSettings(constoutrefstructSubmixEffectStereoDelaySettings InSettings); //Addr 0x75ebc011e8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffad00
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x769025f880
	SubmixEffectTapDelaySettings StructProperty; 	//[Offset: 0x0, Size: 24]
	Void SetTap(int TapId, constoutrefstructTapDelayInfo TapInfo); //Addr 0x75ebc01b24 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffe700
Class: Synth2DSlider.Widget.Visual.Object, Addr: 0x7690265100
	float ValueX; 	//[Offset: 0x0, Size: 4]
	float ValueY; 	//[Offset: 0x0, Size: 4]
	delegate ValueXDelegate; 	//[Offset: 0x0, Size: 20]
	delegate ValueYDelegate; 	//[Offset: 0x0, Size: 20]
	Synth2DSliderStyle StructProperty; 	//[Offset: 0x0, Size: 736]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IndentHandle; 	//[Offset: 0x0, Size: 1]
	bool Locked; 	//[Offset: 0x0, Size: 1]
	float StepSize; 	//[Offset: 0x0, Size: 4]
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnMouseCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnValueChangedX; 	//[Offset: 0x0, Size: 16]
	delegate OnValueChangedY; 	//[Offset: 0x0, Size: 16]
	Void SetValue(structVector2D InValue); //Addr 0x75ebc027fc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffe100
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690264e80
	SoundWave* GranulatedSoundWave; 	//[Offset: 0x0, Size: 8]
	Void SetSustainGain(constfloat SustainGain); //Addr 0x75ebc084b0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abffcd00
Class: MonoWaveTableSynthPreset.Object, Addr: 0x7690264c00
	StrProperty PresetName; 	//[Offset: 0x0, Size: 16]
	bool bLockKeyframesToGridBool; 	//[Offset: 0x0, Size: 1]
	int LockKeyframesToGrid; 	//[Offset: 0x0, Size: 4]
	int WaveTableResolution; 	//[Offset: 0x0, Size: 4]
	structRuntimeFloatCurve[] WaveTable; //[Offset: 0x0, Size: 16]
	bool bNormalizeWaveTables; 	//[Offset: 0x0, Size: 1]
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690264980
	delegate OnTableAltered; 	//[Offset: 0x0, Size: 16]
	delegate OnNumTablesChanged; 	//[Offset: 0x0, Size: 16]
	MonoWaveTableSynthPreset* CurrentPreset; 	//[Offset: 0x0, Size: 8]
	Void SetWaveTablePosition(float InPosition); //Addr 0x75ebc0aaf0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac021400
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690264700
	float Frequency; 	//[Offset: 0x0, Size: 4]
	float Volume; 	//[Offset: 0x0, Size: 4]
	Void SetVolume(float InVolume); //Addr 0x75ebc0bf70 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac021200
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690264480
	SoundWave* SoundWave; 	//[Offset: 0x0, Size: 8]
	delegate OnSampleLoaded; 	//[Offset: 0x0, Size: 16]
	delegate OnSamplePlaybackProgress; 	//[Offset: 0x0, Size: 16]
	Void SetSoundWave(SoundWave* InSoundWave); //Addr 0x75ebc0c8ec [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac020900
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690264200
	float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax); //Addr 0x75ebc0d010 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac020700
Class: SynthKnob.Widget.Visual.Object, Addr: 0x7690263f80
	float Value; 	//[Offset: 0x0, Size: 4]
	float StepSize; 	//[Offset: 0x0, Size: 4]
	float MouseSpeed; 	//[Offset: 0x0, Size: 4]
	float MouseFineTuneSpeed; 	//[Offset: 0x0, Size: 4]
	bool ShowTooltipInfo; 	//[Offset: 0x0, Size: 1]
	FText ParameterName; 	//[Offset: 0x0, Size: 24]
	FText ParameterUnits; 	//[Offset: 0x0, Size: 24]
	delegate ValueDelegate; 	//[Offset: 0x0, Size: 20]
	SynthKnobStyle StructProperty; 	//[Offset: 0x0, Size: 600]
	bool Locked; 	//[Offset: 0x0, Size: 1]
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnMouseCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnValueChanged; 	//[Offset: 0x0, Size: 16]
	Void SetValue(float InValue); //Addr 0x75ebc0e3f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac020300
Class: AudioAnalyzerAsset.Object, Addr: 0x7690263800
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object, Addr: 0x7690263a80
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object, Addr: 0x7690263d00
Class: AudioAnalyzerNRT.AudioAnalyzerAsset.Object, Addr: 0x7690263300
	SoundWave* Sound; 	//[Offset: 0x0, Size: 8]
	float DurationInSeconds; 	//[Offset: 0x0, Size: 4]
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object, Addr: 0x7690263580
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object, Addr: 0x7690263080
	float StartingFrequency; 	//[Offset: 0x0, Size: 4]
	int NumBands; 	//[Offset: 0x0, Size: 4]
	float NumBandsPerOctave; 	//[Offset: 0x0, Size: 4]
	float AnalysisPeriod; 	//[Offset: 0x0, Size: 4]
	bool bDownmixToMono; 	//[Offset: 0x0, Size: 1]
	enum EConstantQFFTSizeEnum FFTSize { //[Offset: 0x0, Size: 1]
		Min = 0
		XXSmall = 0
		XSmall = 0
		Small = 0
		Medium = 0
		Large = 0
		XLarge = 0
		XXLarge = 0
		Max = 0
		EConstantQFFTSizeEnum_MAX = 0
	};
	enum EFFTWindowType WindowType { //[Offset: 0x0, Size: 1]
		None = 0
		Hamming = 3a003a00000000
		Hann = 72007400000000
		Blackman = 74000000000000
		EFFTWindowType_MAX = 0
	};
	enum EAudioSpectrumType SpectrumType { //[Offset: 0x0, Size: 1]
		MagnitudeSpectrum = 0
		PowerSpectrum = 69006400000000
		Decibel = 70007900000000
		EAudioSpectrumType_MAX = 0
	};
	float BandWidthStretch; 	//[Offset: 0x0, Size: 4]
	enum EConstantQNormalizationEnum CQTNormalization { //[Offset: 0x0, Size: 1]
		EqualEuclideanNorm = 0
		EqualEnergy = 53004500000000
		EqualAmplitude = 7a006900000000
		EConstantQNormalizationEnum_MAX = 7500000000
	};
	float NoiseFloorDb; 	//[Offset: 0x0, Size: 4]
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object, Addr: 0x7690262e00
	ConstantQNRTSettings* Settings; 	//[Offset: 0x0, Size: 8]
	Void GetNormalizedChannelConstantQAtTime(constfloat InSeconds, constint InChannel, outfloat[] OutConstantQ); //Addr 0x75ebc209f8 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac020100
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object, Addr: 0x7690262b80
	float AnalysisPeriod; 	//[Offset: 0x0, Size: 4]
	float MinimumFrequency; 	//[Offset: 0x0, Size: 4]
	float MaximumFrequency; 	//[Offset: 0x0, Size: 4]
	enum ELoudnessNRTCurveTypeEnum CurveType { //[Offset: 0x0, Size: 1]
		A = 0
		B = 74006100000000
		C = 6f004300000000
		D = 61006d00000000
		None = 6d007500000000
		ELoudnessNRTCurveTypeEnum_MAX = 0
	};
	float NoiseFloorDb; 	//[Offset: 0x0, Size: 4]
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object, Addr: 0x7690262900
	LoudnessNRTSettings* Settings; 	//[Offset: 0x0, Size: 8]
	Void GetNormalizedLoudnessAtTime(constfloat InSeconds, outfloat OutLoudness); //Addr 0x75ebc213ac [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac023f00
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object, Addr: 0x7690262680
	bool bDownmixToMono; 	//[Offset: 0x0, Size: 1]
	float GranularityInSeconds; 	//[Offset: 0x0, Size: 4]
	float Sensitivity; 	//[Offset: 0x0, Size: 4]
	float MinimumFrequency; 	//[Offset: 0x0, Size: 4]
	float MaximumFrequency; 	//[Offset: 0x0, Size: 4]
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object, Addr: 0x7690262400
	OnsetNRTSettings* Settings; 	//[Offset: 0x0, Size: 8]
	Void GetNormalizedChannelOnsetsBetweenTimes(constfloat InStartSeconds, constfloat InEndSeconds, constint InChannel, outfloat[] OutOnsetTimestamps, outfloat[] OutOnsetStrengths); //Addr 0x75ebc21c98 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac023d00
Class: ArtTools.Object, Addr: 0x7690262180
	bool TakeHighResScreenShot(); //Addr 0x75ebc67e28 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac022900
Class: ArtToolsColorPicker.Object, Addr: 0x7690261f00
	delegate OnColorCommitted; 	//[Offset: 0x0, Size: 16]
	delegate OnColorCancelled; 	//[Offset: 0x0, Size: 16]
	delegate FCPOnWindowClosed; 	//[Offset: 0x0, Size: 16]
	Void Open(Object* Parent, structLinearColor InitialColor); //Addr 0x75ebc698f0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac022800
Class: CombineMeshInfo.Object, Addr: 0x7690261c80
	bool bIsProxy; 	//[Offset: 0x0, Size: 1]
	bool bStrictRenderPriority; 	//[Offset: 0x0, Size: 1]
	uint32 StripTopLODs; 	//[Offset: 0x0, Size: 4]
	byte OverrideVertexColorChanel; //[Offset: 0x0, Size: 1]
	Void SetScreenSizes(constoutreffloat[] InScreenSizes); //Addr 0x75ebc6a0a0 [Final|Native] // UFieldProperty addr: 0x75ac022300
Class: SkeletalMeshCombiner.Object, Addr: 0x7690261a00
	SkeletalMesh* MergeMeshes(constoutrefSkinnedMeshComponent*[] InComponents, constCombineMeshInfo* CombineInfo, Skeleton* Skeleton); //Addr 0x75ebc6ae6c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac026300
Class: StaticMeshCombiner.Object, Addr: 0x7690261780
	StaticMesh* MergeMeshes(constoutrefStaticMeshComponent*[] InMeshes, constCombineMeshInfo* CombineInfo); //Addr 0x75ebc6b71c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac026100
Class: EditorBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690261500
	Void TransformSplineMeshComponent(SplineMeshComponent* InSplineMesh, StaticMeshComponent* InStaticMeshComponent); //Addr 0x75ebc6beec [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac025d00
Class: FileMonitor.Object, Addr: 0x7690261280
	Void StartMonitor(FString Directory); //Addr 0x75ebc6cca8 [Final|Native|Static] // UFieldProperty addr: 0x75ac025a00
Class: LandscapeSplinePropBaseActor.Actor.Object, Addr: 0x7690260d80
Class: LandscapeSplinePropActor.LandscapeSplinePropBaseActor.Actor.Object, Addr: 0x7690261000
	SplineMeshComponent*[] LocalMeshComponents; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionAOMaskParamCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690260b00
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMobileBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690260600
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionMobileBentNormalParamCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690260380
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ConvertToStaticMeshInfo.Object, Addr: 0x7690260100
	bool bNeedCPUAcess; 	//[Offset: 0x0, Size: 1]
	bool bInitResources; 	//[Offset: 0x0, Size: 1]
	bool bApplyBoneTransformOverrides; 	//[Offset: 0x0, Size: 1]
Class: MeshConverter.Object, Addr: 0x769026a380
	StaticMesh* SkeletalMeshToStaticMesh(SkinnedMeshComponent* InSkinnedMeshComponent, ConvertToStaticMeshInfo* ConvertInfo); //Addr 0x75ebc6f064 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac025900
Class: MyActor.Actor.Object, Addr: 0x769026a100
Class: RaceSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690269e80
	float TargetArmLengthMax; 	//[Offset: 0x0, Size: 4]
	float TargetArmLengthMin; 	//[Offset: 0x0, Size: 4]
	float ArmLengthOffset; 	//[Offset: 0x0, Size: 4]
	float CameraClipMaxX; 	//[Offset: 0x0, Size: 4]
	float CameraClipMinX; 	//[Offset: 0x0, Size: 4]
	float CameraClipMaxY; 	//[Offset: 0x0, Size: 4]
	float CameraClipMinY; 	//[Offset: 0x0, Size: 4]
	float CameraClipMaxZ; 	//[Offset: 0x0, Size: 4]
	float CameraClipMinZ; 	//[Offset: 0x0, Size: 4]
Class: SequenceFocusActor.Actor.Object, Addr: 0x7690269980
	SceneComponent* Root; 	//[Offset: 0x0, Size: 8]
Class: ShadowAutoGenComponent.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690269700
	FString[] SkipMeshNames; //[Offset: 0x0, Size: 16]
	Material* MaterialShadowAOGen; 	//[Offset: 0x0, Size: 8]
	Material* MaterialShadowAOGBX; 	//[Offset: 0x0, Size: 8]
	Material* MaterialShadowAOGBY; 	//[Offset: 0x0, Size: 8]
Class: ShadowDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690269480
	bool bHQSoftShadow; 	//[Offset: 0x0, Size: 1]
	BoxComponent* ShadowBox; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* ShadowDecalMID; 	//[Offset: 0x0, Size: 8]
	Void SetupShadowBox(BoxComponent* ShadowBox); //Addr 0x75ebc71238 [Final|Native] // UFieldProperty addr: 0x75ac024400
Class: ShadowProjector.Actor.Object, Addr: 0x7690268f80
	SceneCaptureComponent2D* CaptureComponent2D; 	//[Offset: 0x0, Size: 8]
	SphereComponent* Sphere; 	//[Offset: 0x0, Size: 8]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float ShadowDecalSizeOffset; 	//[Offset: 0x0, Size: 4]
	Void SetUpDecalPositionAndSize(DecalComponent* Decal, constoutrefstructVector BoundExtent, constoutrefstructTransform BoundTransform); //Addr 0x75ebc719cc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac028400
Class: SkySphere.Actor.Object, Addr: 0x7690268d00
	StaticMeshComponent* VisMesh; 	//[Offset: 0x0, Size: 8]
	bool AutoBuildReflectionCaptures; 	//[Offset: 0x0, Size: 1]
Class: SpoilerActor.Actor.Object, Addr: 0x7690268a80
	SkeletalMesh* SkeletalMesh; 	//[Offset: 0x0, Size: 8]
	FString[] SocketSearchOrder; //[Offset: 0x0, Size: 16]
	structSpoilerPole[] Poles; //[Offset: 0x0, Size: 16]
	Void UpdateSpoiler(); //Addr 0x75ebc729c8 [Final|Native] // UFieldProperty addr: 0x75ac028300
Class: VehicleCheckSupportCamera.Pawn.Actor.Object, Addr: 0x7690268800
	SpringArmComponent* SpringArm; 	//[Offset: 0x0, Size: 8]
	CameraComponent* Camera; 	//[Offset: 0x0, Size: 8]
	float FieldOfView; 	//[Offset: 0x0, Size: 4]
	bool bTurnOnRotation; 	//[Offset: 0x0, Size: 1]
	float RotationSpeed; 	//[Offset: 0x0, Size: 4]
	float ArmLength; 	//[Offset: 0x0, Size: 4]
	bool bTurnOnMoving; 	//[Offset: 0x0, Size: 1]
	float MovingSpeed; 	//[Offset: 0x0, Size: 4]
	float LeftYaw; 	//[Offset: 0x0, Size: 4]
	float RightYaw; 	//[Offset: 0x0, Size: 4]
	Void UnlockHeadViewFOV(PlayerCameraManager* PlayCameraManager); //Addr 0x75ebc7359c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac027b00
Class: InputCoreTypes.Object, Addr: 0x769026ad80
Class: FontBulkData.Object, Addr: 0x769026ab00
Class: FontFaceInterface.Interface.Object, Addr: 0x769026a880
Class: FontProviderInterface.Interface.Object, Addr: 0x769026a600
Class: SlateTypes.Object, Addr: 0x769026fd80
Class: SlateWidgetStyleAsset.Object, Addr: 0x769026fb00
	SlateWidgetStyleContainerBase* CustomStyle; 	//[Offset: 0x0, Size: 8]
Class: SlateWidgetStyleContainerBase.Object, Addr: 0x769026f880
Class: SlateWidgetStyleContainerInterface.Interface.Object, Addr: 0x7690275100
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274e80
	ButtonStyle StructProperty; 	//[Offset: 0x0, Size: 680]
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274c00
	CheckBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1504]
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274980
	ComboBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1088]
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274700
	ComboButtonStyle StructProperty; 	//[Offset: 0x0, Size: 1016]
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274480
	EditableTextBoxStyle StructProperty; 	//[Offset: 0x0, Size: 2144]
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690274200
	EditableTextStyle StructProperty; 	//[Offset: 0x0, Size: 568]
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690273f80
	ProgressBarStyle StructProperty; 	//[Offset: 0x0, Size: 440]
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690273d00
	ScrollBarStyle StructProperty; 	//[Offset: 0x0, Size: 1304]
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690273a80
	ScrollBoxStyle StructProperty; 	//[Offset: 0x0, Size: 680]
Class: SlateSettings.Object, Addr: 0x7690273800
	bool bExplicitCanvasChildZOrder; 	//[Offset: 0x0, Size: 1]
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690273580
	SpinBoxStyle StructProperty; 	//[Offset: 0x0, Size: 784]
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object, Addr: 0x7690273300
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
Class: ToolMenuBase.Object, Addr: 0x7690273080
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690272e00
	Void ExportToDisk(Texture* Texture, FString Filename, constoutrefstructImageWriteOptions Options); //Addr 0x75ec5471f8 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac027a00
Class: GameNetworkManagerSettings.Object, Addr: 0x7690272180
	int MinDynamicBandwidth; 	//[Offset: 0x0, Size: 4]
	int MaxDynamicBandwidth; 	//[Offset: 0x0, Size: 4]
	int TotalNetBandwidth; 	//[Offset: 0x0, Size: 4]
	int BadPingThreshold; 	//[Offset: 0x0, Size: 4]
	bool bIsStandbyCheckingEnabled; 	//[Offset: 0x0, Size: 1]
	float StandbyRxCheatTime; 	//[Offset: 0x0, Size: 4]
	float StandbyTxCheatTime; 	//[Offset: 0x0, Size: 4]
	float PercentMissingForRxStandby; 	//[Offset: 0x0, Size: 4]
	float PercentMissingForTxStandby; 	//[Offset: 0x0, Size: 4]
	float PercentForBadPing; 	//[Offset: 0x0, Size: 4]
	float JoinInProgressStandbyWaitTime; 	//[Offset: 0x0, Size: 4]
Class: GameSessionSettings.Object, Addr: 0x7690271f00
	int MaxSpectators; 	//[Offset: 0x0, Size: 4]
	int MaxPlayers; 	//[Offset: 0x0, Size: 4]
	bool bRequiresPushToTalk; 	//[Offset: 0x0, Size: 1]
Class: GeneralEngineSettings.Object, Addr: 0x7690271c80
Class: GeneralProjectSettings.Object, Addr: 0x7690271a00
	StrProperty CompanyName; 	//[Offset: 0x0, Size: 16]
	StrProperty CompanyDistinguishedName; 	//[Offset: 0x0, Size: 16]
	StrProperty CopyrightNotice; 	//[Offset: 0x0, Size: 16]
	StrProperty Description; 	//[Offset: 0x0, Size: 16]
	StrProperty Homepage; 	//[Offset: 0x0, Size: 16]
	StrProperty LicensingTerms; 	//[Offset: 0x0, Size: 16]
	StrProperty PrivacyPolicy; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	StrProperty ProjectName; 	//[Offset: 0x0, Size: 16]
	StrProperty ProjectVersion; 	//[Offset: 0x0, Size: 16]
	StrProperty SupportContact; 	//[Offset: 0x0, Size: 16]
	FText ProjectDisplayedTitle; 	//[Offset: 0x0, Size: 24]
	FText ProjectDebugTitleInfo; 	//[Offset: 0x0, Size: 24]
	bool bShouldWindowPreserveAspectRatio; 	//[Offset: 0x0, Size: 1]
	bool bUseBorderlessWindow; 	//[Offset: 0x0, Size: 1]
	bool bStartInVR; 	//[Offset: 0x0, Size: 1]
	bool bAllowWindowResize; 	//[Offset: 0x0, Size: 1]
	bool bAllowClose; 	//[Offset: 0x0, Size: 1]
	bool bAllowMaximize; 	//[Offset: 0x0, Size: 1]
	bool bAllowMinimize; 	//[Offset: 0x0, Size: 1]
Class: HudSettings.Object, Addr: 0x7690271780
	bool bShowHUD; 	//[Offset: 0x0, Size: 1]
	FName[] DebugDisplay; //[Offset: 0x0, Size: 16]
Class: ChaosPhysicalMaterial.Object, Addr: 0x7690271280
	float Friction; 	//[Offset: 0x0, Size: 4]
	float StaticFriction; 	//[Offset: 0x0, Size: 4]
	float Restitution; 	//[Offset: 0x0, Size: 4]
	float LinearEtherDrag; 	//[Offset: 0x0, Size: 4]
	float AngularEtherDrag; 	//[Offset: 0x0, Size: 4]
	float SleepingLinearVelocityThreshold; 	//[Offset: 0x0, Size: 4]
	float SleepingAngularVelocityThreshold; 	//[Offset: 0x0, Size: 4]
Class: PhysicalMaterial.Object, Addr: 0x7690271000
	float Friction; 	//[Offset: 0x0, Size: 4]
	float StaticFriction; 	//[Offset: 0x0, Size: 4]
	enum EFrictionCombineMode FrictionCombineMode { //[Offset: 0x0, Size: 1]
		Average = 0
		Min = 2f006500000000
		Multiply = 6d006f00000000
		Max = 6e006f00000000
		EFrictionCombineMode_MAX = 0
	};
	bool bOverrideFrictionCombineMode; 	//[Offset: 0x0, Size: 1]
	float Restitution; 	//[Offset: 0x0, Size: 4]
	enum EFrictionCombineMode RestitutionCombineMode { //[Offset: 0x0, Size: 1]
		Average = 0
		Min = 2f006500000000
		Multiply = 6d006f00000000
		Max = 6e006f00000000
		EFrictionCombineMode_MAX = 0
	};
	bool bOverrideRestitutionCombineMode; 	//[Offset: 0x0, Size: 1]
	float Density; 	//[Offset: 0x0, Size: 4]
	float SleepLinearVelocityThreshold; 	//[Offset: 0x0, Size: 4]
	float SleepAngularVelocityThreshold; 	//[Offset: 0x0, Size: 4]
	int SleepCounterThreshold; 	//[Offset: 0x0, Size: 4]
	float RaiseMassToPower; 	//[Offset: 0x0, Size: 4]
	float DestructibleDamageThresholdScale; 	//[Offset: 0x0, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty; 	//[Offset: 0x0, Size: 8]
	enum EPhysicalSurface SurfaceType { //[Offset: 0x0, Size: 1]
		SurfaceType_Default = 0
		SurfaceType1 = 0
		SurfaceType2 = 0
		SurfaceType3 = 0
		SurfaceType4 = 0
		SurfaceType5 = 0
		SurfaceType6 = 0
		SurfaceType7 = 0
		SurfaceType8 = 0
		SurfaceType9 = 0
		SurfaceType10 = 0
		SurfaceType11 = 0
		SurfaceType12 = 0
		SurfaceType13 = 0
		SurfaceType14 = 0
		SurfaceType15 = 0
		SurfaceType16 = 0
		SurfaceType17 = 0
		SurfaceType18 = 0
		SurfaceType19 = 0
		SurfaceType20 = 0
		SurfaceType21 = 0
		SurfaceType22 = 0
		SurfaceType23 = 0
		SurfaceType24 = 0
		SurfaceType25 = 0
		SurfaceType26 = 0
		SurfaceType27 = 0
		SurfaceType28 = 0
		SurfaceType29 = 0
		SurfaceType30 = 0
		SurfaceType31 = 0
		SurfaceType32 = 0
		SurfaceType33 = 0
		SurfaceType34 = 0
		SurfaceType35 = 0
		SurfaceType36 = 0
		SurfaceType37 = 0
		SurfaceType38 = 0
		SurfaceType39 = 0
		SurfaceType40 = 0
		SurfaceType41 = 0
		SurfaceType42 = 0
		SurfaceType43 = 0
		SurfaceType44 = 0
		SurfaceType45 = 0
		SurfaceType46 = 0
		SurfaceType47 = 0
		SurfaceType48 = 0
		SurfaceType49 = 0
		SurfaceType50 = 0
		SurfaceType51 = 0
		SurfaceType52 = 0
		SurfaceType53 = 0
		SurfaceType54 = 0
		SurfaceType55 = 0
		SurfaceType56 = 0
		SurfaceType57 = 0
		SurfaceType58 = 0
		SurfaceType59 = 0
		SurfaceType60 = 0
		SurfaceType61 = 0
		SurfaceType62 = 0
		SurfaceType_Max = 0
		EPhysicalSurface_MAX = 0
	};
Class: PhysicalMaterialPropertyBase.Object, Addr: 0x7690270d80
Class: MeshReconstructorBase.Object, Addr: 0x7690270880
	Void StopReconstruction(); //Addr 0x75ec8b094c [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac027000
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690270600
	delegate OnMeshTrackerUpdated; 	//[Offset: 0x0, Size: 16]
	bool ScanWorld; 	//[Offset: 0x0, Size: 1]
	bool RequestNormals; 	//[Offset: 0x0, Size: 1]
	bool RequestVertexConfidence; 	//[Offset: 0x0, Size: 1]
	enum EMeshTrackerVertexColorMode VertexColorMode { //[Offset: 0x0, Size: 1]
		None = 0
		Confidence = 65004400000000
		Block = 65006c00000000
		EMeshTrackerVertexColorMode_MAX = 7500000000
	};
	structColor[] BlockVertexColors; //[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float UpdateInterval; 	//[Offset: 0x0, Size: 4]
	MRMeshComponent* MRMesh; 	//[Offset: 0x0, Size: 8]
	Void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, constoutrefstructVector[] Vertices, constoutrefint[] Triangles, constoutrefstructVector[] Normals, constoutreffloat[] Confidence); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75b0b9e400
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690270380
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* WireframeMaterial; 	//[Offset: 0x0, Size: 8]
	bool bCreateMeshProxySections; 	//[Offset: 0x0, Size: 1]
	bool bUpdateNavMeshOnMeshUpdate; 	//[Offset: 0x0, Size: 1]
	bool bNeverCreateCollisionMesh; 	//[Offset: 0x0, Size: 1]
	BodySetup* CachedBodySetup; 	//[Offset: 0x0, Size: 8]
	BodySetup*[] BodySetups; //[Offset: 0x0, Size: 16]
	Void SetWireframeMaterial(MaterialInterface* InMaterial); //Addr 0x75ec8b15b4 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac026600
Class: ARActor.Actor.Object, Addr: 0x7690270100
	ARComponent* AddARComponent(classARComponent InComponentClass, constoutrefstructGuid NativeID); //Addr 0x75ec8ced50 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac026500
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027a380
	Void UnpinComponent(SceneComponent* ComponentToUnpin); //Addr 0x75ec8d0cd4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02aa00
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027a100
	ARTrackedGeometry* GetTrackedGeometry(constoutrefstructARTraceResult TraceResult); //Addr 0x75ec8d3b08 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac02e600
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object, Addr: 0x7690279e80
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object, Addr: 0x7690279c00
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFailed; 	//[Offset: 0x0, Size: 16]
	ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject); //Addr 0x75ec8d4608 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02e500
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object, Addr: 0x7690279980
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFailed; 	//[Offset: 0x0, Size: 16]
	ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, structVector Location, structVector Extent); //Addr 0x75ec8d4a88 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02e400
Class: ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690279700
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bUseDefaultReplication; 	//[Offset: 0x0, Size: 1]
	MaterialInterface* DefaultMeshMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* DefaultWireframeMeshMaterial; 	//[Offset: 0x0, Size: 8]
	MRMeshComponent* MRMeshComponent; 	//[Offset: 0x0, Size: 8]
	ARTrackedGeometry* MyTrackedGeometry; 	//[Offset: 0x0, Size: 8]
	Void UpdateVisualization(); //Addr 0x75ec8d6a9c [Native|Event|BlueprintCallabl|BlueprintEvent] // UFieldProperty addr: 0x75ac02df00
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690279480
	ARPlaneUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 128]
	Void SetPlaneComponentDebugMode(enum EPlaneComponentDebugMode NewDebugMode); //Addr 0x75ec8d7438 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02d900
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690279200
	ARPointUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 1]
	Void ServerUpdatePayload(constrefstructARPointUpdatePayload NewPayload); //Addr 0x75ec8d7e2c [Native|Event] // UFieldProperty addr: 0x75ac02d600
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278f80
	enum EARFaceTransformMixing TransformSetting { //[Offset: 0x0, Size: 1]
		ComponentOnly = 0
		ComponentLocationTrackedRotation = 61006500000000
		ComponentWithTracked = 65006300000000
		TrackingOnly = 78006900000000
		EARFaceTransformMixing_MAX = 0
	};
	bool bUpdateVertexNormal; 	//[Offset: 0x0, Size: 1]
	bool bFaceOutOfScreen; 	//[Offset: 0x0, Size: 1]
	ARFaceUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 64]
	Void SetFaceComponentDebugMode(enum EFaceComponentDebugMode NewDebugMode); //Addr 0x75ec8d861c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02d200
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278d00
	ARImageUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 96]
	Void SetImageComponentDebugMode(enum EImageComponentDebugMode NewDebugMode); //Addr 0x75ec8d8ebc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02ce00
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278a80
	ARQRCodeUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 112]
	Void SetQRCodeComponentDebugMode(enum EQRCodeComponentDebugMode NewDebugMode); //Addr 0x75ec8d974c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02ca00
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278800
	ARPoseUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 64]
	Void SetPoseComponentDebugMode(enum EPoseComponentDebugMode NewDebugMode); //Addr 0x75ec8da100 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02ff00
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278580
	AREnvironmentProbeUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 48]
	Void ServerUpdatePayload(constrefstructAREnvironmentProbeUpdatePayload NewPayload); //Addr 0x75ec8da9cc [Native|Event] // UFieldProperty addr: 0x75ac02fc00
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278300
	ARObjectUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 48]
	Void ServerUpdatePayload(constrefstructARObjectUpdatePayload NewPayload); //Addr 0x75ec8db130 [Native|Event] // UFieldProperty addr: 0x75ac02f900
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690278080
	ARMeshUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 96]
	Void ServerUpdatePayload(constrefstructARMeshUpdatePayload NewPayload); //Addr 0x75ec8db894 [Native|Event] // UFieldProperty addr: 0x75ac02f600
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690277e00
	ARGeoAnchorUpdatePayload StructProperty; 	//[Offset: 0x3c45c, Size: 112]
	Void SetGeoAnchorComponentDebugMode(enum EGeoAnchorComponentDebugMode NewDebugMode); //Addr 0x75ec8dc168 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac02f200
Class: ARDependencyHandler.Object, Addr: 0x7690277b80
	Void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, structLatentActionInfo LatentInfo); //Addr 0x75ec8dcbfc [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac02ed00
Class: ARGeoTrackingSupport.Object, Addr: 0x7690277900
	ARGeoTrackingSupport* GetGeoTrackingSupport(); //Addr 0x75ec8dddac [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac052100
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object, Addr: 0x7690277680
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFailed; 	//[Offset: 0x0, Size: 16]
	Void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75b0b9dc00
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object, Addr: 0x7690277400
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFailed; 	//[Offset: 0x0, Size: 16]
	Void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error); //Addr 0x75ec080c04 [MulticastDlegate|Delegate] // UFieldProperty addr: 0x75b0b9da00
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690277180
	delegate OnARActorSpawnedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate OnARActorToBeDestroyedDelegate; 	//[Offset: 0x0, Size: 16]
	Void ServerSpawnARActor(classObject ComponentClass, structGuid NativeID); //Addr 0x75ec8e2144 [Final|Native|Event] // UFieldProperty addr: 0x75b0b9d600
Class: ARLightEstimate.Object, Addr: 0x7690276f00
Class: ARBasicLightEstimate.ARLightEstimate.Object, Addr: 0x7690276c80
	float AmbientIntensityLumens; 	//[Offset: 0x0, Size: 4]
	float AmbientColorTemperatureKelvin; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float GetAmbientIntensityLumens(); //Addr 0x75ec8e2840 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac051e00
Class: AROriginActor.Actor.Object, Addr: 0x7690276a00
Class: ARPin.Object, Addr: 0x7690276780
	ARTrackedGeometry* TrackedGeometry; 	//[Offset: 0x0, Size: 8]
	SceneComponent* PinnedComponent; 	//[Offset: 0x0, Size: 8]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EARTrackingState TrackingState { //[Offset: 0x0, Size: 1]
		Unknown = 0
		Tracking = 68007300000000
		NotTracking = 65007400000000
		StoppedTracking = 6e000000000000
		EARTrackingState_MAX = 0
	};
	delegate OnARTrackingStateChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnARTransformUpdated; 	//[Offset: 0x0, Size: 16]
	enum EARTrackingState GetTrackingState(); //Addr 0x75ec8e2ea4 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac051700
Class: ARSessionConfig.DataAsset.Object, Addr: 0x7690276500
	bool bGenerateMeshDataFromTrackedGeometry; 	//[Offset: 0x0, Size: 1]
	bool bGenerateCollisionForMeshData; 	//[Offset: 0x0, Size: 1]
	bool bGenerateNavMeshForMeshData; 	//[Offset: 0x0, Size: 1]
	bool bUseMeshDataForOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bRenderMeshDataInWireframe; 	//[Offset: 0x0, Size: 1]
	bool bTrackSceneObjects; 	//[Offset: 0x0, Size: 1]
	bool bUsePersonSegmentationForOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bUseSceneDepthForOcclusion; 	//[Offset: 0x0, Size: 1]
	bool bUseAutomaticImageScaleEstimation; 	//[Offset: 0x0, Size: 1]
	bool bUseStandardOnboardingUX; 	//[Offset: 0x0, Size: 1]
	enum EARWorldAlignment WorldAlignment { //[Offset: 0x0, Size: 1]
		Gravity = 0
		GravityAndHeading = 61006500000000
		Camera = 73007300000000
		EARWorldAlignment_MAX = 7600000000
	};
	enum EARSessionType SessionType { //[Offset: 0x0, Size: 1]
		None = 0
		Orientation = 0
		World = 0
		Face = 0
		Image = 0
		ObjectScanning = 0
		PoseTracking = 0
		GeoTracking = 0
		EARSessionType_MAX = 0
	};
	enum EARPlaneDetectionMode PlaneDetectionMode { //[Offset: 0x0, Size: 1]
		None = 0
		HorizontalPlaneDetection = 41004500000000
		VerticalPlaneDetection = 6f004d00000000
		EARPlaneDetectionMode_MAX = 7500000000
	};
	bool bHorizontalPlaneDetection; 	//[Offset: 0x0, Size: 1]
	bool bVerticalPlaneDetection; 	//[Offset: 0x0, Size: 1]
	bool bEnableAutoFocus; 	//[Offset: 0x0, Size: 1]
	enum EARLightEstimationMode LightEstimationMode { //[Offset: 0x0, Size: 1]
		None = 0
		AmbientLightEstimate = 41004500000000
		DirectionalLightEstimate = 6f004d00000000
		EARLightEstimationMode_MAX = 100000000
	};
	enum EARFrameSyncMode FrameSyncMode { //[Offset: 0x0, Size: 1]
		SyncTickWithCameraImage = 0
		SyncTickWithoutCameraImage = 6d006f00000000
		EARFrameSyncMode_MAX = 7500000000
	};
	bool bEnableAutomaticCameraOverlay; 	//[Offset: 0x0, Size: 1]
	bool bEnableAutomaticCameraTracking; 	//[Offset: 0x0, Size: 1]
	bool bResetCameraTracking; 	//[Offset: 0x0, Size: 1]
	bool bResetTrackedObjects; 	//[Offset: 0x0, Size: 1]
	ARCandidateImage*[] CandidateImages; //[Offset: 0x0, Size: 16]
	int MaxNumSimultaneousImagesTracked; 	//[Offset: 0x0, Size: 4]
	enum EAREnvironmentCaptureProbeType EnvironmentCaptureProbeType { //[Offset: 0x0, Size: 1]
		None = 0
		Manual = 74006100000000
		Automatic = 64006e00000000
		EAREnvironmentCaptureProbeType_MAX = 7500000000
	};
	WorldMapData(ByteProperty)[] WorldMapData; //[Offset: 0x0, Size: 16]
	ARCandidateObject*[] CandidateObjects; //[Offset: 0x0, Size: 16]
	ARVideoFormat StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUseOptimalVideoFormat; 	//[Offset: 0x0, Size: 1]
	enum EARFaceTrackingDirection FaceTrackingDirection { //[Offset: 0x0, Size: 1]
		FaceRelative = 0
		FaceMirrored = 6e000000000000
		EARFaceTrackingDirection_MAX = 6e006500000000
	};
	enum EARFaceTrackingUpdate FaceTrackingUpdate { //[Offset: 0x0, Size: 1]
		CurvesAndGeo = 0
		CurvesOnly = 6d006f00000000
		EARFaceTrackingUpdate_MAX = 6e006500000000
	};
	int MaxNumberOfTrackedFaces; 	//[Offset: 0x0, Size: 4]
	SerializedARCandidateImageDatabase(ByteProperty)[] SerializedARCandidateImageDatabase; //[Offset: 0x0, Size: 16]
	enum EARSessionTrackingFeature EnabledSessionTrackingFeature { //[Offset: 0x0, Size: 1]
		None = 0
		PoseDetection2D = 71006500000000
		PersonSegmentation = 3a003a00000000
		PersonSegmentationWithDepth = 6e004900000000
		SceneDepth = 74007300000000
		SmoothedSceneDepth = 74000000000000
		EARSessionTrackingFeature_MAX = 0
	};
	enum EARSceneReconstruction SceneReconstructionMethod { //[Offset: 0x0, Size: 1]
		None = 0
		MeshOnly = 3a006500000000
		MeshWithClassification = 6e006900000000
		EARSceneReconstruction_MAX = 0
	};
	ARPlaneComponent* PlaneComponentClass; 	//[Offset: 0x0, Size: 8]
	ARPointComponent* PointComponentClass; 	//[Offset: 0x0, Size: 8]
	ARFaceComponent* FaceComponentClass; 	//[Offset: 0x0, Size: 8]
	ARImageComponent* ImageComponentClass; 	//[Offset: 0x0, Size: 8]
	ARQRCodeComponent* QRCodeComponentClass; 	//[Offset: 0x0, Size: 8]
	ARPoseComponent* PoseComponentClass; 	//[Offset: 0x0, Size: 8]
	AREnvironmentProbeComponent* EnvironmentProbeComponentClass; 	//[Offset: 0x0, Size: 8]
	ARObjectComponent* ObjectComponentClass; 	//[Offset: 0x0, Size: 8]
	ARMeshComponent* MeshComponentClass; 	//[Offset: 0x0, Size: 8]
	ARGeoAnchorComponent* GeoAnchorComponentClass; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* DefaultMeshMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* DefaultWireframeMeshMaterial; 	//[Offset: 0x0, Size: 8]
	bool ShouldResetTrackedObjects(); //Addr 0x75ec8e444c [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac053900
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object, Addr: 0x7690276280
	int BufferSizePerChunk; 	//[Offset: 0x0, Size: 4]
	Void SetPreviewImageData(ImageData(ByteProperty)[] ImageData); //Addr 0x75ec8e57f0 [Final|BlueprintAuthorityOly|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac053500
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object, Addr: 0x7690276000
	PreviewImageData(ByteProperty)[] PreviewImageData; //[Offset: 0x0, Size: 16]
	ARWorldData(ByteProperty)[] ARWorldData; //[Offset: 0x0, Size: 16]
	int PreviewImageBytesTotal; 	//[Offset: 0x0, Size: 4]
	int ARWorldBytesTotal; 	//[Offset: 0x0, Size: 4]
	int PreviewImageBytesDelivered; 	//[Offset: 0x0, Size: 4]
	int ARWorldBytesDelivered; 	//[Offset: 0x0, Size: 4]
	Void K2_OnARWorldMapIsReady(); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac052800
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object, Addr: 0x7690275880
	Void ServerMarkReadyForReceiving(); //Addr 0x75ec8e62d8 [Native|Event] // UFieldProperty addr: 0x75ac052400
Class: ARSkyLight.SkyLight.Info.Actor.Object, Addr: 0x7690275600
	AREnvironmentCaptureProbe* CaptureProbe; 	//[Offset: 0x0, Size: 8]
	Void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe); //Addr 0x75ec8e6968 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac052200
Class: ARTexture.Texture.StreamableRenderAsset.Object, Addr: 0x769027f600
	enum EARTextureType TextureType { //[Offset: 0x0, Size: 1]
		Unknown = 0
		CameraImage = 0
		CameraDepth = 0
		EnvironmentCapture = 0
		PersonSegmentationImage = 0
		PersonSegmentationDepth = 0
		SceneDepthMap = 0
		SceneDepthConfidenceMap = 0
		EARTextureType_MAX = 0
	};
	float Timestamp; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object, Addr: 0x769027ee80
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object, Addr: 0x769027ec00
	enum EARDepthQuality DepthQuality { //[Offset: 0x0, Size: 1]
		Unkown = 0
		Low = 61006500000000
		High = 73007300000000
		EARDepthQuality_MAX = 7500000000
	};
	enum EARDepthAccuracy DepthAccuracy { //[Offset: 0x0, Size: 1]
		Unkown = 0
		Approximate = 61006500000000
		Accurate = 73007300000000
		EARDepthAccuracy_MAX = 100000000
	};
	bool bIsTemporallySmoothed; 	//[Offset: 0x0, Size: 1]
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object, Addr: 0x769027e980
	enum EARTextureType TextureType { //[Offset: 0x0, Size: 1]
		Unknown = 0
		CameraImage = 0
		CameraDepth = 0
		EnvironmentCapture = 0
		PersonSegmentationImage = 0
		PersonSegmentationDepth = 0
		SceneDepthMap = 0
		SceneDepthConfidenceMap = 0
		EARTextureType_MAX = 0
	};
	float Timestamp; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: ARTraceResultDummy.Object, Addr: 0x769027e480
Class: ARTrackedGeometry.Object, Addr: 0x769027e200
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EARTrackingState TrackingState { //[Offset: 0x0, Size: 1]
		Unknown = 0
		Tracking = 68007300000000
		NotTracking = 65007400000000
		StoppedTracking = 6e000000000000
		EARTrackingState_MAX = 0
	};
	MRMeshComponent* UnderlyingMesh; 	//[Offset: 0x0, Size: 8]
	enum EARObjectClassification ObjectClassification { //[Offset: 0x0, Size: 1]
		NotApplicable = 0
		Unknown = 7500000000
		Wall = 800000000
		Ceiling = 7500000000
		Floor = b00000000
		Table = 7500000000
		Seat = 1e00000000
		Face = 7500000000
		Image = 1d00000000
		World = 7500000000
		SceneObject = 900000000
		HandMesh = 7500000000
		Door = 1d00000000
		Window = 7500000000
		EARObjectClassification_MAX = 0
	};
	int LastUpdateFrameNumber; 	//[Offset: 0x0, Size: 4]
	FName DebugName; 	//[Offset: 0x0, Size: 12]
	bool IsTracked(); //Addr 0x75ec8e9214 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac055900
Class: ARPlaneGeometry.ARTrackedGeometry.Object, Addr: 0x769027df80
	enum EARPlaneOrientation Orientation { //[Offset: 0x0, Size: 1]
		Horizontal = 0
		Vertical = 74006100000000
		Diagonal = 6c007000000000
		EARPlaneOrientation_MAX = 100000000
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	structVector[] BoundaryPolygon; //[Offset: 0x0, Size: 16]
	ARPlaneGeometry* SubsumedBy; 	//[Offset: 0x0, Size: 8]
	ARPlaneGeometry* GetSubsumedBy(); //Addr 0x75ec8e9984 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac055400
Class: ARTrackedPoint.ARTrackedGeometry.Object, Addr: 0x769027dd00
Class: ARTrackedImage.ARTrackedGeometry.Object, Addr: 0x769027da80
	ARCandidateImage* DetectedImage; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	structVector2D GetEstimateSize(); //Addr 0x75ec8ea2e0 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac055200
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object, Addr: 0x769027d800
	StrProperty QRCode; 	//[Offset: 0x0, Size: 16]
	int Version; 	//[Offset: 0x0, Size: 4]
Class: ARFaceGeometry.ARTrackedGeometry.Object, Addr: 0x769027d580
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bIsTracked; 	//[Offset: 0x0, Size: 1]
	<enum EARFaceBlendShape, float> BlendShapes; //[Offset: 0x0, Size: 80]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	structTransform GetWorldSpaceEyeTransform(enum EAREye Eye); //Addr 0x75ec8ea9fc [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac054e00
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object, Addr: 0x769027d300
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture; 	//[Offset: 0x0, Size: 8]
	structVector GetExtent(); //Addr 0x75ec8eb2c8 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac054c00
Class: ARTrackedObject.ARTrackedGeometry.Object, Addr: 0x769027d080
	ARCandidateObject* DetectedObject; 	//[Offset: 0x0, Size: 8]
	ARCandidateObject* GetDetectedObject(); //Addr 0x75ec8eb6e0 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac054b00
Class: ARTrackedPose.ARTrackedGeometry.Object, Addr: 0x769027ce00
	ARPose3D StructProperty; 	//[Offset: 0x0, Size: 80]
	structARPose3D GetTrackedPoseData(); //Addr 0x75ec8ebb78 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac054a00
Class: ARMeshGeometry.ARTrackedGeometry.Object, Addr: 0x769027cb80
	bool GetObjectClassificationAtLocation(constoutrefstructVector InWorldLocation, outenum EARObjectClassification OutClassification, outstructVector OutClassificationLocation, float MaxLocationDiff); //Addr 0x75ec8ebfd0 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac054900
Class: ARGeoAnchor.ARTrackedGeometry.Object, Addr: 0x769027c900
	float GetLongitude(); //Addr 0x75ec8ec4e4 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac054500
Class: ARTrackableNotifyComponent.ActorComponent.Object, Addr: 0x769027c680
	delegate OnAddTrackedGeometry; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedGeometry; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedGeometry; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedPlane; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedPlane; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedPlane; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedPoint; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedPoint; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedPoint; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedImage; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedImage; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedImage; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedFace; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedFace; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedFace; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedEnvProbe; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedEnvProbe; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedEnvProbe; 	//[Offset: 0x0, Size: 16]
	delegate OnAddTrackedObject; 	//[Offset: 0x0, Size: 16]
	delegate OnUpdateTrackedObject; 	//[Offset: 0x0, Size: 16]
	delegate OnRemoveTrackedObject; 	//[Offset: 0x0, Size: 16]
Class: ARTypesDummyClass.Object, Addr: 0x769027c400
Class: ARCandidateImage.DataAsset.Object, Addr: 0x769027c180
	Texture2D* CandidateTexture; 	//[Offset: 0x0, Size: 8]
	StrProperty FriendlyName; 	//[Offset: 0x0, Size: 16]
	float Width; 	//[Offset: 0x0, Size: 4]
	float Height; 	//[Offset: 0x0, Size: 4]
	enum EARCandidateImageOrientation Orientation { //[Offset: 0x0, Size: 1]
		Landscape = 0
		Portrait = 6e000000000000
		EARCandidateImageOrientation_MAX = 1800000000
	};
	float GetPhysicalWidth(); //Addr 0x75ec8ed984 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac058200
Class: ARCandidateObject.DataAsset.Object, Addr: 0x769027bf00
	CandidateObjectData(ByteProperty)[] CandidateObjectData; //[Offset: 0x0, Size: 16]
	StrProperty FriendlyName; 	//[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	Void SetFriendlyName(FString NewName); //Addr 0x75ec8edf54 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac057c00
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027bc80
	Void UpdateExternalTrackingHMDPosition(constoutrefstructTransform ExternalTrackingTransform); //Addr 0x75ec90d484 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac059300
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769027ba00
	int PlayerIndex; 	//[Offset: 0x0, Size: 4]
	enum EControllerHand Hand { //[Offset: 0x0, Size: 1]
		Left = 0
		Right = 0
		AnyHand = 0
		Pad = 0
		ExternalCamera = 0
		Gun = 0
		Special = 2
		Special = 3
		Special = 4
		Special = 5
		Special = 6
		Special = 7
		Special = 8
		Special = 9
		Special = a
		Special = b
		Special = c
		ControllerHand_Count = 0
		EControllerHand_MAX = 0
	};
	FName MotionSource; 	//[Offset: 0x0, Size: 12]
	bool bDisableLowLatencyUpdate; 	//[Offset: 0x0, Size: 1]
	enum ETrackingStatus CurrentTrackingStatus { //[Offset: 0x0, Size: 1]
		NotTracked = 0
		InertialOnly = 52006e00000000
		Tracked = 65006300000000
		ETrackingStatus_MAX = 7600000000
	};
	bool bDisplayDeviceModel; 	//[Offset: 0x0, Size: 1]
	FName DisplayModelSource; 	//[Offset: 0x0, Size: 12]
	StaticMesh* CustomDisplayMesh; 	//[Offset: 0x0, Size: 8]
	MaterialInterface*[] DisplayMeshMaterialOverrides; //[Offset: 0x0, Size: 16]
	PrimitiveComponent* DisplayComponent; 	//[Offset: 0x0, Size: 8]
	Void SetTrackingSource(constenum EControllerHand NewSource); //Addr 0x75ec91052c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac058800
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027b780
	Void SetIsControllerMotionTrackingEnabledByDefault(bool enable); //Addr 0x75ec9119a0 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac05b800
Class: VRNotificationsComponent.ActorComponent.Object, Addr: 0x769027b500
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDTrackingInitializedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDRecenteredDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDLostDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDReconnectedDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDConnectCanceledDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDPutOnHeadDelegate; 	//[Offset: 0x0, Size: 16]
	delegate HMDRemovedFromHeadDelegate; 	//[Offset: 0x0, Size: 16]
	delegate VRControllerRecenteredDelegate; 	//[Offset: 0x0, Size: 16]
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027b280
	PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, constFName SystemName, constFName DeviceName, bool bManualAttachment, constoutrefstructTransform RelativeTransform, outstructXRDeviceId XRDeviceId); //Addr 0x75ec912334 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac05b600
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object, Addr: 0x769027b000
	delegate OnModelLoaded; 	//[Offset: 0x0, Size: 16]
	delegate OnLoadFailure; 	//[Offset: 0x0, Size: 16]
	PrimitiveComponent* SpawnedComponent; 	//[Offset: 0x0, Size: 8]
	AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, constFName SystemName, constFName DeviceName, bool bManualAttachment, constoutrefstructTransform RelativeTransform, outstructXRDeviceId XRDeviceId, outPrimitiveComponent* NewComponent); //Addr 0x75ec912be4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac05b400
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769027ad80
	Void ShowLoadingScreen(); //Addr 0x75ec913448 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac05af00
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x769027ab00
	delegate OnInstanceTakePointDamage; 	//[Offset: 0x0, Size: 16]
	delegate OnInstanceTakeRadialDamage; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: FoliageStatistics.BlueprintFunctionLibrary.Object, Addr: 0x769027fd80
	int FoliageOverlappingSphereCount(Object* WorldContextObject, constStaticMesh* StaticMesh, structVector CenterPosition, float Radius); //Addr 0x75ecfe725c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac05e000
Class: FoliageType.Object, Addr: 0x769027fb00
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	float Density; 	//[Offset: 0x0, Size: 4]
	float DensityAdjustmentFactor; 	//[Offset: 0x0, Size: 4]
	float Radius; 	//[Offset: 0x0, Size: 4]
	bool bSingleInstanceModeOverrideRadius; 	//[Offset: 0x0, Size: 1]
	float SingleInstanceModeRadius; 	//[Offset: 0x0, Size: 4]
	enum EFoliageScaling Scaling { //[Offset: 0x0, Size: 1]
		Uniform = 0
		Free = 0
		LockXY = 0
		LockXZ = 0
		LockYZ = 0
		EFoliageScaling_MAX = 0
	};
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	FoliageVertexColorChannelMask StructProperty; 	//[Offset: 0x0, Size: 12]
	enum FoliageVertexColorMask VertexColorMask { //[Offset: 0x0, Size: 1]
		FOLIAGEVERTEXCOLORMASK_Disabled = 0
		FOLIAGEVERTEXCOLORMASK_Red = 0
		FOLIAGEVERTEXCOLORMASK_Green = 0
		FOLIAGEVERTEXCOLORMASK_Blue = 0
		FOLIAGEVERTEXCOLORMASK_Alpha = 0
		FOLIAGEVERTEXCOLORMASK_MAX = 0
	};
	float VertexColorMaskThreshold; 	//[Offset: 0x0, Size: 4]
	bool VertexColorMaskInvert; 	//[Offset: 0x0, Size: 1]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	bool AlignToNormal; 	//[Offset: 0x0, Size: 1]
	float AlignMaxAngle; 	//[Offset: 0x0, Size: 4]
	bool RandomYaw; 	//[Offset: 0x0, Size: 1]
	float RandomPitchAngle; 	//[Offset: 0x0, Size: 4]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	FName[] LandscapeLayers; //[Offset: 0x0, Size: 16]
	float MinimumLayerWeight; 	//[Offset: 0x0, Size: 4]
	FName[] ExclusionLandscapeLayers; //[Offset: 0x0, Size: 16]
	float MinimumExclusionLayerWeight; 	//[Offset: 0x0, Size: 4]
	FName LandscapeLayer; 	//[Offset: 0x0, Size: 12]
	bool CollisionWithWorld; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	BoxSphereBounds StructProperty; 	//[Offset: 0x0, Size: 28]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum EComponentMobility Mobility { //[Offset: 0x0, Size: 1]
		Static = 0
		Stationary = 65004400000000
		Movable = 65006c00000000
		EComponentMobility_MAX = 7600000000
	};
	Int32Interval StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bEnableStaticLighting; 	//[Offset: 0x0, Size: 1]
	bool CastShadow; 	//[Offset: 0x0, Size: 1]
	bool bAffectDynamicIndirectLighting; 	//[Offset: 0x0, Size: 1]
	bool bAffectDistanceFieldLighting; 	//[Offset: 0x0, Size: 1]
	bool bCastDynamicShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastStaticShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowAsTwoSided; 	//[Offset: 0x0, Size: 1]
	bool bCastMixedShadowMobile; 	//[Offset: 0x0, Size: 1]
	bool bReceivesDecals; 	//[Offset: 0x0, Size: 1]
	bool bReceiveMobileCSMShadows; 	//[Offset: 0x0, Size: 1]
	bool bOverrideLightMapRes; 	//[Offset: 0x0, Size: 1]
	int OverriddenLightMapRes; 	//[Offset: 0x0, Size: 4]
	enum ELightmapType LightmapType { //[Offset: 0x0, Size: 1]
		Default = 0
		ForceSurface = 6c006300000000
		ForceVolumetric = 65006e00000000
		ELightmapType_MAX = 0
	};
	enum EDetailMode DetailMode { //[Offset: 0x0, Size: 1]
		DM_Low = 0
		DM_Medium = 3a003a00000000
		DM_High = 6f004d00000000
		DM_MAX = 6e000000000000
	};
	bool bUseAsOccluder; 	//[Offset: 0x0, Size: 1]
	bool bVisibleInRayTracing; 	//[Offset: 0x0, Size: 1]
	bool bEvaluateWorldPositionOffset; 	//[Offset: 0x0, Size: 1]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	enum EHasCustomNavigableGeometry CustomNavigableGeometry { //[Offset: 0x0, Size: 1]
		No = 0
		Yes = 43007300000000
		EvenIfNotCollidable = 62006100000000
		DontExport = 58000000000000
		EHasCustomNavigableGeometry_MAX = 0
	};
	LightingChannels StructProperty; 	//[Offset: 0x0, Size: 1]
	bool bRenderCustomDepth; 	//[Offset: 0x0, Size: 1]
	enum ERendererStencilMask CustomDepthStencilWriteMask { //[Offset: 0x0, Size: 1]
		ERSM_Default = 0
		ERSM = 100
		ERSM = 2
		ERSM = 3
		ERSM = 5
		ERSM = 9
		ERSM = 11
		ERSM = 21
		ERSM = 41
		ERSM = 81
		ERSM_MAX = 0
	};
	int CustomDepthStencilValue; 	//[Offset: 0x0, Size: 4]
	int TranslucencySortPriority; 	//[Offset: 0x0, Size: 4]
	float CollisionRadius; 	//[Offset: 0x0, Size: 4]
	float ShadeRadius; 	//[Offset: 0x0, Size: 4]
	int NumSteps; 	//[Offset: 0x0, Size: 4]
	float InitialSeedDensity; 	//[Offset: 0x0, Size: 4]
	float AverageSpreadDistance; 	//[Offset: 0x0, Size: 4]
	float SpreadVariance; 	//[Offset: 0x0, Size: 4]
	int SeedsPerStep; 	//[Offset: 0x0, Size: 4]
	int DistributionSeed; 	//[Offset: 0x0, Size: 4]
	float MaxInitialSeedOffset; 	//[Offset: 0x0, Size: 4]
	bool bCanGrowInShade; 	//[Offset: 0x0, Size: 1]
	bool bSpawnsInShade; 	//[Offset: 0x0, Size: 1]
	float MaxInitialAge; 	//[Offset: 0x0, Size: 4]
	float MaxAge; 	//[Offset: 0x0, Size: 4]
	float OverlapPriority; 	//[Offset: 0x0, Size: 4]
	FloatInterval StructProperty; 	//[Offset: 0x0, Size: 8]
	RuntimeFloatCurve StructProperty; 	//[Offset: 0x0, Size: 136]
	int ChangeCount; 	//[Offset: 0x0, Size: 4]
	bool ReapplyDensity; 	//[Offset: 0x0, Size: 1]
	bool ReapplyRadius; 	//[Offset: 0x0, Size: 1]
	bool ReapplyAlignToNormal; 	//[Offset: 0x0, Size: 1]
	bool ReapplyRandomYaw; 	//[Offset: 0x0, Size: 1]
	bool ReapplyScaling; 	//[Offset: 0x0, Size: 1]
	bool ReapplyScaleX; 	//[Offset: 0x0, Size: 1]
	bool ReapplyScaleY; 	//[Offset: 0x0, Size: 1]
	bool ReapplyScaleZ; 	//[Offset: 0x0, Size: 1]
	bool ReapplyRandomPitchAngle; 	//[Offset: 0x0, Size: 1]
	bool ReapplyGroundSlope; 	//[Offset: 0x0, Size: 1]
	bool ReapplyHeight; 	//[Offset: 0x0, Size: 1]
	bool ReapplyLandscapeLayers; 	//[Offset: 0x0, Size: 1]
	bool ReapplyZOffset; 	//[Offset: 0x0, Size: 1]
	bool ReapplyCollisionWithWorld; 	//[Offset: 0x0, Size: 1]
	bool ReapplyVertexColorMask; 	//[Offset: 0x0, Size: 1]
	bool bEnableDensityScaling; 	//[Offset: 0x0, Size: 1]
	bool bEnableDiscardOnLoad; 	//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures; //[Offset: 0x0, Size: 16]
	int VirtualTextureCullMips; 	//[Offset: 0x0, Size: 4]
	enum ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType { //[Offset: 0x0, Size: 1]
		Never = 0
		Exclusive = 74006100000000
		Always = 72007200000000
		ERuntimeVirtualTextureMainPassType_MAX = 0
	};
Class: FoliageType_Actor.FoliageType.Object, Addr: 0x769027f880
	Actor* ActorClass; 	//[Offset: 0x0, Size: 8]
	bool bShouldAttachToBaseComponent; 	//[Offset: 0x0, Size: 1]
Class: FoliageType_InstancedStaticMesh.FoliageType.Object, Addr: 0x7690285100
	StaticMesh* Mesh; 	//[Offset: 0x0, Size: 8]
	MaterialInterface*[] OverrideMaterials; //[Offset: 0x0, Size: 16]
	FoliageInstancedStaticMeshComponent* ComponentClass; 	//[Offset: 0x0, Size: 8]
Class: InstancedFoliageActor.Actor.Object, Addr: 0x7690284e80
	bool bDisbleCullDistanceVolume; 	//[Offset: 0x0, Size: 1]
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object, Addr: 0x7690284c00
	CapsuleComponent* CapsuleComponent; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float FoliageDamageImpulseScale; 	//[Offset: 0x0, Size: 4]
	float FoliageTouchImpulseScale; 	//[Offset: 0x0, Size: 4]
	float FoliageStiffness; 	//[Offset: 0x0, Size: 4]
	float FoliageStiffnessQuadratic; 	//[Offset: 0x0, Size: 4]
	float FoliageDamping; 	//[Offset: 0x0, Size: 4]
	float MaxDamageImpulse; 	//[Offset: 0x0, Size: 4]
	float MaxTouchImpulse; 	//[Offset: 0x0, Size: 4]
	float MaxForce; 	//[Offset: 0x0, Size: 4]
	float Mass; 	//[Offset: 0x0, Size: 4]
	Void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, constoutrefstructHitResult OverlapInfo); //Addr 0x75ecfe86c8 [Final|Native] // UFieldProperty addr: 0x75ac05dd00
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690284700
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object, Addr: 0x7690284480
	ProceduralFoliageVolume* ProceduralFoliageVolume; 	//[Offset: 0x0, Size: 8]
Class: ProceduralFoliageComponent.ActorComponent.Object, Addr: 0x7690284200
	ProceduralFoliageSpawner* FoliageSpawner; 	//[Offset: 0x0, Size: 8]
	float TileOverlap; 	//[Offset: 0x0, Size: 4]
	Volume* SpawningVolume; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ProceduralFoliageSpawner.Object, Addr: 0x7690283f80
	int RandomSeed; 	//[Offset: 0x0, Size: 4]
	float TileSize; 	//[Offset: 0x0, Size: 4]
	int NumUniqueTiles; 	//[Offset: 0x0, Size: 4]
	float MinimumQuadTreeSize; 	//[Offset: 0x0, Size: 4]
	structFoliageTypeObject[] FoliageTypes; //[Offset: 0x0, Size: 16]
	Void Simulate(int NumSteps); //Addr 0x75ecfe9654 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05dc00
Class: ProceduralFoliageTile.Object, Addr: 0x7690283d00
	ProceduralFoliageSpawner* FoliageSpawner; 	//[Offset: 0x0, Size: 8]
	structProceduralFoliageInstance[] InstancesArray; //[Offset: 0x0, Size: 16]
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object, Addr: 0x7690283a80
	ProceduralFoliageComponent* ProceduralComponent; 	//[Offset: 0x0, Size: 8]
Class: ControlPointMeshActor.Actor.Object, Addr: 0x7690283800
	ControlPointMeshComponent* ControlPointMeshComponent; 	//[Offset: 0x0, Size: 8]
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690283580
	float VirtualTextureMainPassMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
Class: LandscapeProxy.Actor.Object, Addr: 0x7690283080
	LandscapeSplinesComponent* SplineComponent; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	int MaxLODLevel; 	//[Offset: 0x0, Size: 4]
	float LODDistanceFactor; 	//[Offset: 0x0, Size: 4]
	enum ELandscapeLODFalloff LODFalloff { //[Offset: 0x0, Size: 1]
		Linear = 0
		SquareRoot = 6f006600000000
		ELandscapeLODFalloff_MAX = 0
	};
	float ComponentScreenSizeToUseSubSections; 	//[Offset: 0x0, Size: 4]
	float LOD0ScreenSize; 	//[Offset: 0x0, Size: 4]
	float LOD0DistributionSetting; 	//[Offset: 0x0, Size: 4]
	float LODDistributionSetting; 	//[Offset: 0x0, Size: 4]
	float TessellationComponentScreenSize; 	//[Offset: 0x0, Size: 4]
	bool UseTessellationComponentScreenSizeFalloff; 	//[Offset: 0x0, Size: 1]
	float TessellationComponentScreenSizeFalloff; 	//[Offset: 0x0, Size: 4]
	int OccluderGeometryLOD; 	//[Offset: 0x0, Size: 4]
	int StaticLightingLOD; 	//[Offset: 0x0, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial; 	//[Offset: 0x0, Size: 8]
	float StreamingDistanceMultiplier; 	//[Offset: 0x0, Size: 4]
	MaterialInterface* LandscapeMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* LandscapeHoleMaterial; 	//[Offset: 0x0, Size: 8]
	structLandscapeProxyMaterialOverride[] LandscapeMaterialsOverride; //[Offset: 0x0, Size: 16]
	bool bMeshHoles; 	//[Offset: 0x0, Size: 1]
	byte MeshHolesMaxLod; //[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures; //[Offset: 0x0, Size: 16]
	int VirtualTextureNumLods; 	//[Offset: 0x0, Size: 4]
	int VirtualTextureLodBias; 	//[Offset: 0x0, Size: 4]
	enum ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType { //[Offset: 0x0, Size: 1]
		Never = 0
		Exclusive = 74006100000000
		Always = 72007200000000
		ERuntimeVirtualTextureMainPassType_MAX = 0
	};
	float NegativeZBoundsExtension; 	//[Offset: 0x0, Size: 4]
	float PositiveZBoundsExtension; 	//[Offset: 0x0, Size: 4]
	LandscapeComponent*[] LandscapeComponents; //[Offset: 0x0, Size: 16]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents; //[Offset: 0x0, Size: 16]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents; //[Offset: 0x0, Size: 16]
	bool bHasLandscapeGrass; 	//[Offset: 0x0, Size: 1]
	float StaticLightingResolution; 	//[Offset: 0x0, Size: 4]
	bool CastShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastDynamicShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastStaticShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastFarShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastHiddenShadow; 	//[Offset: 0x0, Size: 1]
	bool bCastShadowAsTwoSided; 	//[Offset: 0x0, Size: 1]
	bool bAffectDistanceFieldLighting; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysComputeGI; 	//[Offset: 0x0, Size: 1]
	LightingChannels StructProperty; 	//[Offset: 0x0, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting; 	//[Offset: 0x0, Size: 1]
	bool bRenderCustomDepth; 	//[Offset: 0x0, Size: 1]
	enum ERendererStencilMask CustomDepthStencilWriteMask { //[Offset: 0x0, Size: 1]
		ERSM_Default = 0
		ERSM = 100
		ERSM = 2
		ERSM = 3
		ERSM = 5
		ERSM = 9
		ERSM = 11
		ERSM = 21
		ERSM = 41
		ERSM = 81
		ERSM_MAX = 0
	};
	int CustomDepthStencilValue; 	//[Offset: 0x0, Size: 4]
	float LDMaxDrawDistance; 	//[Offset: 0x0, Size: 4]
	LightmassPrimitiveSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	int CollisionMipLevel; 	//[Offset: 0x0, Size: 4]
	int SimpleCollisionMipLevel; 	//[Offset: 0x0, Size: 4]
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	BodyInstance StructProperty; 	//[Offset: 0x0, Size: 344]
	bool bGenerateOverlapEvents; 	//[Offset: 0x0, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision; 	//[Offset: 0x0, Size: 1]
	int ComponentSizeQuads; 	//[Offset: 0x0, Size: 4]
	int SubsectionSizeQuads; 	//[Offset: 0x0, Size: 4]
	int NumSubsections; 	//[Offset: 0x0, Size: 4]
	bool bUsedForNavigation; 	//[Offset: 0x0, Size: 1]
	bool bFillCollisionUnderLandscapeForNavmesh; 	//[Offset: 0x0, Size: 1]
	bool bUseDynamicMaterialInstance; 	//[Offset: 0x0, Size: 1]
	enum ENavDataGatheringMode NavigationGeometryGatheringMode { //[Offset: 0x0, Size: 1]
		Default = 0
		Instant = 44007600000000
		Lazy = 67006e00000000
		ENavDataGatheringMode_MAX = 0
	};
	bool bUseLandscapeForCullingInvisibleHLODVertices; 	//[Offset: 0x0, Size: 1]
	bool bHasLayersContent; 	//[Offset: 0x0, Size: 1]
	<Texture2D*, LandscapeWeightmapUsage*> WeightmapUsageMap; //[Offset: 0x0, Size: 80]
	Void SetLandscapeMaterialVectorParameterValue(FName ParameterName, structLinearColor Value); //Addr 0x75ed03a81c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05d100
Class: Landscape.LandscapeProxy.Actor.Object, Addr: 0x7690283300
Class: LandscapeBlueprintBrushBase.Actor.Object, Addr: 0x7690282e00
	Void RequestLandscapeUpdate(); //Addr 0x75ed0337f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05cd00
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object, Addr: 0x7690282b80
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690282900
	int SectionBaseX; 	//[Offset: 0x0, Size: 4]
	int SectionBaseY; 	//[Offset: 0x0, Size: 4]
	int ComponentSizeQuads; 	//[Offset: 0x0, Size: 4]
	int SubsectionSizeQuads; 	//[Offset: 0x0, Size: 4]
	int NumSubsections; 	//[Offset: 0x0, Size: 4]
	MaterialInterface* OverrideMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* OverrideHoleMaterial; 	//[Offset: 0x0, Size: 8]
	structLandscapeComponentMaterialOverride[] OverrideMaterials; //[Offset: 0x0, Size: 16]
	MaterialInstanceConstant*[] MaterialInstances; //[Offset: 0x0, Size: 16]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic; //[Offset: 0x0, Size: 16]
	int8[] LODIndexToMaterialIndex; //[Offset: 0x0, Size: 16]
	int8[] MaterialIndexToDisabledTessellationMaterial; //[Offset: 0x0, Size: 16]
	Texture2D* XYOffsetmapTexture; 	//[Offset: 0x0, Size: 8]
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
	float WeightmapSubsectionOffset; 	//[Offset: 0x0, Size: 4]
	Vector4 StructProperty; 	//[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent; 	//[Offset: 0x0, Size: 28]
	Texture2D* HeightmapTexture; 	//[Offset: 0x0, Size: 8]
	structWeightmapLayerAllocationInfo[] WeightmapLayerAllocations; //[Offset: 0x0, Size: 16]
	Texture2D*[] WeightmapTextures; //[Offset: 0x0, Size: 16]
	LandscapeLODStreamingProxy* LODStreamingProxy; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	structGuid[] IrrelevantLights; //[Offset: 0x0, Size: 16]
	int CollisionMipLevel; 	//[Offset: 0x0, Size: 4]
	int SimpleCollisionMipLevel; 	//[Offset: 0x0, Size: 4]
	float NegativeZBoundsExtension; 	//[Offset: 0x0, Size: 4]
	float PositiveZBoundsExtension; 	//[Offset: 0x0, Size: 4]
	float StaticLightingResolution; 	//[Offset: 0x0, Size: 4]
	int ForcedLOD; 	//[Offset: 0x0, Size: 4]
	int LODBias; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Texture2D* GIBakedBaseColorTexture; 	//[Offset: 0x0, Size: 8]
	byte MobileBlendableLayerMask; //[Offset: 0x0, Size: 1]
	MaterialInterface* MobileMaterialInterface; 	//[Offset: 0x0, Size: 8]
	MaterialInterface*[] MobileMaterialInterfaces; //[Offset: 0x0, Size: 16]
	Texture2D*[] MobileWeightmapTextures; //[Offset: 0x0, Size: 16]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex); //Addr 0x75ed034934 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac05ca00
Class: LandscapeGizmoActor.Actor.Object, Addr: 0x7690282400
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object, Addr: 0x7690282680
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690282180
Class: LandscapeGrassType.Object, Addr: 0x7690281f00
	structGrassVariety[] GrassVarieties; //[Offset: 0x0, Size: 16]
	bool bEnableDensityScaling; 	//[Offset: 0x0, Size: 1]
	StaticMesh* GrassMesh; 	//[Offset: 0x0, Size: 8]
	float GrassDensity; 	//[Offset: 0x0, Size: 4]
	float PlacementJitter; 	//[Offset: 0x0, Size: 4]
	int StartCullDistance; 	//[Offset: 0x0, Size: 4]
	int EndCullDistance; 	//[Offset: 0x0, Size: 4]
	bool RandomRotation; 	//[Offset: 0x0, Size: 1]
	bool AlignToSurface; 	//[Offset: 0x0, Size: 1]
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690281c80
	LandscapeLayerInfoObject*[] ComponentLayerInfos; //[Offset: 0x0, Size: 16]
	int SectionBaseX; 	//[Offset: 0x0, Size: 4]
	int SectionBaseY; 	//[Offset: 0x0, Size: 4]
	int CollisionSizeQuads; 	//[Offset: 0x0, Size: 4]
	float CollisionScale; 	//[Offset: 0x0, Size: 4]
	int SimpleCollisionSizeQuads; 	//[Offset: 0x0, Size: 4]
	CollisionQuadFlags(ByteProperty)[] CollisionQuadFlags; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	LandscapeComponent* RenderComponent; 	//[Offset: 0x0, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials; //[Offset: 0x0, Size: 16]
	LandscapeComponent* GetRenderComponent(); //Addr 0x75ed0358cc [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac05c900
Class: LandscapeInfo.Object, Addr: 0x7690281a00
	Landscape* LandscapeActor; 	//[Offset: 0x0, Size: 28]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	int ComponentSizeQuads; 	//[Offset: 0x0, Size: 4]
	int SubsectionSizeQuads; 	//[Offset: 0x0, Size: 4]
	int ComponentNumSubsections; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	LandscapeStreamingProxy*[] Proxies; //[Offset: 0x0, Size: 16]
Class: LandscapeLayerInfoObject.Object, Addr: 0x7690281500
	FName LayerName; 	//[Offset: 0x0, Size: 12]
	PhysicalMaterial* PhysMaterial; 	//[Offset: 0x0, Size: 8]
	float Hardness; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object, Addr: 0x7690281280
	structLandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo; //[Offset: 0x0, Size: 16]
	bool bIsLayerThumbnail; 	//[Offset: 0x0, Size: 1]
	bool bDisableTessellation; 	//[Offset: 0x0, Size: 1]
	bool bMobile; 	//[Offset: 0x0, Size: 1]
	bool bEditorToolUsage; 	//[Offset: 0x0, Size: 1]
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690280880
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: LandscapeMeshProxyActor.Actor.Object, Addr: 0x7690280600
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent; 	//[Offset: 0x0, Size: 8]
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690280380
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	structIntPoint[] ProxyComponentBases; //[Offset: 0x0, Size: 16]
	int8 ProxyLOD; 	//[Offset: 0x0, Size: 1]
Class: LandscapeSettings.DeveloperSettings.Object, Addr: 0x7690280100
	int MaxNumberOfLayers; 	//[Offset: 0x0, Size: 4]
Class: LandscapeSplineActor.Actor.Object, Addr: 0x769028a380
	SplineComponent* Spline; 	//[Offset: 0x0, Size: 8]
	LandscapeSplineControlPoint*[] SplineControlPoints; //[Offset: 0x0, Size: 16]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveFloat StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x7690289e80
	LandscapeSplineControlPoint*[] ControlPoints; //[Offset: 0x0, Size: 16]
	LandscapeSplineSegment*[] Segments; //[Offset: 0x0, Size: 16]
	MeshComponent*[] CookedForeignMeshComponents; //[Offset: 0x0, Size: 16]
	SplineMeshComponent*[] GetSplineMeshComponents(); //Addr 0x75ed03df28 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac05f800
Class: LandscapeSplineControlPoint.Object, Addr: 0x769028a100
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	float Width; 	//[Offset: 0x0, Size: 4]
	float LayerWidthRatio; 	//[Offset: 0x0, Size: 4]
	float SideFalloff; 	//[Offset: 0x0, Size: 4]
	float LeftSideFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float RightSideFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float LeftSideLayerFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float RightSideLayerFalloffFactor; 	//[Offset: 0x0, Size: 4]
	float EndFalloff; 	//[Offset: 0x0, Size: 4]
	structLandscapeSplineConnection[] ConnectedSegments; //[Offset: 0x0, Size: 16]
	structLandscapeSplineInterpPoint[] Points; //[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent; 	//[Offset: 0x0, Size: 8]
Class: LandscapeSplineSegment.Object, Addr: 0x7690289c00
	LandscapeSplineSegmentConnection StructProperty; 	//[Offset: 0x0, Size: 24]
	InterpCurveVector StructProperty; 	//[Offset: 0x0, Size: 24]
	structLandscapeSplineInterpPoint[] Points; //[Offset: 0x0, Size: 16]
	Box StructProperty; 	//[Offset: 0x0, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents; //[Offset: 0x0, Size: 16]
	SplineMeshComponent*[] LocalLaneComponents; //[Offset: 0x0, Size: 16]
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object, Addr: 0x7690289980
	Landscape* LandscapeActor; 	//[Offset: 0x0, Size: 28]
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x7690289700
Class: LandscapeWeightmapUsage.Object, Addr: 0x7690289480
	LandscapeComponent* ChannelUsage; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690289200
	structGrassInput[] GrassTypes; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object, Addr: 0x7690288f80
	structLayerBlendInput[] Layers; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object, Addr: 0x7690288d00
	enum ETerrainCoordMappingType MappingType { //[Offset: 0x0, Size: 1]
		TCMT_Auto = 0
		TCMT_XY = d00000000
		TCMT_XZ = 2500000000
		TCMT_YZ = e00000000
		TCMT_MAX = 2a00000000
	};
	enum ELandscapeCustomizedCoordType CustomUVType { //[Offset: 0x0, Size: 1]
		LCCT_None = 0
		LCCT_CustomUV0 = 74006e00000000
		LCCT_CustomUV1 = 69007400000000
		LCCT_CustomUV2 = 61006300000000
		LCCT_WeightMapUV = 74006e00000000
		LCCT_MAX = 69007400000000
	};
	float MappingScale; 	//[Offset: 0x0, Size: 4]
	float MappingRotation; 	//[Offset: 0x0, Size: 4]
	float MappingPanU; 	//[Offset: 0x0, Size: 4]
	float MappingPanV; 	//[Offset: 0x0, Size: 4]
	bool bFollowPrecisionModeSetting; 	//[Offset: 0x0, Size: 1]
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object, Addr: 0x7690288a80
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	float PreviewWeight; 	//[Offset: 0x0, Size: 4]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object, Addr: 0x7690288800
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	bool PreviewUsed; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object, Addr: 0x7690288580
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	ExpressionInput StructProperty; 	//[Offset: 0x0, Size: 16]
	FName ParameterName; 	//[Offset: 0x0, Size: 12]
	float PreviewWeight; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object, Addr: 0x7690288300
	structPhysicalMaterialInput[] Inputs; //[Offset: 0x0, Size: 16]
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object, Addr: 0x7690288080
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: AudioEndpointSettingsBase.Object, Addr: 0x7690287e00
Class: SpatializationPluginSourceSettingsBase.Object, Addr: 0x7690287b80
Class: OcclusionPluginSourceSettingsBase.Object, Addr: 0x7690287900
Class: ReverbPluginSourceSettingsBase.Object, Addr: 0x7690287680
Class: SoundModulatorBase.Object, Addr: 0x7690287400
Class: SoundfieldEndpointSettingsBase.Object, Addr: 0x7690287180
Class: SoundfieldEffectSettingsBase.Object, Addr: 0x7690286f00
Class: SoundfieldEffectBase.Object, Addr: 0x7690286c80
	SoundfieldEffectSettingsBase* Settings; 	//[Offset: 0x0, Size: 8]
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690286a00
	float TrimAudioCache(float InMegabytesToFree); //Addr 0x75ed0c2860 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac091300
Class: QuartzClockHandle.Object, Addr: 0x7690286780
	Void UnsubscribeFromTimeDivision(constObject* WorldContextObject, enum EQuartzCommandQuantization InQuantizationBoundary); //Addr 0x75ed0c64dc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac090200
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x7690286500
	SubmixEffectDynamicsProcessorSettings StructProperty; 	//[Offset: 0x0, Size: 80]
	Void SetSettings(constoutrefstructSubmixEffectDynamicsProcessorSettings Settings); //Addr 0x75ed0c775c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac094200
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x7690286280
	SubmixEffectSubmixEQSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetSettings(constoutrefstructSubmixEffectSubmixEQSettings InSettings); //Addr 0x75ed0c7eac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac094100
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object, Addr: 0x7690286000
	SubmixEffectReverbSettings StructProperty; 	//[Offset: 0x0, Size: 64]
	Void SetSettingsWithReverbEffect(constReverbEffect* InReverbEffect, constfloat WetLevel, constfloat DryLevel); //Addr 0x75ed0c8328 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac093f00
Class: QuartzSubsystem.WorldSubsystem.Subsystem.Object, Addr: 0x7690285d80
	float GetRoundTripMinLatency(constObject* WorldContextObject); //Addr 0x75ed0c8950 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac093300
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object, Addr: 0x7690285b00
	SynthComponent* OwningSynthComponent; 	//[Offset: 0x0, Size: 8]
Class: FileMediaSource.BaseMediaSource.MediaSource.Object, Addr: 0x769028f600
	StrProperty FilePath; 	//[Offset: 0x0, Size: 16]
	bool PrecacheFile; 	//[Offset: 0x0, Size: 1]
	Void SetFilePath(FString Path); //Addr 0x75ed0f782c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac093200
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769028f380
	Void EnumerateWebcamCaptureDevices(outstructMediaCaptureDevice[] OutDevices, int Filter); //Addr 0x75ed0f8038 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac092f00
Class: MediaComponent.ActorComponent.Object, Addr: 0x769028f100
	MediaTexture* MediaTexture; 	//[Offset: 0x0, Size: 8]
	MediaPlayer* MediaPlayer; 	//[Offset: 0x0, Size: 8]
	MediaTexture* GetMediaTexture(); //Addr 0x75ed0f87c8 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac092d00
Class: MediaTimeStampInfo.Object, Addr: 0x769028ee80
	Timespan StructProperty; 	//[Offset: 0x0, Size: 8]
	int64 SequenceIndex; 	//[Offset: 0x0, Size: 8]
Class: MediaPlayer.Object, Addr: 0x769028ec00
	delegate OnEndReached; 	//[Offset: 0x0, Size: 16]
	delegate OnMediaClosed; 	//[Offset: 0x0, Size: 16]
	delegate OnMediaOpened; 	//[Offset: 0x0, Size: 16]
	delegate OnMediaOpenFailed; 	//[Offset: 0x0, Size: 16]
	delegate OnPlaybackResumed; 	//[Offset: 0x0, Size: 16]
	delegate OnPlaybackSuspended; 	//[Offset: 0x0, Size: 16]
	delegate OnSeekCompleted; 	//[Offset: 0x0, Size: 16]
	delegate OnTracksChanged; 	//[Offset: 0x0, Size: 16]
	Timespan StructProperty; 	//[Offset: 0x0, Size: 8]
	Timespan StructProperty; 	//[Offset: 0x0, Size: 8]
	Timespan StructProperty; 	//[Offset: 0x0, Size: 8]
	bool NativeAudioOut; 	//[Offset: 0x0, Size: 1]
	bool PlayOnOpen; 	//[Offset: 0x0, Size: 1]
	bool Shuffle; 	//[Offset: 0x0, Size: 1]
	bool Loop; 	//[Offset: 0x0, Size: 1]
	MediaPlaylist* Playlist; 	//[Offset: 0x0, Size: 8]
	int PlaylistIndex; 	//[Offset: 0x0, Size: 4]
	Timespan StructProperty; 	//[Offset: 0x0, Size: 8]
	float HorizontalFieldOfView; 	//[Offset: 0x0, Size: 4]
	float VerticalFieldOfView; 	//[Offset: 0x0, Size: 4]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	bool SupportsSeeking(); //Addr 0x75ed0f90f8 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac09a400
Class: MediaPlaylist.Object, Addr: 0x769028e980
	MediaSource*[] Items; //[Offset: 0x0, Size: 16]
	bool Replace(int Index, MediaSource* Replacement); //Addr 0x75ed0fdbf8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac099800
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object, Addr: 0x769028e700
	enum EMediaSoundChannels Channels { //[Offset: 0x0, Size: 4]
		Mono = 0
		Stereo = 2f007300000000
		Surround = 43006400000000
		EMediaSoundChannels_MAX = 7500000000
	};
	bool DynamicRateAdjustment; 	//[Offset: 0x0, Size: 1]
	float RateAdjustmentFactor; 	//[Offset: 0x0, Size: 4]
	FloatRange StructProperty; 	//[Offset: 0x0, Size: 16]
	MediaPlayer* MediaPlayer; 	//[Offset: 0x0, Size: 8]
	Void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum EMediaSoundComponentFFTSize InFFTSize); //Addr 0x75ed0ff0a8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac098e00
Class: PlatformMediaSource.MediaSource.Object, Addr: 0x769028e200
	MediaSource* MediaSource; 	//[Offset: 0x0, Size: 8]
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object, Addr: 0x769028df80
	StrProperty StreamUrl; 	//[Offset: 0x0, Size: 16]
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object, Addr: 0x769028dd00
	bool bUseTimeSynchronization; 	//[Offset: 0x0, Size: 1]
	int FrameDelay; 	//[Offset: 0x0, Size: 4]
	double TimeDelay; 	//[Offset: 0x0, Size: 8]
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object, Addr: 0x769028da80
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object, Addr: 0x769028d580
Class: GenlockedTimecodeProvider.TimecodeProvider.Object, Addr: 0x769028d300
	bool bUseGenlockToCount; 	//[Offset: 0x0, Size: 1]
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x769028d080
	structFrameTime TransformTime(constoutrefstructFrameTime SourceTime, constoutrefstructFrameRate SourceRate, constoutrefstructFrameRate DestinationRate); //Addr 0x75ed11eee8 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac09ba00
Class: MovieSceneCustomClockSource.Interface.Object, Addr: 0x769028ce00
	Void OnTick(float DeltaSeconds, float InPlayRate); //Addr 0x75ed1b9de0 [Native] // UFieldProperty addr: 0x75ac09b600
Class: MovieSceneEntityProvider.Interface.Object, Addr: 0x769028cb80
Class: MovieScenePlaybackClient.Interface.Object, Addr: 0x769028c900
Class: MovieSceneTrackTemplateProducer.Interface.Object, Addr: 0x769028c680
Class: NodeAndChannelMappings.Interface.Object, Addr: 0x769028c400
Class: MovieSceneNodeGroup.Object, Addr: 0x769028c180
Class: MovieSceneNodeGroupCollection.Object, Addr: 0x769028bf00
Class: MovieSceneBindingOverrides.Object, Addr: 0x769028ba00
	structMovieSceneBindingOverrideData[] BindingData; //[Offset: 0x0, Size: 16]
Class: MovieSceneBindingOwnerInterface.Interface.Object, Addr: 0x769028b780
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object, Addr: 0x769028b500
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769028b280
	bool DefaultValue; 	//[Offset: 0x0, Size: 1]
	MovieSceneBoolChannel StructProperty; 	//[Offset: 0x0, Size: 144]
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769028ad80
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769028b000
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769028ab00
Class: MovieSceneSceneComponentImpersonator.Interface.Object, Addr: 0x769028a880
Class: MovieSceneCompiledData.Object, Addr: 0x769028a600
	MovieSceneEvaluationTemplate StructProperty; 	//[Offset: 0x0, Size: 352]
	MovieSceneSequenceHierarchy StructProperty; 	//[Offset: 0x0, Size: 280]
	MovieSceneEntityComponentField StructProperty; 	//[Offset: 0x0, Size: 240]
	MovieSceneEvaluationField StructProperty; 	//[Offset: 0x0, Size: 48]
	structFrameTime[] DeterminismFences; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneSequenceCompilerMaskStruct StructProperty; 	//[Offset: 0x0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EMovieSceneSequenceFlags AccumulatedFlags { //[Offset: 0x0, Size: 1]
		None = 0
		Volatile = 45002f00000000
		BlockingEvaluation = 65005300000000
		InheritedFlags = 7300000000
		EMovieSceneSequenceFlags_MAX = 0
	};
Class: MovieSceneFloatDecomposer.Interface.Object, Addr: 0x769028fb00
Class: MovieSceneEasingExternalCurve.Object, Addr: 0x7690295100
	CurveFloat* Curve; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneEasingFunction.Interface.Object, Addr: 0x7690294e80
	float OnEvaluate(float Interp); //Addr 0x75ec080c04 [Event|BlueprintCallabl|BlueprintEvent|BlueprintPure|Const] // UFieldProperty addr: 0x75ac09b500
Class: MovieSceneEntitySystemLinker.Object, Addr: 0x7690294c00
	MovieSceneEntitySystemGraph StructProperty; 	//[Offset: 0x0, Size: 312]
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object, Addr: 0x7690294980
Class: MovieSceneFolder.Object, Addr: 0x7690294700
	FName FolderName; 	//[Offset: 0x0, Size: 12]
	MovieSceneFolder*[] ChildFolders; //[Offset: 0x0, Size: 16]
	MovieSceneTrack*[] ChildMasterTracks; //[Offset: 0x0, Size: 16]
	FString[] ChildObjectBindingStrings; //[Offset: 0x0, Size: 16]
Class: MovieSceneKeyProxy.Interface.Object, Addr: 0x7690294480
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690294200
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object, Addr: 0x7690293f80
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690293d00
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690293a80
Class: MovieSceneSequenceTickManager.Object, Addr: 0x7690293800
	Actor*[] SequenceActors; //[Offset: 0x0, Size: 16]
	MovieSceneEntitySystemLinker* Linker; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object, Addr: 0x7690293580
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690293300
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690293080
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690292e00
	bool bHighPassFilter; 	//[Offset: 0x0, Size: 1]
	MovieSceneSection*[] SectionArray; //[Offset: 0x0, Size: 16]
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690292b80
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x7690292900
	MovieScene* MovieScene; 	//[Offset: 0x0, Size: 8]
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690292680
	MovieSceneSection*[] SectionArray; //[Offset: 0x0, Size: 16]
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690292400
Class: MovieSceneTrackInstance.Object, Addr: 0x7690292180
	Object* AnimatedObject; 	//[Offset: 0x0, Size: 8]
	bool bIsMasterTrackInstance; 	//[Offset: 0x0, Size: 1]
	MovieSceneEntitySystemLinker* Linker; 	//[Offset: 0x0, Size: 8]
	structMovieSceneTrackInstanceInput[] Inputs; //[Offset: 0x0, Size: 16]
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690291f00
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object, Addr: 0x7690291c80
	MovieSceneTrackInstanceInstantiator* Instantiator; 	//[Offset: 0x0, Size: 8]
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object, Addr: 0x7690291780
	FName NotifyName; 	//[Offset: 0x0, Size: 12]
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object, Addr: 0x7690291500
	FName NotifyName; 	//[Offset: 0x0, Size: 12]
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object, Addr: 0x7690291280
	Void K2_TwoBoneIK(constoutrefstructVector RootPos, constoutrefstructVector JointPos, constoutrefstructVector EndPos, constoutrefstructVector JointTarget, constoutrefstructVector Effector, outstructVector OutJointPos, outstructVector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale); //Addr 0x75ed24f1ac [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac09ab00
Class: PlayMontageCallbackProxy.Object, Addr: 0x7690291000
	delegate OnCompleted; 	//[Offset: 0x0, Size: 16]
	delegate OnBlendOut; 	//[Offset: 0x0, Size: 16]
	delegate OnInterrupted; 	//[Offset: 0x0, Size: 16]
	delegate OnNotifyBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnNotifyEnd; 	//[Offset: 0x0, Size: 16]
	Void OnNotifyEndReceived(FName NotifyName, constoutrefstructBranchingPointNotifyPayload BranchingPointNotifyPayload); //Addr 0x75ed253e08 [Final|Native] // UFieldProperty addr: 0x75ac09a600
Class: SequencerAnimationSupport.Interface.Object, Addr: 0x7690290d80
Class: DialogueInterface.Interface.Object, Addr: 0x7690290b00
	Void ShowDialogueInfo(bool show, constoutrefFText Name, constoutrefFText Info); //Addr 0x75ec080c04 [Event|BlueprintCallabl|BlueprintEvent|BlueprintPure|Const] // UFieldProperty addr: 0x75ac09e700
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690290880
Class: MovieSceneTransformOrigin.Interface.Object, Addr: 0x7690290600
	structTransform BP_GetTransformOrigin(); //Addr 0x75ec080c04 [Event|BlueprintCallabl|BlueprintEvent|BlueprintPure|Const] // UFieldProperty addr: 0x75ac09e600
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690290100
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneObjectBindingID StructProperty; 	//[Offset: 0x0, Size: 24]
	Void SetConstraintBindingID(constoutrefstructMovieSceneObjectBindingID InConstraintBindingID); //Addr 0x75ed31a5a8 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac09e400
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690290380
	FName AttachSocketName; 	//[Offset: 0x0, Size: 12]
	FName AttachComponentName; 	//[Offset: 0x0, Size: 12]
	enum EAttachmentRule AttachmentLocationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AttachmentRotationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EAttachmentRule AttachmentScaleRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 74004100000000
		SnapToTarget = 6e006f00000000
		EAttachmentRule_MAX = 7500000000
	};
	enum EDetachmentRule DetachmentLocationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 5800000000
		EDetachmentRule_MAX = 800000000
	};
	enum EDetachmentRule DetachmentRotationRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 5800000000
		EDetachmentRule_MAX = 800000000
	};
	enum EDetachmentRule DetachmentScaleRule { //[Offset: 0x0, Size: 1]
		KeepRelative = 0
		KeepWorld = 5800000000
		EDetachmentRule_MAX = 800000000
	};
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029a100
	MovieSceneSection*[] ConstraintSections; //[Offset: 0x0, Size: 16]
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029a380
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690299e80
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	enum MovieScene3DPathSection_Axis FrontAxisEnum { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 74007300000000
		Z = 41003a00000000
		NEG_X = 6c007500000000
		NEG_Y = 74006e00000000
		NEG_Z = 0
		MovieScene3DPathSection_MAX = 0
	};
	enum MovieScene3DPathSection_Axis UpAxisEnum { //[Offset: 0x0, Size: 1]
		X = 0
		Y = 74007300000000
		Z = 41003a00000000
		NEG_X = 6c007500000000
		NEG_Y = 74006e00000000
		NEG_Z = 0
		MovieScene3DPathSection_MAX = 0
	};
	bool bFollow; 	//[Offset: 0x0, Size: 1]
	bool bReverse; 	//[Offset: 0x0, Size: 1]
	bool bForceUpright; 	//[Offset: 0x0, Size: 1]
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690299c00
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x7690299700
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem; 	//[Offset: 0x0, Size: 8]
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x7690299980
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690299480
	MovieSceneTransformMask StructProperty; 	//[Offset: 0x0, Size: 4]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	bool bUseQuaternionInterpolation; 	//[Offset: 0x0, Size: 1]
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690299200
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690298f80
	MovieSceneActorReferenceData StructProperty; 	//[Offset: 0x0, Size: 184]
	IntegralCurve StructProperty; 	//[Offset: 0x0, Size: 128]
	FString[] ActorGuidStrings; //[Offset: 0x0, Size: 16]
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690298d00
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690298a80
	SoundBase* Sound; 	//[Offset: 0x0, Size: 8]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	float StartOffset; 	//[Offset: 0x0, Size: 4]
	float AudioStartTime; 	//[Offset: 0x0, Size: 4]
	float AudioDilationFactor; 	//[Offset: 0x0, Size: 4]
	float AudioVolume; 	//[Offset: 0x0, Size: 4]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneActorReferenceData StructProperty; 	//[Offset: 0x0, Size: 184]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bSuppressSubtitles; 	//[Offset: 0x0, Size: 1]
	bool bOverrideAttenuation; 	//[Offset: 0x0, Size: 1]
	SoundAttenuation* AttenuationSettings; 	//[Offset: 0x0, Size: 8]
	delegate OnQueueSubtitles; 	//[Offset: 0x0, Size: 20]
	delegate OnAudioFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnAudioPlaybackPercent; 	//[Offset: 0x0, Size: 16]
	Void SetStartOffset(structFrameNumber InStartOffset); //Addr 0x75ed31c04c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09e000
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690298800
	MovieSceneSection*[] AudioSections; //[Offset: 0x0, Size: 16]
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690298580
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690298300
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690298080
	MovieSceneByteChannel StructProperty; 	//[Offset: 0x0, Size: 152]
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690297e00
	Enum* Enum; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690297b80
	MovieSceneCameraAnimSectionData StructProperty; 	//[Offset: 0x0, Size: 32]
	CameraAnim* CameraAnim; 	//[Offset: 0x0, Size: 8]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	float PlayScale; 	//[Offset: 0x0, Size: 4]
	float BlendInTime; 	//[Offset: 0x0, Size: 4]
	float BlendOutTime; 	//[Offset: 0x0, Size: 4]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690297900
	MovieSceneSection*[] CameraAnimSections; //[Offset: 0x0, Size: 16]
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690297680
	bool bLockPreviousCamera; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	MovieSceneObjectBindingID StructProperty; 	//[Offset: 0x0, Size: 24]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bHasInitialCameraCutTransform; 	//[Offset: 0x0, Size: 1]
	Void SetCameraBindingID(constoutrefstructMovieSceneObjectBindingID InCameraBindingID); //Addr 0x75ed31d85c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09de00
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690297400
	bool bCanBlend; 	//[Offset: 0x0, Size: 1]
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object, Addr: 0x7690297180
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690296f00
	MovieSceneCameraShakeSectionData StructProperty; 	//[Offset: 0x0, Size: 32]
	MatineeCameraShake* ShakeClass; 	//[Offset: 0x0, Size: 8]
	float PlayScale; 	//[Offset: 0x0, Size: 4]
	enum ECameraShakePlaySpace PlaySpace { //[Offset: 0x0, Size: 1]
		CameraLocal = 0
		World = 65006d00000000
		UserDefined = 53007900000000
		ECameraShakePlaySpace_MAX = 0
	};
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690296c80
	MovieSceneCameraShakeSectionData StructProperty; 	//[Offset: 0x0, Size: 32]
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690296a00
	MovieSceneSection*[] CameraShakeSections; //[Offset: 0x0, Size: 16]
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690296780
	MovieSceneCameraShakeSourceTriggerChannel StructProperty; 	//[Offset: 0x0, Size: 136]
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690296500
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690296280
	MovieSceneSection*[] CameraShakeSections; //[Offset: 0x0, Size: 16]
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690296000
	StrProperty ShotDisplayName; 	//[Offset: 0x0, Size: 16]
	FText DisplayName; 	//[Offset: 0x0, Size: 24]
	Void SetShotDisplayName(FString InShotDisplayName); //Addr 0x75ed3237d0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09dc00
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690295d80
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x7690295b00
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x7690295880
	bool bIsSlateColor; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690295600
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x7690295380
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769029f600
Class: MovieScenePreAnimatedComponentTransformSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769029f380
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x769029f100
Class: MovieSceneDialogueSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029ee80
	FText DialogueInfo; 	//[Offset: 0x0, Size: 24]
	FText SpeakerName; 	//[Offset: 0x0, Size: 24]
	float Duration; 	//[Offset: 0x0, Size: 4]
	FrameNumber StructProperty; 	//[Offset: 0x0, Size: 4]
	Void SetStartOffset(structFrameNumber InStartOffset); //Addr 0x75ed324db8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09da00
Class: MovieSceneDialogueTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029ec00
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029e980
	MovieSceneByteChannel StructProperty; 	//[Offset: 0x0, Size: 152]
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029e700
	Enum* Enum; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x769029e480
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029e200
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029dd00
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029df80
	MovieSceneEvent StructProperty; 	//[Offset: 0x0, Size: 48]
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029da80
	NameCurve StructProperty; 	//[Offset: 0x0, Size: 120]
	MovieSceneEventSectionData StructProperty; 	//[Offset: 0x0, Size: 136]
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object, Addr: 0x769029d800
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object, Addr: 0x769029d580
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object, Addr: 0x769029d300
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object, Addr: 0x769029d080
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029ce00
	bool bFireEventsWhenForwards; 	//[Offset: 0x0, Size: 1]
	bool bFireEventsWhenBackwards; 	//[Offset: 0x0, Size: 1]
	enum EFireEventsAtPosition EventPosition { //[Offset: 0x0, Size: 1]
		AtStartOfEvaluation = 0
		AtEndOfEvaluation = 74006300000000
		AfterSpawn = 45004e00000000
		EFireEventsAtPosition_MAX = 0
	};
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029cb80
	MovieSceneEventChannel StructProperty; 	//[Offset: 0x0, Size: 136]
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029c900
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bFadeAudio; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029c400
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029c680
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x769029c180
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029bf00
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769029bc80
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029ba00
	MovieSceneIntegerChannel StructProperty; 	//[Offset: 0x0, Size: 144]
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029b780
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x769029b500
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029b280
	enum ELevelVisibility Visibility { //[Offset: 0x0, Size: 1]
		Visible = 0
		Hidden = 41004d00000000
		ELevelVisibility_MAX = 0
	};
	FName[] LevelNames; //[Offset: 0x0, Size: 16]
	Void SetVisibility(enum ELevelVisibility InVisibility); //Addr 0x75ed328990 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09d600
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object, Addr: 0x769029b000
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029ad80
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029a880
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029ab00
	MaterialParameterCollection* MPC; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029a600
	int MaterialIndex; 	//[Offset: 0x0, Size: 4]
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x769029fd80
	MovieSceneObjectPathChannel StructProperty; 	//[Offset: 0x0, Size: 200]
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029fb00
	Object* PropertyClass; 	//[Offset: 0x0, Size: 8]
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x769029f880
	MovieSceneSection*[] Sections; //[Offset: 0x0, Size: 16]
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a5100
	MovieSceneParticleChannel StructProperty; 	//[Offset: 0x0, Size: 152]
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a4e80
	MovieSceneSection*[] ParticleSections; //[Offset: 0x0, Size: 16]
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a4c00
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a4980
	MovieSceneObjectPathChannel StructProperty; 	//[Offset: 0x0, Size: 200]
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a4700
	int MaterialIndex; 	//[Offset: 0x0, Size: 4]
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a4480
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a4200
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a3f80
	MovieSceneSkeletalAnimationParams StructProperty; 	//[Offset: 0x0, Size: 216]
	AnimSequence* AnimSequence; 	//[Offset: 0x0, Size: 8]
	AnimSequenceBase* Animation; 	//[Offset: 0x0, Size: 8]
	float StartOffset; 	//[Offset: 0x0, Size: 4]
	float EndOffset; 	//[Offset: 0x0, Size: 4]
	float PlayRate; 	//[Offset: 0x0, Size: 4]
	bool bReverse; 	//[Offset: 0x0, Size: 1]
	FName SlotName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bMatchWithPrevious; 	//[Offset: 0x0, Size: 1]
	FName MatchedBoneName; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bMatchTranslation; 	//[Offset: 0x0, Size: 1]
	bool bMatchIncludeZHeight; 	//[Offset: 0x0, Size: 1]
	bool bMatchRotationYaw; 	//[Offset: 0x0, Size: 1]
	bool bMatchRotationPitch; 	//[Offset: 0x0, Size: 1]
	bool bMatchRotationRoll; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a3d00
	MovieSceneSection*[] AnimationSections; //[Offset: 0x0, Size: 16]
	bool bUseLegacySectionIndexBlend; 	//[Offset: 0x0, Size: 1]
	MovieSceneSkeletalAnimRootMotionTrackParams StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bBlendFirstChildOfRoot; 	//[Offset: 0x0, Size: 1]
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a3a80
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a3800
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a3580
	MovieSceneStringChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a3300
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a3080
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a2e00
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a2b80
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	int ChannelsUsed; 	//[Offset: 0x0, Size: 4]
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a2900
	int NumChannelsUsed; 	//[Offset: 0x0, Size: 4]
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a2680
Class: StoryOptionSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a2400
	StoryOptionChannel StructProperty; 	//[Offset: 0x0, Size: 136]
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a2180
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object, Addr: 0x76902a1f00
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object, Addr: 0x76902a1c80
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFail; 	//[Offset: 0x0, Size: 16]
	AsyncTaskDownloadImage* DownloadImage(FString URL); //Addr 0x75ed470958 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac09d500
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902a1a00
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	bool bApplyAlphaToBlur; 	//[Offset: 0x0, Size: 1]
	float BlurStrength; 	//[Offset: 0x0, Size: 4]
	bool bOverrideAutoRadiusCalculation; 	//[Offset: 0x0, Size: 1]
	int BlurRadius; 	//[Offset: 0x0, Size: 4]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4711b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09ce00
Class: PanelSlot.Visual.Object, Addr: 0x76902a1500
	PanelWidget* Parent; 	//[Offset: 0x0, Size: 8]
	Widget* Content; 	//[Offset: 0x0, Size: 8]
Class: BackgroundBlurSlot.PanelSlot.Visual.Object, Addr: 0x76902a1780
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed471888 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09cb00
Class: PropertyBinding.Object, Addr: 0x76902a1000
	Object* SourceObject; 	//[Offset: 0x0, Size: 8]
	DynamicPropertyPath StructProperty; 	//[Offset: 0x0, Size: 40]
	FName DestinationProperty; 	//[Offset: 0x0, Size: 12]
Class: BoolBinding.PropertyBinding.Object, Addr: 0x76902a1280
	bool GetValue(); //Addr 0x75ed471dfc [Final|Native|Const] // UFieldProperty addr: 0x75ac09ca00
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902a0d80
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	bool bShowEffectWhenDisabled; 	//[Offset: 0x0, Size: 1]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ContentColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	delegate BackgroundDelegate; 	//[Offset: 0x0, Size: 20]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate BrushColorDelegate; 	//[Offset: 0x0, Size: 20]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bFlipForRightToLeftFlowDirection; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseButtonDownEvent; 	//[Offset: 0x0, Size: 20]
	delegate OnMouseButtonUpEvent; 	//[Offset: 0x0, Size: 20]
	delegate OnMouseMoveEvent; 	//[Offset: 0x0, Size: 20]
	delegate OnMouseDoubleClickEvent; 	//[Offset: 0x0, Size: 20]
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed472658 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09f800
Class: BorderSlot.PanelSlot.Visual.Object, Addr: 0x76902a0b00
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed472eec [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09f500
Class: BrushBinding.PropertyBinding.Object, Addr: 0x76902a0880
	structSlateBrush GetValue(); //Addr 0x75ed473518 [Final|Native|Const] // UFieldProperty addr: 0x75ac09f400
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902a0600
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	ButtonStyle StructProperty; 	//[Offset: 0x0, Size: 680]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EButtonClickMethod ClickMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		MouseDown = 3a003a00000000
		MouseUp = 68006300000000
		PreciseClick = 0
		EButtonClickMethod_MAX = 0
	};
	enum EButtonTouchMethod TouchMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		Down = 42004500000000
		PreciseTap = 65004d00000000
		EButtonTouchMethod_MAX = 6c006100000000
	};
	enum EButtonPressMethod PressMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		ButtonPress = 42004500000000
		ButtonRelease = 65004d00000000
		EButtonPressMethod_MAX = 7500000000
	};
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnClicked; 	//[Offset: 0x0, Size: 16]
	delegate OnPressed; 	//[Offset: 0x0, Size: 16]
	delegate OnReleased; 	//[Offset: 0x0, Size: 16]
	delegate OnHovered; 	//[Offset: 0x0, Size: 16]
	delegate OnUnhovered; 	//[Offset: 0x0, Size: 16]
	Void SetTouchMethod(InTouchMethod(ByteProperty) InTouchMethod); //Addr 0x75ed473af4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09ed00
Class: ButtonSlot.PanelSlot.Visual.Object, Addr: 0x76902a0380
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed474348 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac09ea00
Class: CanvasPanelSlot.PanelSlot.Visual.Object, Addr: 0x76902a0100
	AnchorData StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bAutoSize; 	//[Offset: 0x0, Size: 1]
	int ZOrder; 	//[Offset: 0x0, Size: 4]
	Void SetZOrder(int InZOrder); //Addr 0x75ed474f58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d1100
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902aa380
	enum ECheckBoxState CheckedState { //[Offset: 0x0, Size: 1]
		Unchecked = 0
		Checked = 61004e00000000
		Undetermined = 58004100000000
		ECheckBoxState_MAX = 7600000000
	};
	delegate CheckedStateDelegate; 	//[Offset: 0x0, Size: 20]
	CheckBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1504]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UncheckedImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UncheckedHoveredImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UncheckedPressedImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* CheckedImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* CheckedHoveredImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* CheckedPressedImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UndeterminedImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UndeterminedHoveredImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* UndeterminedPressedImage; 	//[Offset: 0x0, Size: 8]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	enum EButtonClickMethod ClickMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		MouseDown = 3a003a00000000
		MouseUp = 68006300000000
		PreciseClick = 0
		EButtonClickMethod_MAX = 0
	};
	enum EButtonTouchMethod TouchMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		Down = 42004500000000
		PreciseTap = 65004d00000000
		EButtonTouchMethod_MAX = 6c006100000000
	};
	enum EButtonPressMethod PressMethod { //[Offset: 0x0, Size: 1]
		DownAndUp = 0
		ButtonPress = 42004500000000
		ButtonRelease = 65004d00000000
		EButtonPressMethod_MAX = 7500000000
	};
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnCheckStateChanged; 	//[Offset: 0x0, Size: 16]
	Void SetTouchMethod(InTouchMethod(ByteProperty) InTouchMethod); //Addr 0x75ed47605c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d0900
Class: CheckedStateBinding.PropertyBinding.Object, Addr: 0x76902aa100
	enum ECheckBoxState GetValue(); //Addr 0x75ed4768c8 [Final|Native|Const] // UFieldProperty addr: 0x75ac0d0800
Class: CircularThrobber.Widget.Visual.Object, Addr: 0x76902a9e80
	int NumberOfPieces; 	//[Offset: 0x0, Size: 4]
	float Period; 	//[Offset: 0x0, Size: 4]
	float Radius; 	//[Offset: 0x0, Size: 4]
	SlateBrushAsset* PieceImage; 	//[Offset: 0x0, Size: 8]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	bool bEnableRadius; 	//[Offset: 0x0, Size: 1]
	Void SetRadius(float InRadius); //Addr 0x75ed476bd4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d0500
Class: ColorBinding.PropertyBinding.Object, Addr: 0x76902a9c00
	structSlateColor GetSlateValue(); //Addr 0x75ed478938 [Final|Native|Const] // UFieldProperty addr: 0x75ac0d0300
Class: ComboBox.Widget.Visual.Object, Addr: 0x76902a9980
	Object*[] Items; //[Offset: 0x0, Size: 16]
	delegate OnGenerateWidgetEvent; 	//[Offset: 0x0, Size: 20]
	bool bIsFocusable; 	//[Offset: 0x0, Size: 1]
Class: ComboBoxString.Widget.Visual.Object, Addr: 0x76902a9700
	FString[] DefaultOptions; //[Offset: 0x0, Size: 16]
	StrProperty SelectedOption; 	//[Offset: 0x0, Size: 16]
	ComboBoxStyle StructProperty; 	//[Offset: 0x0, Size: 1088]
	TableRowStyle StructProperty; 	//[Offset: 0x0, Size: 2104]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	float MaxListHeight; 	//[Offset: 0x0, Size: 4]
	bool HasDownArrow; 	//[Offset: 0x0, Size: 1]
	bool EnableGamepadNavigationMode; 	//[Offset: 0x0, Size: 1]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bIsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnGenerateWidgetEvent; 	//[Offset: 0x0, Size: 20]
	delegate OnSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnOpening; 	//[Offset: 0x0, Size: 16]
	Void SetSelectedOption(FString Option); //Addr 0x75ed479270 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1352b00
Class: DragDropOperation.Object, Addr: 0x76902a9480
	StrProperty Tag; 	//[Offset: 0x0, Size: 16]
	Object* Payload; 	//[Offset: 0x0, Size: 8]
	Widget* DefaultDragVisual; 	//[Offset: 0x0, Size: 8]
	enum EDragPivot Pivot { //[Offset: 0x0, Size: 1]
		MouseDown = 0
		TopLeft = 0
		TopCenter = 0
		TopRight = 0
		CenterLeft = 0
		CenterCenter = 0
		CenterRight = 0
		BottomLeft = 0
		BottomCenter = 0
		BottomRight = 0
		EDragPivot_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	delegate OnDrop; 	//[Offset: 0x0, Size: 16]
	delegate OnDragCancelled; 	//[Offset: 0x0, Size: 16]
	delegate OnDragged; 	//[Offset: 0x0, Size: 16]
	Void Drop(constoutrefstructPointerEvent PointerEvent); //Addr 0x75ed47a588 [Native|Event|BlueprintEvent] // UFieldProperty addr: 0x75ac0d4200
Class: DynamicEntryBoxBase.Widget.Visual.Object, Addr: 0x76902a8f80
	enum EDynamicBoxType EntryBoxType { //[Offset: 0x0, Size: 1]
		Horizontal = 0
		Vertical = 74007300000000
		Wrap = 41003a00000000
		VerticalWrap = 6c007500000000
		Radial = 74006e00000000
		Overlay = 0
		EDynamicBoxType_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	structVector2D[] SpacingPattern; //[Offset: 0x0, Size: 16]
	SlateChildSize StructProperty; 	//[Offset: 0x0, Size: 8]
	enum EHorizontalAlignment EntryHorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment EntryVerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	int MaxElementSize; 	//[Offset: 0x0, Size: 4]
	RadialBoxSettings StructProperty; 	//[Offset: 0x0, Size: 12]
	UserWidgetPool StructProperty; 	//[Offset: 0x0, Size: 128]
	Void SetRadialSettings(constoutrefstructRadialBoxSettings InSettings); //Addr 0x75ed47b5cc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d3e00
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object, Addr: 0x76902a9200
	UserWidget* EntryWidgetClass; 	//[Offset: 0x0, Size: 8]
	Void Reset(bool bDeleteWidgets); //Addr 0x75ed47af78 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d3a00
Class: EditableText.Widget.Visual.Object, Addr: 0x76902a8d00
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	EditableTextStyle StructProperty; 	//[Offset: 0x0, Size: 568]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* BackgroundImageSelected; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* BackgroundImageComposing; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* CaretImage; 	//[Offset: 0x0, Size: 8]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool IsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool IsPassword; 	//[Offset: 0x0, Size: 1]
	float MinimumDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool IsCaretMovedWhenGainFocus; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextWhenFocused; 	//[Offset: 0x0, Size: 1]
	bool RevertTextOnEscape; 	//[Offset: 0x0, Size: 1]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextOnCommit; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardType KeyboardType { //[Offset: 0x0, Size: 1]
		Default = 0
		Number = 0
		Web = 0
		Email = 0
		Password = 0
		AlphaNumeric = 0
		EVirtualKeyboardType_MAX = 0
	};
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardTrigger VirtualKeyboardTrigger { //[Offset: 0x0, Size: 1]
		OnFocusByPointer = 0
		OnAllFocusEvents = 3a000000000000
		EVirtualKeyboardTrigger_MAX = 800000000
	};
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	ShapedTextOptions StructProperty; 	//[Offset: 0x0, Size: 3]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	Void SetText(FText InText); //Addr 0x75ed47bff8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b131ef00
Class: EditableTextBox.Widget.Visual.Object, Addr: 0x76902a8a80
	FText Text; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	EditableTextBoxStyle StructProperty; 	//[Offset: 0x0, Size: 2144]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool IsPassword; 	//[Offset: 0x0, Size: 1]
	float MinimumDesiredWidth; 	//[Offset: 0x0, Size: 4]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IsCaretMovedWhenGainFocus; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextWhenFocused; 	//[Offset: 0x0, Size: 1]
	bool RevertTextOnEscape; 	//[Offset: 0x0, Size: 1]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextOnCommit; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardType KeyboardType { //[Offset: 0x0, Size: 1]
		Default = 0
		Number = 0
		Web = 0
		Email = 0
		Password = 0
		AlphaNumeric = 0
		EVirtualKeyboardType_MAX = 0
	};
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardTrigger VirtualKeyboardTrigger { //[Offset: 0x0, Size: 1]
		OnFocusByPointer = 0
		OnAllFocusEvents = 3a000000000000
		EVirtualKeyboardTrigger_MAX = 800000000
	};
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	ShapedTextOptions StructProperty; 	//[Offset: 0x0, Size: 3]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	Void SetText(FText InText); //Addr 0x75ed47cd10 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1355b00
Class: ExpandableArea.Widget.Visual.Object, Addr: 0x76902a8800
	ExpandableAreaStyle StructProperty; 	//[Offset: 0x0, Size: 304]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	bool bIsExpanded; 	//[Offset: 0x0, Size: 1]
	float MaxHeight; 	//[Offset: 0x0, Size: 4]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate OnExpansionChanged; 	//[Offset: 0x0, Size: 16]
	Widget* HeaderContent; 	//[Offset: 0x0, Size: 8]
	Widget* BodyContent; 	//[Offset: 0x0, Size: 8]
	Void SetIsExpanded_Animated(bool IsExpanded); //Addr 0x75ed47d5ec [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d3700
Class: FloatBinding.PropertyBinding.Object, Addr: 0x76902a8580
	float GetValue(); //Addr 0x75ed47db28 [Final|Native|Const] // UFieldProperty addr: 0x75ac0d3600
Class: GridPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76902a8300
	float[] ColumnFill; //[Offset: 0x0, Size: 16]
	float[] RowFill; //[Offset: 0x0, Size: 16]
	Void SetRowFill(int ColumnIndex, float Coefficient); //Addr 0x75ed47de34 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d3300
Class: GridSlot.PanelSlot.Visual.Object, Addr: 0x76902a8080
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	int Row; 	//[Offset: 0x0, Size: 4]
	int RowSpan; 	//[Offset: 0x0, Size: 4]
	int Column; 	//[Offset: 0x0, Size: 4]
	int ColumnSpan; 	//[Offset: 0x0, Size: 4]
	int Layer; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed47fcf0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d2a00
Class: HorizontalBox.PanelWidget.Widget.Visual.Object, Addr: 0x76902a7e00
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content); //Addr 0x75ed4808d0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d2900
Class: HorizontalBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902a7b80
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	SlateChildSize StructProperty; 	//[Offset: 0x0, Size: 8]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed480d18 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d2500
Class: InputKeySelector.Widget.Visual.Object, Addr: 0x76902a7900
	ButtonStyle StructProperty; 	//[Offset: 0x0, Size: 680]
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	InputChord StructProperty; 	//[Offset: 0x0, Size: 40]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	FText KeySelectionText; 	//[Offset: 0x0, Size: 24]
	FText NoKeySpecifiedText; 	//[Offset: 0x0, Size: 24]
	bool bAllowModifierKeys; 	//[Offset: 0x0, Size: 1]
	bool bAllowGamepadKeys; 	//[Offset: 0x0, Size: 1]
	structKey[] EscapeKeys; //[Offset: 0x0, Size: 16]
	delegate OnKeySelected; 	//[Offset: 0x0, Size: 16]
	delegate OnIsSelectingKeyChanged; 	//[Offset: 0x0, Size: 16]
	Void SetTextBlockVisibility(constenum ESlateVisibility InVisibility); //Addr 0x75ed482a3c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1355000
Class: Int32Binding.PropertyBinding.Object, Addr: 0x76902a7680
	int GetValue(); //Addr 0x75ed4835bc [Final|Native|Const] // UFieldProperty addr: 0x75ac0d2400
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902a7400
	bool bCanCache; 	//[Offset: 0x0, Size: 1]
	bool CacheRelativeTransforms; 	//[Offset: 0x0, Size: 1]
	Void SetCanCache(bool CanCache); //Addr 0x75ed4838c8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d6300
Class: UserListEntry.Interface.Object, Addr: 0x76902a7180
	Void BP_OnItemSelectionChanged(bool bIsSelected); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac0d6000
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902a6f00
	bool IsListItemSelected(interface classUserListEntry UserListEntry); //Addr 0x75ed484400 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0d5d00
Class: UserObjectListEntry.UserListEntry.Interface.Object, Addr: 0x76902a6c80
	Void OnListItemObjectSet(Object* ListItemObject); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac0d5c00
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902a6a00
	Object* GetListItemObject(interface classUserObjectListEntry UserObjectListEntry); //Addr 0x75ed484cb4 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0d5b00
Class: ListViewBase.Widget.Visual.Object, Addr: 0x76902a6500
	UserWidget* EntryWidgetClass; 	//[Offset: 0x0, Size: 8]
	classUserWidget[] EntryWidgetClassList; //[Offset: 0x0, Size: 16]
	float WheelScrollMultiplier; 	//[Offset: 0x0, Size: 4]
	bool bEnableScrollAnimation; 	//[Offset: 0x0, Size: 1]
	bool bEnableFixedLineOffset; 	//[Offset: 0x0, Size: 1]
	bool bScrollbarVisibility; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	float FixedLineScrollOffset; 	//[Offset: 0x0, Size: 4]
	delegate BP_OnEntryGenerated; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnEntryReleased; 	//[Offset: 0x0, Size: 16]
	UserWidgetPool StructProperty; 	//[Offset: 0x0, Size: 128]
	Void SetWheelScrollMultiplier(float NewWheelScrollMultiplier); //Addr 0x75ed486e50 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d5100
Class: ListView.ListViewBase.Widget.Visual.Object, Addr: 0x76902a6780
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	enum ESelectionMode SelectionMode { //[Offset: 0x0, Size: 1]
		None = 0
		Single = 75007400000000
		SingleToggle = 69004400000000
		Multi = 6e00000000
		ESelectionMode_MAX = 0
	};
	enum EConsumeMouseWheel ConsumeMouseWheel { //[Offset: 0x0, Size: 1]
		WhenScrollingPossible = 0
		Always = 43004500000000
		Never = 57006500000000
		EConsumeMouseWheel_MAX = 7500000000
	};
	bool bClearSelectionOnClick; 	//[Offset: 0x0, Size: 1]
	bool bIsFocusable; 	//[Offset: 0x0, Size: 1]
	float EntrySpacing; 	//[Offset: 0x0, Size: 4]
	bool bReturnFocusToSelection; 	//[Offset: 0x0, Size: 1]
	Object*[] ListItems; //[Offset: 0x0, Size: 16]
	delegate BP_OnEntryInitialized; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemClicked; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemDoubleClicked; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemIsHoveredChanged; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemSelectionChanged; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnItemScrolledIntoView; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnListViewScrolled; 	//[Offset: 0x0, Size: 16]
	delegate BP_OnListViewFinishedScrolling; 	//[Offset: 0x0, Size: 16]
	Void SetSelectionMode(SelectionMode(ByteProperty) SelectionMode); //Addr 0x75ed485b0c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d7900
Class: ListViewDesignerPreviewItem.Object, Addr: 0x76902a6280
Class: ListViewItemData.Object, Addr: 0x76902a6000
	Void SetEntryClassIndex(int InEntryClassIndex); //Addr 0x75ed488d24 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d7700
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902a5d80
	UserWidget* MenuClass; 	//[Offset: 0x0, Size: 8]
	delegate OnGetMenuContentEvent; 	//[Offset: 0x0, Size: 20]
	delegate OnGetUserMenuContentEvent; 	//[Offset: 0x0, Size: 20]
	enum EMenuPlacement Placement { //[Offset: 0x0, Size: 1]
		MenuPlacement_BelowAnchor = 0
		MenuPlacement_CenteredBelowAnchor = 0
		MenuPlacement_BelowRightAnchor = 0
		MenuPlacement_ComboBox = 0
		MenuPlacement_ComboBoxRight = 0
		MenuPlacement_MenuRight = 0
		MenuPlacement_AboveAnchor = 0
		MenuPlacement_CenteredAboveAnchor = 0
		MenuPlacement_AboveRightAnchor = 0
		MenuPlacement_MenuLeft = 0
		MenuPlacement_Center = 0
		MenuPlacement_RightLeftCenter = 0
		MenuPlacement_MatchBottomLeft = 0
		MenuPlacement_MAX = 7500000000
	};
	bool bFitInWindow; 	//[Offset: 0x0, Size: 1]
	bool ShouldDeferPaintingAfterWindowContent; 	//[Offset: 0x0, Size: 1]
	bool UseApplicationMenuStack; 	//[Offset: 0x0, Size: 1]
	delegate OnMenuOpenChanged; 	//[Offset: 0x0, Size: 16]
	Void ToggleOpen(bool bFocusOnOpen); //Addr 0x75ed489398 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1357000
Class: MouseCursorBinding.PropertyBinding.Object, Addr: 0x76902a5b00
	ReturnValue(ByteProperty) GetValue(); //Addr 0x75ed489afc [Final|Native|Const] // UFieldProperty addr: 0x75ac0d7600
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object, Addr: 0x76902a5880
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902a5600
	MovieScene2DTransformMask StructProperty; 	//[Offset: 0x0, Size: 4]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902a5380
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object, Addr: 0x76902af600
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
	MovieSceneFloatChannel StructProperty; 	//[Offset: 0x0, Size: 160]
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902af380
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object, Addr: 0x76902af100
	FName[] BrushPropertyNamePath; //[Offset: 0x0, Size: 16]
	FName TrackName; 	//[Offset: 0x0, Size: 12]
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76902aee80
	FText Text; 	//[Offset: 0x0, Size: 24]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	bool bIsReadOnly; 	//[Offset: 0x0, Size: 1]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	bool SelectAllTextWhenFocused; 	//[Offset: 0x0, Size: 1]
	bool ClearTextSelectionOnFocusLoss; 	//[Offset: 0x0, Size: 1]
	bool RevertTextOnEscape; 	//[Offset: 0x0, Size: 1]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	Void SetWidgetStyle(constoutrefstructTextBlockStyle InWidgetStyle); //Addr 0x75ed48ace4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b1356700
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76902aec00
	FText Text; 	//[Offset: 0x0, Size: 24]
	FText HintText; 	//[Offset: 0x0, Size: 24]
	delegate HintTextDelegate; 	//[Offset: 0x0, Size: 20]
	EditableTextBoxStyle StructProperty; 	//[Offset: 0x0, Size: 2144]
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	bool bIsReadOnly; 	//[Offset: 0x0, Size: 1]
	bool AllowContextMenu; 	//[Offset: 0x0, Size: 1]
	VirtualKeyboardOptions StructProperty; 	//[Offset: 0x0, Size: 1]
	enum EVirtualKeyboardDismissAction VirtualKeyboardDismissAction { //[Offset: 0x0, Size: 1]
		TextChangeOnDismiss = 0
		TextCommitOnAccept = 75006f00000000
		TextCommitOnDismiss = 4d005f00000000
		EVirtualKeyboardDismissAction_MAX = 7500000000
	};
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate OnTextChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnTextCommitted; 	//[Offset: 0x0, Size: 16]
	Void SetTextStyle(constoutrefstructTextBlockStyle InTextStyle); //Addr 0x75ed48b840 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b135a000
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902ae980
Class: NamedSlotInterface.Interface.Object, Addr: 0x76902ae700
Class: NativeWidgetHost.Widget.Visual.Object, Addr: 0x76902ae480
Class: Overlay.PanelWidget.Widget.Visual.Object, Addr: 0x76902ae200
	OverlaySlot* AddChildToOverlay(Widget* Content); //Addr 0x75ed48cab4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d7500
Class: OverlaySlot.PanelSlot.Visual.Object, Addr: 0x76902adf80
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed48cf48 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d7200
Class: ProgressBar.Widget.Visual.Object, Addr: 0x76902add00
	ProgressBarStyle StructProperty; 	//[Offset: 0x0, Size: 440]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* BackgroundImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* FillImage; 	//[Offset: 0x0, Size: 8]
	SlateBrushAsset* MarqueeImage; 	//[Offset: 0x0, Size: 8]
	float Percent; 	//[Offset: 0x0, Size: 4]
	enum EProgressBarFillType BarFillType { //[Offset: 0x0, Size: 1]
		LeftToRight = 0
		RightToLeft = 3a00000000
		FillFromCenter = 74006500000000
		TopToBottom = 1c00000000
		BottomToTop = e00000000
		EProgressBarFillType_MAX = 0
	};
	bool bIsMarquee; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	delegate PercentDelegate; 	//[Offset: 0x0, Size: 20]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate FillColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	Void SetPercent(float InPercent); //Addr 0x75ed48e414 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d6f00
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902ada80
	bool bRetainRender; 	//[Offset: 0x0, Size: 1]
	bool RenderOnInvalidation; 	//[Offset: 0x0, Size: 1]
	bool RenderOnPhase; 	//[Offset: 0x0, Size: 1]
	int Phase; 	//[Offset: 0x0, Size: 4]
	int PhaseCount; 	//[Offset: 0x0, Size: 4]
	MaterialInterface* EffectMaterial; 	//[Offset: 0x0, Size: 8]
	FName TextureParameter; 	//[Offset: 0x0, Size: 12]
	<FName, float> ScalarParameters; //[Offset: 0x0, Size: 80]
	<FName, structLinearColor> VectorParameters; //[Offset: 0x0, Size: 80]
	<FName, Texture*> TextureParameters; //[Offset: 0x0, Size: 80]
	Void SetTextureParameter(FName TextureParameter); //Addr 0x75ed48eb58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d6900
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76902ad800
	bool bNeedTranslate; 	//[Offset: 0x0, Size: 1]
	delegate OnHyperLinkerClicked; 	//[Offset: 0x0, Size: 16]
	FText Text; 	//[Offset: 0x0, Size: 24]
	StrProperty TextID; 	//[Offset: 0x0, Size: 16]
	DataTable* TextStyleSet; 	//[Offset: 0x0, Size: 8]
	classRichTextBlockDecorator[] DecoratorClasses; //[Offset: 0x0, Size: 16]
	bool bOverrideDefaultStyle; 	//[Offset: 0x0, Size: 1]
	FName DefaultTextStyleName; 	//[Offset: 0x0, Size: 12]
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	enum ETextTransformPolicy TextTransformPolicy { //[Offset: 0x0, Size: 1]
		None = 0
		ToLower = 65007000000000
		ToUpper = 74007200000000
		ETextTransformPolicy_MAX = 7500000000
	};
	TextBlockStyle StructProperty; 	//[Offset: 0x0, Size: 648]
	RichTextBlockDecorator*[] InstanceDecorators; //[Offset: 0x0, Size: 16]
	enum ERichTextAdaptType AdapterType { //[Offset: 0x0, Size: 1]
		None = 0
		BestFit = 0
		Marquee = 0
		ERichTextAdaptType_MAX = 7500000000
	};
	int MinFontSize; 	//[Offset: 0x0, Size: 4]
	int MaxLineNum; 	//[Offset: 0x0, Size: 4]
	int CurrentFontSize; 	//[Offset: 0x0, Size: 4]
	enum ERichTextMarqueeDirection MarqueeDirection { //[Offset: 0x0, Size: 1]
		LeftToRight = 0
		RightToLeft = 3a003a00000000
		TopToBottom = 61006400000000
		BottomToTop = 58000000000000
		ERichTextMarqueeDirection_MAX = 0
	};
	enum ERichTextMarqueePolicy MarqueePolicy { //[Offset: 0x0, Size: 1]
		Always = 0
		OverflowX = 3a003a00000000
		OverflowY = 61006400000000
		OverflowBoth = 58000000000000
		ERichTextMarqueePolicy_MAX = 0
	};
	int MarqueeSpeed; 	//[Offset: 0x0, Size: 4]
	enum ERichTextMarqueeType MarqueeType { //[Offset: 0x0, Size: 1]
		Default = 0
		DelayStart = 3a003a00000000
		ERichTextMarqueeType_MAX = 800000000
	};
	float MarqueeStartDelay; 	//[Offset: 0x0, Size: 4]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	float WidthOverride; 	//[Offset: 0x0, Size: 4]
	float HeightOverride; 	//[Offset: 0x0, Size: 4]
	float AdaptMinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float AdaptMinDesiredHeight; 	//[Offset: 0x0, Size: 4]
	float AdaptMaxDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float AdaptMaxDesiredHeight; 	//[Offset: 0x0, Size: 4]
	bool bOverride_WidthOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_HeightOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredHeight; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredHeight; 	//[Offset: 0x0, Size: 1]
	delegate OnTextMarqueeEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnTextFontSizeChanged; 	//[Offset: 0x0, Size: 16]
	Void SetWrapTextAt(float InWrapTextAt); //Addr 0x75ed49339c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b135af00
Class: RichTextBlockDecorator.Object, Addr: 0x76902ad580
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object, Addr: 0x76902ad300
	DataTable* ImageSet; 	//[Offset: 0x0, Size: 8]
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902ad080
	bool PadLeft; 	//[Offset: 0x0, Size: 1]
	bool PadRight; 	//[Offset: 0x0, Size: 1]
	bool PadTop; 	//[Offset: 0x0, Size: 1]
	bool PadBottom; 	//[Offset: 0x0, Size: 1]
	float MinLeft; 	//[Offset: 0x0, Size: 4]
	float MinRight; 	//[Offset: 0x0, Size: 4]
	float MinTop; 	//[Offset: 0x0, Size: 4]
	float MinBottom; 	//[Offset: 0x0, Size: 4]
	Void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom); //Addr 0x75ed4953b8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d6800
Class: SafeZoneSlot.PanelSlot.Visual.Object, Addr: 0x76902ace00
	bool bIsTitleSafe; 	//[Offset: 0x0, Size: 1]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HAlign { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VAlign { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902acb80
	enum EStretch Stretch { //[Offset: 0x0, Size: 1]
		None = 0
		Fill = 75006c00000000
		ScaleToFit = 6c004200000000
		ScaleToFitX = 75005300000000
		ScaleToFitY = 6f004300000000
		ScaleToFill = 76006500000000
		ScaleBySafeZone = 65007a00000000
		UserSpecified = 0
		EStretch_MAX = 0
	};
	enum EStretchDirection StretchDirection { //[Offset: 0x0, Size: 1]
		Both = 0
		DownOnly = 54006800000000
		UpOnly = 65007000000000
		EStretchDirection_MAX = 7500000000
	};
	float UserSpecifiedScale; 	//[Offset: 0x0, Size: 4]
	bool IgnoreInheritedScale; 	//[Offset: 0x0, Size: 1]
	Void SetUserSpecifiedScale(float InUserSpecifiedScale); //Addr 0x75ed495bd0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d6400
Class: ScaleBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902ac900
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4961ac [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0da300
Class: ScrollBar.Widget.Visual.Object, Addr: 0x76902ac680
	ScrollBarStyle StructProperty; 	//[Offset: 0x0, Size: 1304]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	bool bAlwaysShowScrollbar; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysShowScrollbarTrack; 	//[Offset: 0x0, Size: 1]
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	Void SetState(float InOffsetFraction, float InThumbSizeFraction); //Addr 0x75ed4967d8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0da200
Class: ScrollBox.PanelWidget.Widget.Visual.Object, Addr: 0x76902ac400
	ScrollBoxStyle StructProperty; 	//[Offset: 0x0, Size: 680]
	ScrollBarStyle StructProperty; 	//[Offset: 0x0, Size: 1304]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	SlateWidgetStyleAsset* BarStyle; 	//[Offset: 0x0, Size: 8]
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	enum ESlateVisibility ScrollBarVisibility { //[Offset: 0x0, Size: 1]
		Visible = 0
		Collapsed = 0
		Hidden = 0
		HitTestInvisible = 0
		SelfHitTestInvisible = 0
		ESlateVisibility_MAX = 0
	};
	enum EConsumeMouseWheel ConsumeMouseWheel { //[Offset: 0x0, Size: 1]
		WhenScrollingPossible = 0
		Always = 43004500000000
		Never = 57006500000000
		EConsumeMouseWheel_MAX = 7500000000
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	bool AlwaysShowScrollbar; 	//[Offset: 0x0, Size: 1]
	bool AlwaysShowScrollbarTrack; 	//[Offset: 0x0, Size: 1]
	bool AllowOverscroll; 	//[Offset: 0x0, Size: 1]
	bool bAnimateWheelScrolling; 	//[Offset: 0x0, Size: 1]
	enum EDescendantScrollDestination NavigationDestination { //[Offset: 0x0, Size: 1]
		IntoView = 0
		TopOrLeft = 65006300000000
		Center = 44006c00000000
		BottomOrRight = 4d000000000000
		EDescendantScrollDestination_MAX = 0
	};
	float AlignScollThreshold; 	//[Offset: 0x0, Size: 4]
	float NavigationScrollPadding; 	//[Offset: 0x0, Size: 4]
	enum EScrollWhenFocusChanges ScrollWhenFocusChanges { //[Offset: 0x0, Size: 1]
		NoScroll = 0
		InstantScroll = 6c006f00000000
		AnimatedScroll = 68004300000000
		EScrollWhenFocusChanges_MAX = 0
	};
	bool bAllowRightClickDragScrolling; 	//[Offset: 0x0, Size: 1]
	float WheelScrollMultiplier; 	//[Offset: 0x0, Size: 4]
	delegate OnUserScrolled; 	//[Offset: 0x0, Size: 16]
	delegate OnBeginInertialScrolling; 	//[Offset: 0x0, Size: 16]
	delegate OnEndInertialScrolling; 	//[Offset: 0x0, Size: 16]
	delegate OnBeginScrolling; 	//[Offset: 0x0, Size: 16]
	delegate OnEndScrolling; 	//[Offset: 0x0, Size: 16]
	delegate OnTouchBegan; 	//[Offset: 0x0, Size: 16]
	delegate OnTouchEnd; 	//[Offset: 0x0, Size: 16]
	bool bEnableWaterfallLayout; 	//[Offset: 0x0, Size: 1]
	int NumWaterfallColumn; 	//[Offset: 0x0, Size: 4]
	float WaterfallPandingWidth; 	//[Offset: 0x0, Size: 4]
	float WaterfallPandingHeight; 	//[Offset: 0x0, Size: 4]
	Void SetWheelScrollMultiplier(float NewWheelScrollMultiplier); //Addr 0x75ed497338 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d8d00
Class: ScrollBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902ac180
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetZOrder(int InZOrder); //Addr 0x75ed4996f8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0d8900
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902abf00
	float WidthOverride; 	//[Offset: 0x0, Size: 4]
	float HeightOverride; 	//[Offset: 0x0, Size: 4]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float MinDesiredHeight; 	//[Offset: 0x0, Size: 4]
	float MaxDesiredWidth; 	//[Offset: 0x0, Size: 4]
	float MaxDesiredHeight; 	//[Offset: 0x0, Size: 4]
	float MinAspectRatio; 	//[Offset: 0x0, Size: 4]
	float MaxAspectRatio; 	//[Offset: 0x0, Size: 4]
	bool bOverride_WidthOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_HeightOverride; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinDesiredHeight; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredWidth; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxDesiredHeight; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinAspectRatio; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxAspectRatio; 	//[Offset: 0x0, Size: 1]
	Void SetWidthOverride(float InWidthOverride); //Addr 0x75ed49a350 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dbb00
Class: SizeBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902abc80
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed49abc8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0db800
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902aba00
	structVector2D TransformVectorLocalToAbsolute(constoutrefstructGeometry Geometry, structVector2D LocalVector); //Addr 0x75ed49bea8 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0da700
Class: SlateVectorArtData.Object, Addr: 0x76902ab780
	structSlateMeshVertex[] VertexData; //[Offset: 0x0, Size: 16]
	uint32[] IndexData; //[Offset: 0x0, Size: 16]
	MaterialInterface* Material; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: SlateAccessibleWidgetData.Object, Addr: 0x76902ab500
	bool bCanChildrenBeAccessible; 	//[Offset: 0x0, Size: 1]
	enum ESlateAccessibleBehavior AccessibleBehavior { //[Offset: 0x0, Size: 1]
		NotAccessible = 0
		Auto = 0
		Summary = 0
		Custom = 0
		ToolTip = 0
		ESlateAccessibleBehavior_MAX = 0
	};
	enum ESlateAccessibleBehavior AccessibleSummaryBehavior { //[Offset: 0x0, Size: 1]
		NotAccessible = 0
		Auto = 0
		Summary = 0
		Custom = 0
		ToolTip = 0
		ESlateAccessibleBehavior_MAX = 0
	};
	FText AccessibleText; 	//[Offset: 0x0, Size: 24]
	delegate AccessibleTextDelegate; 	//[Offset: 0x0, Size: 20]
	FText AccessibleSummaryText; 	//[Offset: 0x0, Size: 24]
	delegate AccessibleSummaryTextDelegate; 	//[Offset: 0x0, Size: 20]
Class: Slider.Widget.Visual.Object, Addr: 0x76902ab280
	float Value; 	//[Offset: 0x0, Size: 4]
	delegate ValueDelegate; 	//[Offset: 0x0, Size: 20]
	float MinValue; 	//[Offset: 0x0, Size: 4]
	float MaxValue; 	//[Offset: 0x0, Size: 4]
	SliderStyle StructProperty; 	//[Offset: 0x0, Size: 880]
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	bool IndentHandle; 	//[Offset: 0x0, Size: 1]
	bool Locked; 	//[Offset: 0x0, Size: 1]
	bool MouseUsesStep; 	//[Offset: 0x0, Size: 1]
	bool RequiresControllerLock; 	//[Offset: 0x0, Size: 1]
	float StepSize; 	//[Offset: 0x0, Size: 4]
	bool IsFocusable; 	//[Offset: 0x0, Size: 1]
	delegate OnMouseCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnMouseCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureBegin; 	//[Offset: 0x0, Size: 16]
	delegate OnControllerCaptureEnd; 	//[Offset: 0x0, Size: 16]
	delegate OnValueChanged; 	//[Offset: 0x0, Size: 16]
	Void SetValue(float InValue); //Addr 0x75ed49def0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0ddf00
Class: Spacer.Widget.Visual.Object, Addr: 0x76902ab000
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Void SetSize(structVector2D InSize); //Addr 0x75ed49e5dc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dde00
Class: SpinBox.Widget.Visual.Object, Addr: 0x76902aad80
	float Value; 	//[Offset: 0x0, Size: 4]
	delegate ValueDelegate; 	//[Offset: 0x0, Size: 20]
	SpinBoxStyle StructProperty; 	//[Offset: 0x0, Size: 784]
	SlateWidgetStyleAsset* Style; 	//[Offset: 0x0, Size: 8]
	int MinFractionalDigits; 	//[Offset: 0x0, Size: 4]
	int MaxFractionalDigits; 	//[Offset: 0x0, Size: 4]
	bool bAlwaysUsesDeltaSnap; 	//[Offset: 0x0, Size: 1]
	float Delta; 	//[Offset: 0x0, Size: 4]
	float SliderExponent; 	//[Offset: 0x0, Size: 4]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	enum ETextJustify Justification { //[Offset: 0x0, Size: 1]
		Left = 0
		Center = 75006f00000000
		Right = 4d005f00000000
		ETextJustify_MAX = 7600000000
	};
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool ClearKeyboardFocusOnCommit; 	//[Offset: 0x0, Size: 1]
	bool SelectAllTextOnCommit; 	//[Offset: 0x0, Size: 1]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	delegate OnValueChanged; 	//[Offset: 0x0, Size: 16]
	delegate OnValueCommitted; 	//[Offset: 0x0, Size: 16]
	delegate OnBeginSliderMovement; 	//[Offset: 0x0, Size: 16]
	delegate OnEndSliderMovement; 	//[Offset: 0x0, Size: 16]
	bool bOverride_MinValue; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxValue; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MinSliderValue; 	//[Offset: 0x0, Size: 1]
	bool bOverride_MaxSliderValue; 	//[Offset: 0x0, Size: 1]
	float MinValue; 	//[Offset: 0x0, Size: 4]
	float MaxValue; 	//[Offset: 0x0, Size: 4]
	float MinSliderValue; 	//[Offset: 0x0, Size: 4]
	float MaxSliderValue; 	//[Offset: 0x0, Size: 4]
	Void SetValue(float NewValue); //Addr 0x75ed49f360 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b135c900
Class: TextBinding.PropertyBinding.Object, Addr: 0x76902aab00
	FText GetTextValue(); //Addr 0x75ed4a1470 [Final|Native|Const] // UFieldProperty addr: 0x75ac0ddc00
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object, Addr: 0x76902aa880
	FText Text; 	//[Offset: 0x0, Size: 24]
	FText TextID; 	//[Offset: 0x0, Size: 24]
	delegate TextDelegate; 	//[Offset: 0x0, Size: 20]
	delegate TextIDDelegate; 	//[Offset: 0x0, Size: 20]
	SlateColor StructProperty; 	//[Offset: 0x0, Size: 40]
	delegate ColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	SlateFontInfo StructProperty; 	//[Offset: 0x0, Size: 88]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	delegate ShadowColorAndOpacityDelegate; 	//[Offset: 0x0, Size: 20]
	float MinDesiredWidth; 	//[Offset: 0x0, Size: 4]
	bool bWrapWithInvalidationPanel; 	//[Offset: 0x0, Size: 1]
	bool bAutoWrapText; 	//[Offset: 0x0, Size: 1]
	enum ETextTransformPolicy TextTransformPolicy { //[Offset: 0x0, Size: 1]
		None = 0
		ToLower = 65007000000000
		ToUpper = 74007200000000
		ETextTransformPolicy_MAX = 7500000000
	};
	bool bSimpleTextMode; 	//[Offset: 0x0, Size: 1]
	bool bRestrictText; 	//[Offset: 0x0, Size: 1]
	FText ReplaceText; 	//[Offset: 0x0, Size: 24]
	int8 MaxRestrictLineNum; 	//[Offset: 0x0, Size: 1]
	float MaxWidth; 	//[Offset: 0x0, Size: 4]
	Void SetWrapTextAt(float InWrapTextAt); //Addr 0x75ed4a2034 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dc900
Class: Throbber.Widget.Visual.Object, Addr: 0x76902aa600
	int NumberOfPieces; 	//[Offset: 0x0, Size: 4]
	bool bAnimateHorizontally; 	//[Offset: 0x0, Size: 1]
	bool bAnimateVertically; 	//[Offset: 0x0, Size: 1]
	bool bAnimateOpacity; 	//[Offset: 0x0, Size: 1]
	SlateBrushAsset* PieceImage; 	//[Offset: 0x0, Size: 8]
	SlateBrush StructProperty; 	//[Offset: 0x0, Size: 144]
	Void SetNumberOfPieces(int InNumberOfPieces); //Addr 0x75ed4a3b58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dfe00
Class: TileView.ListView.ListViewBase.Widget.Visual.Object, Addr: 0x76902afd80
	float EntryHeight; 	//[Offset: 0x0, Size: 4]
	float EntryWidth; 	//[Offset: 0x0, Size: 4]
	enum EListItemAlignment TileAlignment { //[Offset: 0x0, Size: 1]
		EvenlyDistributed = 0
		EvenlySize = 75006c00000000
		EvenlyWide = 6c004200000000
		LeftAligned = 75005300000000
		RightAligned = 6f004300000000
		CenterAligned = 76006500000000
		Fill = 65007a00000000
		EListItemAlignment_MAX = 0
	};
	bool bWrapHorizontalNavigation; 	//[Offset: 0x0, Size: 1]
	Void SetEntryWidth(float NewWidth); //Addr 0x75ed4a4040 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dfa00
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object, Addr: 0x76902afb00
	delegate BP_OnGetItemChildren; 	//[Offset: 0x0, Size: 20]
	delegate BP_OnItemExpansionChanged; 	//[Offset: 0x0, Size: 16]
	Void SetItemExpansion(Object* Item, bool bExpandItem); //Addr 0x75ed4a4628 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0df700
Class: UMGSequencePlayer.Object, Addr: 0x76902af880
	WidgetAnimation* Animation; 	//[Offset: 0x0, Size: 8]
	MovieSceneRootEvaluationTemplateInstance StructProperty; 	//[Offset: 0x0, Size: 232]
	Void SetUserTag(FName InUserTag); //Addr 0x75ed4a4b88 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0df500
Class: UMGSequenceTickManager.Object, Addr: 0x76902b5100
	UserWidget* WeakUserWidgets; //[Offset: 0x0, Size: 80]
	MovieSceneEntitySystemLinker* Linker; 	//[Offset: 0x0, Size: 8]
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object, Addr: 0x76902b4e80
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	float MinDesiredSlotWidth; 	//[Offset: 0x0, Size: 4]
	float MinDesiredSlotHeight; 	//[Offset: 0x0, Size: 4]
	Void SetSlotPadding(structMargin InSlotPadding); //Addr 0x75ed4a560c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0df100
Class: UniformGridSlot.PanelSlot.Visual.Object, Addr: 0x76902b4c00
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	int Row; 	//[Offset: 0x0, Size: 4]
	int Column; 	//[Offset: 0x0, Size: 4]
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4a5b34 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0ded00
Class: VerticalBox.PanelWidget.Widget.Visual.Object, Addr: 0x76902b4980
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content); //Addr 0x75ed4b13e0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0dec00
Class: VerticalBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902b4700
	SlateChildSize StructProperty; 	//[Offset: 0x0, Size: 8]
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4b18e8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0de800
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902b4480
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	Actor* Spawn(classActor ActorClass); //Addr 0x75ed4b1f58 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f1c00
Class: VisibilityBinding.PropertyBinding.Object, Addr: 0x76902b4200
	enum ESlateVisibility GetValue(); //Addr 0x75ed4b2654 [Final|Native|Const] // UFieldProperty addr: 0x75ac0f1b00
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object, Addr: 0x76902b3f80
	MovieScene* MovieScene; 	//[Offset: 0x0, Size: 8]
	structWidgetAnimationBinding[] AnimationBindings; //[Offset: 0x0, Size: 16]
	bool bLegacyFinishOnStop; 	//[Offset: 0x0, Size: 1]
	StrProperty DisplayLabel; 	//[Offset: 0x0, Size: 16]
	Void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate); //Addr 0x75ed4b6590 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f1300
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object, Addr: 0x76902b3d00
	structBlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings; //[Offset: 0x0, Size: 16]
Class: WidgetAnimationPlayCallbackProxy.Object, Addr: 0x76902b3800
	delegate finished; 	//[Offset: 0x0, Size: 16]
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(outUMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, PlayMode(ByteProperty) PlayMode, float PlaybackSpeed); //Addr 0x75ed4b7efc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f1100
Class: WidgetBinding.PropertyBinding.Object, Addr: 0x76902b3580
	Widget* GetValue(); //Addr 0x75ed4b87e8 [Final|Native|Const] // UFieldProperty addr: 0x75ac0f1000
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object, Addr: 0x76902b3300
	WidgetTree* WidgetTree; 	//[Offset: 0x0, Size: 8]
	bool bClassRequiresNativeTick; 	//[Offset: 0x0, Size: 1]
	structDelegateRuntimeBinding[] Bindings; //[Offset: 0x0, Size: 16]
	WidgetAnimation*[] Animations; //[Offset: 0x0, Size: 16]
	FName[] NamedSlots; //[Offset: 0x0, Size: 16]
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902b3080
	structEventReply UnlockMouse(outrefstructEventReply Reply); //Addr 0x75ed4bc77c [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75b1353f00
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902b2e00
	enum EWidgetSpace Space { //[Offset: 0x0, Size: 1]
		World = 0
		Screen = 41004d00000000
		EWidgetSpace_MAX = 0
	};
	enum EWidgetTimingPolicy TimingPolicy { //[Offset: 0x0, Size: 1]
		RealTime = 0
		GameTime = 41004d00000000
		EWidgetTimingPolicy_MAX = 0
	};
	UserWidget* WidgetClass; 	//[Offset: 0x0, Size: 8]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bManuallyRedraw; 	//[Offset: 0x0, Size: 1]
	bool bHighPriorityDraw; 	//[Offset: 0x0, Size: 1]
	bool bRedrawRequested; 	//[Offset: 0x0, Size: 1]
	float RedrawTime; 	//[Offset: 0x0, Size: 4]
	bool bAutoGenMips; 	//[Offset: 0x0, Size: 1]
	IntPoint StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bDrawAtDesiredSize; 	//[Offset: 0x0, Size: 1]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bReceiveHardwareInput; 	//[Offset: 0x0, Size: 1]
	bool bWindowFocusable; 	//[Offset: 0x0, Size: 1]
	enum EWindowVisibility WindowVisibility { //[Offset: 0x0, Size: 1]
		Visible = 0
		SelfHitTestInvisible = 64006f00000000
		EWindowVisibility_MAX = 0
	};
	bool bApplyGammaCorrection; 	//[Offset: 0x0, Size: 1]
	LocalPlayer* OwnerPlayer; 	//[Offset: 0x0, Size: 8]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float OpacityFromTexture; 	//[Offset: 0x0, Size: 4]
	enum EWidgetBlendMode BlendMode { //[Offset: 0x0, Size: 1]
		Opaque = 0
		Masked = 53003a00000000
		Transparent = 6e004900000000
		EWidgetBlendMode_MAX = 0
	};
	bool bIsTwoSided; 	//[Offset: 0x0, Size: 1]
	bool TickWhenOffscreen; 	//[Offset: 0x0, Size: 1]
	BodySetup* BodySetup; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* TranslucentMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* TranslucentMaterial_OneSided; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* OpaqueMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* OpaqueMaterial_OneSided; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* MaskedMaterial; 	//[Offset: 0x0, Size: 8]
	MaterialInterface* MaskedMaterial_OneSided; 	//[Offset: 0x0, Size: 8]
	TextureRenderTarget2D* RenderTarget; 	//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* MaterialInstance; 	//[Offset: 0x0, Size: 8]
	bool bAddedToScreen; 	//[Offset: 0x0, Size: 1]
	bool bEditTimeUsable; 	//[Offset: 0x0, Size: 1]
	FName SharedLayerName; 	//[Offset: 0x0, Size: 12]
	int LayerZOrder; 	//[Offset: 0x0, Size: 4]
	enum EWidgetGeometryMode GeometryMode { //[Offset: 0x0, Size: 1]
		Plane = 0
		Cylinder = 64006f00000000
		EWidgetGeometryMode_MAX = 0
	};
	float CylinderArcAngle; 	//[Offset: 0x0, Size: 4]
	enum ETickMode TickMode { //[Offset: 0x0, Size: 1]
		Disabled = 0
		Enabled = 3a003a00000000
		Automatic = 6f004300000000
		ETickMode_MAX = 0
	};
	UserWidget* Widget; 	//[Offset: 0x0, Size: 8]
	Void SetWindowVisibility(enum EWindowVisibility InVisibility); //Addr 0x75ed4c09c8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f2c00
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object, Addr: 0x76902b2b80
	delegate OnHoveredWidgetChanged; 	//[Offset: 0x0, Size: 16]
	int VirtualUserIndex; 	//[Offset: 0x0, Size: 4]
	int PointerIndex; 	//[Offset: 0x0, Size: 4]
	enum ECollisionChannel TraceChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	float InteractionDistance; 	//[Offset: 0x0, Size: 4]
	enum EWidgetInteractionSource InteractionSource { //[Offset: 0x0, Size: 1]
		World = 0
		Mouse = 3a007900000000
		CenterScreen = 69006d00000000
		Custom = 58004100000000
		EWidgetInteractionSource_MAX = 0
	};
	bool bEnableHitTesting; 	//[Offset: 0x0, Size: 1]
	bool bShowDebug; 	//[Offset: 0x0, Size: 1]
	float DebugSphereLineThickness; 	//[Offset: 0x0, Size: 4]
	float DebugLineThickness; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	HitResult StructProperty; 	//[Offset: 0x0, Size: 160]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	WidgetComponent* HoveredWidgetComponent; 	//[Offset: 0x0, Size: 8]
	HitResult StructProperty; 	//[Offset: 0x0, Size: 160]
	bool bIsHoveredWidgetInteractable; 	//[Offset: 0x0, Size: 1]
	bool bIsHoveredWidgetFocusable; 	//[Offset: 0x0, Size: 1]
	bool bIsHoveredWidgetHitTestVisible; 	//[Offset: 0x0, Size: 1]
	Void SetFocus(Widget* FocusWidget); //Addr 0x75ed4c2898 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f5f00
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902b2900
	WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget); //Addr 0x75ed4c3efc [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0f4900
Class: WidgetNavigation.Object, Addr: 0x76902b2680
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
	WidgetNavigationData StructProperty; 	//[Offset: 0x0, Size: 44]
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object, Addr: 0x76902b2400
	int ActiveWidgetIndex; 	//[Offset: 0x0, Size: 4]
	Void SetActiveWidgetIndex(int Index); //Addr 0x75ed4c6754 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f4300
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object, Addr: 0x76902b2180
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4c6cc4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f8200
Class: WidgetTree.Object, Addr: 0x76902b1f00
	Widget* RootWidget; 	//[Offset: 0x0, Size: 8]
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object, Addr: 0x76902b1c80
	bool bWindowButtonsEnabled; 	//[Offset: 0x0, Size: 1]
	bool bDoubleClickTogglesFullscreen; 	//[Offset: 0x0, Size: 1]
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4c7648 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f7f00
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object, Addr: 0x76902b1a00
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4c7bd0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f7c00
Class: WrapBox.PanelWidget.Widget.Visual.Object, Addr: 0x76902b1780
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	float WrapWidth; 	//[Offset: 0x0, Size: 4]
	float WrapSize; 	//[Offset: 0x0, Size: 4]
	bool bExplicitWrapWidth; 	//[Offset: 0x0, Size: 1]
	bool bExplicitWrapSize; 	//[Offset: 0x0, Size: 1]
	enum EOrientation Orientation { //[Offset: 0x0, Size: 1]
		Orient_Horizontal = 0
		Orient_Vertical = 6c000000000000
		Orient_MAX = 800000000
	};
	Void SetWrapSize(float InWrapSize); //Addr 0x75ed4c81f0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f7900
Class: WrapBoxSlot.PanelSlot.Visual.Object, Addr: 0x76902b1500
	Margin StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bFillEmptySpace; 	//[Offset: 0x0, Size: 1]
	float FillSpanWhenLessThan; 	//[Offset: 0x0, Size: 4]
	enum EHorizontalAlignment HorizontalAlignment { //[Offset: 0x0, Size: 1]
		HAlign_Fill = 0
		HAlign_Left = 3a003a00000000
		HAlign_Center = 61006400000000
		HAlign_Right = 58000000000000
		HAlign_MAX = 0
	};
	enum EVerticalAlignment VerticalAlignment { //[Offset: 0x0, Size: 1]
		VAlign_Fill = 0
		VAlign_Top = 79006300000000
		VAlign_Center = 73006e00000000
		VAlign_Bottom = 4d005f00000000
		VAlign_MAX = 0
	};
	Void SetVerticalAlignment(InVerticalAlignment(ByteProperty) InVerticalAlignment); //Addr 0x75ed4c8784 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0f7400
Class: CameraRig_Crane.Actor.Object, Addr: 0x76902b1280
	float CranePitch; 	//[Offset: 0x0, Size: 4]
	float CraneYaw; 	//[Offset: 0x0, Size: 4]
	float CraneArmLength; 	//[Offset: 0x0, Size: 4]
	bool bLockMountPitch; 	//[Offset: 0x0, Size: 1]
	bool bLockMountYaw; 	//[Offset: 0x0, Size: 1]
	SceneComponent* TransformComponent; 	//[Offset: 0x0, Size: 8]
	SceneComponent* CraneYawControl; 	//[Offset: 0x0, Size: 8]
	SceneComponent* CranePitchControl; 	//[Offset: 0x0, Size: 8]
	SceneComponent* CraneCameraMount; 	//[Offset: 0x0, Size: 8]
Class: CameraRig_Rail.Actor.Object, Addr: 0x76902b1000
	float CurrentPositionOnRail; 	//[Offset: 0x0, Size: 4]
	bool bLockOrientationToRail; 	//[Offset: 0x0, Size: 1]
	SceneComponent* TransformComponent; 	//[Offset: 0x0, Size: 8]
	SplineComponent* RailSplineComponent; 	//[Offset: 0x0, Size: 8]
	SceneComponent* RailCameraMount; 	//[Offset: 0x0, Size: 8]
	SplineComponent* GetRailSplineComponent(); //Addr 0x75ed4cca1c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0f7300
Class: NetAnalyticsAggregatorConfig.Object, Addr: 0x76902b0880
	structNetAnalyticsDataConfig[] NetAnalyticsData; //[Offset: 0x0, Size: 16]
Class: AssetRegistryHelpers.Object, Addr: 0x76902b0380
	structSoftObjectPath ToSoftObjectPath(constoutrefstructAssetData InAssetData); //Addr 0x75ed548140 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75ac0f9100
Class: AssetRegistry.Interface.Object, Addr: 0x76902b0100
	Void WaitForCompletion(); //Addr 0x75ed5493a0 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac0fbe00
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902ba380
	bool RemoveGameplayTag(outrefstructGameplayTagContainer TagContainer, structGameplayTag Tag); //Addr 0x75ed561824 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac0fe200
Class: GameplayTagAssetInterface.Interface.Object, Addr: 0x76902ba100
	bool HasMatchingGameplayTag(structGameplayTag TagToCheck); //Addr 0x75ed563a1c [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac0fde00
Class: EditableGameplayTagQuery.Object, Addr: 0x76902b9e80
	StrProperty UserDescription; 	//[Offset: 0x0, Size: 16]
	EditableGameplayTagQueryExpression* RootExpression; 	//[Offset: 0x0, Size: 8]
	GameplayTagQuery StructProperty; 	//[Offset: 0x0, Size: 72]
Class: EditableGameplayTagQueryExpression.Object, Addr: 0x76902b9c00
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b9980
	GameplayTagContainer StructProperty; 	//[Offset: 0x0, Size: 32]
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b9700
	GameplayTagContainer StructProperty; 	//[Offset: 0x0, Size: 32]
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b9480
	GameplayTagContainer StructProperty; 	//[Offset: 0x0, Size: 32]
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b9200
	EditableGameplayTagQueryExpression*[] Expressions; //[Offset: 0x0, Size: 16]
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b8f80
	EditableGameplayTagQueryExpression*[] Expressions; //[Offset: 0x0, Size: 16]
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object, Addr: 0x76902b8d00
	EditableGameplayTagQueryExpression*[] Expressions; //[Offset: 0x0, Size: 16]
Class: GameplayTagsManager.Object, Addr: 0x76902b8a80
	structGameplayTagSource[] TagSources; //[Offset: 0x0, Size: 16]
	DataTable*[] GameplayTagTables; //[Offset: 0x0, Size: 16]
Class: GameplayTagsList.Object, Addr: 0x76902b8800
	StrProperty ConfigFileName; 	//[Offset: 0x0, Size: 16]
	structGameplayTagTableRow[] GameplayTagList; //[Offset: 0x0, Size: 16]
Class: RestrictedGameplayTagsList.Object, Addr: 0x76902b8580
	StrProperty ConfigFileName; 	//[Offset: 0x0, Size: 16]
	structRestrictedGameplayTagTableRow[] RestrictedGameplayTagList; //[Offset: 0x0, Size: 16]
Class: GameplayTagsSettings.GameplayTagsList.Object, Addr: 0x76902b8300
	bool ImportTagsFromConfig; 	//[Offset: 0x0, Size: 1]
	bool WarnOnInvalidTags; 	//[Offset: 0x0, Size: 1]
	bool FastReplication; 	//[Offset: 0x0, Size: 1]
	StrProperty InvalidTagCharacters; 	//[Offset: 0x0, Size: 16]
	structGameplayTagCategoryRemap[] CategoryRemapping; //[Offset: 0x0, Size: 16]
	structSoftObjectPath[] GameplayTagTableList; //[Offset: 0x0, Size: 16]
	structGameplayTagRedirect[] GameplayTagRedirects; //[Offset: 0x0, Size: 16]
	FName[] CommonlyReplicatedTags; //[Offset: 0x0, Size: 16]
	int NumBitsForContainerSize; 	//[Offset: 0x0, Size: 4]
	int NetIndexFirstBitSegment; 	//[Offset: 0x0, Size: 4]
	structRestrictedConfigInfo[] RestrictedConfigFiles; //[Offset: 0x0, Size: 16]
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object, Addr: 0x76902b8080
	StrProperty DeveloperConfigName; 	//[Offset: 0x0, Size: 16]
	FName FavoriteTagSource; 	//[Offset: 0x0, Size: 12]
Class: PacketHandlerProfileConfig.Object, Addr: 0x76902b7b80
	FString[] Components; //[Offset: 0x0, Size: 16]
Class: MeshDescription.Object, Addr: 0x76902b7900
Class: MeshDescriptionBase.Object, Addr: 0x76902b7680
	Void SetVertexPosition(structVertexID VertexID, constoutrefstructVector position); //Addr 0x75ed588cd4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac113c00
Class: StaticMeshDescription.MeshDescriptionBase.Object, Addr: 0x76902b7400
	Void SetVertexInstanceUV(structVertexInstanceID VertexInstanceID, structVector2D UV, int UVIndex); //Addr 0x75ed59cc20 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac113800
Class: PropertyAccess.Interface.Object, Addr: 0x76902b7180
Class: PropertyEventBroadcaster.Interface.Object, Addr: 0x76902b6f00
Class: PropertyEventSubscriber.Interface.Object, Addr: 0x76902b6c80
Class: ClothSharedSimConfigBase.Object, Addr: 0x76902b6a00
Class: ClothingAssetBase.Object, Addr: 0x76902b6780
	StrProperty ImportedFilePath; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ClothPhysicalMeshDataBase_Legacy.Object, Addr: 0x76902b6500
	structVector[] Vertices; //[Offset: 0x0, Size: 16]
	structVector[] Normals; //[Offset: 0x0, Size: 16]
	uint32[] Indices; //[Offset: 0x0, Size: 16]
	float[] InverseMasses; //[Offset: 0x0, Size: 16]
	structClothVertBoneData[] BoneData; //[Offset: 0x0, Size: 16]
	int NumFixedVerts; 	//[Offset: 0x0, Size: 4]
	int MaxBoneWeights; 	//[Offset: 0x0, Size: 4]
	uint32[] SelfCollisionIndices; //[Offset: 0x0, Size: 16]
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76902b6280
	Void SetEyeTrackedPlayer(PlayerController* PlayerController); //Addr 0x75ed5d24bc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac113300
Class: JsonUtilitiesDummyObject.Object, Addr: 0x76902b6000
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object, Addr: 0x76902b5d80
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
Class: DefaultLevelSequenceInstanceData.Object, Addr: 0x76902b5b00
	Actor* TransformOriginActor; 	//[Offset: 0x0, Size: 8]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: LevelSequenceMetaData.Interface.Object, Addr: 0x76902b5880
Class: LevelSequenceBurnInInitSettings.Object, Addr: 0x76902b5600
Class: LevelSequenceBurnInOptions.Object, Addr: 0x76902b5380
	bool bUseBurnIn; 	//[Offset: 0x0, Size: 1]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	LevelSequenceBurnInInitSettings* Settings; 	//[Offset: 0x0, Size: 8]
	Void SetBurnIn(structSoftClassPath InBurnInClass); //Addr 0x75ed5e74cc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac113200
Class: LevelSequenceActor.Actor.Object, Addr: 0x76902bf600
	MovieSceneSequencePlaybackSettings StructProperty; 	//[Offset: 0x0, Size: 20]
	LevelSequencePlayer* SequencePlayer; 	//[Offset: 0x0, Size: 8]
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	LevelSequenceCameraSettings StructProperty; 	//[Offset: 0x0, Size: 2]
	LevelSequenceBurnInOptions* BurnInOptions; 	//[Offset: 0x0, Size: 8]
	MovieSceneBindingOverrides* BindingOverrides; 	//[Offset: 0x0, Size: 8]
	bool bAutoPlay; 	//[Offset: 0x0, Size: 1]
	bool bOverrideInstanceData; 	//[Offset: 0x0, Size: 1]
	bool bReplicatePlayback; 	//[Offset: 0x0, Size: 1]
	Object* DefaultInstanceData; 	//[Offset: 0x0, Size: 8]
	LevelSequenceBurnIn* BurnInInstance; 	//[Offset: 0x0, Size: 8]
	bool bShowBurnin; 	//[Offset: 0x0, Size: 1]
	Void ShowBurnin(); //Addr 0x75ed5e83d4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0ea5500
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object, Addr: 0x76902be480
	delegate OnCameraCut; 	//[Offset: 0x0, Size: 16]
	CameraComponent* GetActiveCameraComponent(); //Addr 0x75ed5ea3f0 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac112d00
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object, Addr: 0x76902bf380
	structLevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks; //[Offset: 0x0, Size: 16]
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object, Addr: 0x76902bf100
	LevelSequencePlayerSnapshot StructProperty; 	//[Offset: 0x0, Size: 192]
	LevelSequenceActor* LevelSequenceActor; 	//[Offset: 0x0, Size: 8]
	Void SetSettings(Object* InSettings); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac113000
Class: LevelSequenceDirector.Object, Addr: 0x76902bee80
	LevelSequencePlayer* Player; 	//[Offset: 0x0, Size: 8]
	Void OnCreated(); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75ac112f00
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object, Addr: 0x76902bec00
Class: LevelSequenceMediaController.Actor.Object, Addr: 0x76902be200
	LevelSequenceActor* Sequence; 	//[Offset: 0x0, Size: 8]
	MediaComponent* MediaComponent; 	//[Offset: 0x0, Size: 8]
	float ServerStartTimeSeconds; 	//[Offset: 0x3e9f6, Size: 4]
	Void SynchronizeToServer(float DesyncThresholdSeconds); //Addr 0x75ed5ea918 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac112800
Class: MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bda80
	enum EMovieSceneCaptureProtocolState State { //[Offset: 0x0, Size: 1]
		Idle = 0
		Initialized = 61004300000000
		Capturing = 61004300000000
		Finalizing = 69000000000000
		EMovieSceneCaptureProtocolState_MAX = 0
	};
	bool IsCapturing(); //Addr 0x75ed60349c [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75ac112600
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bdd00
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bdf80
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bd800
	StrProperty Filename; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bd300
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bd580
	CompositionGraphCapturePasses StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bCaptureFramesInHDR; 	//[Offset: 0x0, Size: 1]
	int HDRCompressionQuality; 	//[Offset: 0x0, Size: 4]
	enum EHDRCaptureGamut CaptureGamut { //[Offset: 0x0, Size: 1]
		HCGM_Rec709 = 0
		HCGM_P3DCI = 46007900000000
		HCGM_Rec2020 = 44006e00000000
		HCGM_ACES = 65006d00000000
		HCGM_ACEScg = 67006e00000000
		HCGM_Linear = 0
		HCGM_MAX = 0
	};
	SoftObjectPath StructProperty; 	//[Offset: 0x0, Size: 32]
	bool bDisableScreenPercentage; 	//[Offset: 0x0, Size: 1]
	MaterialInterface* PostProcessingMaterialPtr; 	//[Offset: 0x0, Size: 8]
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bd080
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bce00
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bcb80
	int CompressionQuality; 	//[Offset: 0x0, Size: 4]
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bc900
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bc680
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bc400
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bc180
	bool bCompressed; 	//[Offset: 0x0, Size: 1]
	enum EHDRCaptureGamut CaptureGamut { //[Offset: 0x0, Size: 1]
		HCGM_Rec709 = 0
		HCGM_P3DCI = 46007900000000
		HCGM_Rec2020 = 44006e00000000
		HCGM_ACES = 65006d00000000
		HCGM_ACEScg = 67006e00000000
		HCGM_Linear = 0
		HCGM_MAX = 0
	};
Class: MovieSceneCaptureInterface.Interface.Object, Addr: 0x76902bbf00
Class: MovieSceneCapture.Object, Addr: 0x76902bba00
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol; 	//[Offset: 0x0, Size: 8]
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol; 	//[Offset: 0x0, Size: 8]
	MovieSceneCaptureSettings StructProperty; 	//[Offset: 0x0, Size: 112]
	bool bUseSeparateProcess; 	//[Offset: 0x0, Size: 1]
	bool bCloseEditorWhenCaptureStarts; 	//[Offset: 0x0, Size: 1]
	StrProperty AdditionalCommandLineArguments; 	//[Offset: 0x0, Size: 16]
	StrProperty InheritedCommandLineArguments; 	//[Offset: 0x0, Size: 16]
	Void SetImageCaptureProtocolType(classMovieSceneCaptureProtocolBase ProtocolType); //Addr 0x75ed602840 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac112200
Class: LevelCapture.MovieSceneCapture.Object, Addr: 0x76902bbc80
	bool bAutoStartCapture; 	//[Offset: 0x0, Size: 1]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: MovieSceneCaptureEnvironment.Object, Addr: 0x76902bb780
	bool IsCaptureInProgress(); //Addr 0x75ed602ed4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75ac115f00
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bb500
	World* World; 	//[Offset: 0x0, Size: 8]
	Void StopCapturingFinalPixels(); //Addr 0x75ed603f6c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac114f00
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bb280
	enum EDesiredImageFormat Format { //[Offset: 0x0, Size: 1]
		PNG = 0
		JPG = 75005100000000
		BMP = 64006500000000
		EXR = 7400000000
		EDesiredImageFormat_MAX = 0
	};
	bool bEnableCompression; 	//[Offset: 0x0, Size: 1]
	int CompressionQuality; 	//[Offset: 0x0, Size: 4]
	Void WriteImageToDisk(constoutrefstructCapturedPixels PixelData, constoutrefstructCapturedPixelsID StreamID, constoutrefstructFrameMetrics FrameMetrics, bool bCopyImageData); //Addr 0x75ed604efc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75ac114c00
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object, Addr: 0x76902bb000
	bool bUseCompression; 	//[Offset: 0x0, Size: 1]
	float CompressionQuality; 	//[Offset: 0x0, Size: 4]
Class: MoviePlayerSettings.Object, Addr: 0x76902bad80
	bool bWaitForMoviesToComplete; 	//[Offset: 0x0, Size: 1]
	bool bMoviesAreSkippable; 	//[Offset: 0x0, Size: 1]
	FString[] StartupMovies; //[Offset: 0x0, Size: 16]
Class: Overlays.Object, Addr: 0x76903a3580
Class: BasicOverlays.Overlays.Object, Addr: 0x76903a3800
	structOverlayItem[] Overlays; //[Offset: 0x0, Size: 16]
	double GetItemStartTime(structOverlayItem Item); //Addr 0x75ee254f68 [Final|Native|Static] // UFieldProperty addr: 0x75abbf3800
Class: LocalizedOverlays.Overlays.Object, Addr: 0x76903a3300
	BasicOverlays* DefaultOverlays; 	//[Offset: 0x0, Size: 8]
	<FString, BasicOverlays*> LocaleToOverlaysMap; //[Offset: 0x0, Size: 80]
Class: BuildPatchManifest.Object, Addr: 0x76903a3080
	byte ManifestFileVersion; //[Offset: 0x0, Size: 1]
	bool bIsFileData; 	//[Offset: 0x0, Size: 1]
	uint32 AppID; 	//[Offset: 0x0, Size: 4]
	StrProperty AppName; 	//[Offset: 0x0, Size: 16]
	StrProperty BuildVersion; 	//[Offset: 0x0, Size: 16]
	StrProperty LaunchExe; 	//[Offset: 0x0, Size: 16]
	StrProperty LaunchCommand; 	//[Offset: 0x0, Size: 16]
	FString PrereqIds; //[Offset: 0x0, Size: 80]
	StrProperty PrereqName; 	//[Offset: 0x0, Size: 16]
	StrProperty PrereqPath; 	//[Offset: 0x0, Size: 16]
	StrProperty PrereqArgs; 	//[Offset: 0x0, Size: 16]
	structFileManifestData[] FileManifestList; //[Offset: 0x0, Size: 16]
	structChunkInfoData[] ChunkList; //[Offset: 0x0, Size: 16]
	structCustomFieldData[] CustomFields; //[Offset: 0x0, Size: 16]
Class: ClothingAssetCustomData.Object, Addr: 0x76903a2e00
Class: ClothingAssetCommon.ClothingAssetBase.Object, Addr: 0x76903a2b80
	PhysicsAsset* PhysicsAsset; 	//[Offset: 0x0, Size: 8]
	<FName, ClothConfigBase*> ClothConfigs; //[Offset: 0x0, Size: 80]
	ClothConfigBase* ClothSharedSimConfig; 	//[Offset: 0x0, Size: 8]
	ClothConfigBase* ClothSimConfig; 	//[Offset: 0x0, Size: 8]
	ClothConfigBase* ChaosClothSimConfig; 	//[Offset: 0x0, Size: 8]
	ClothLODDataCommon_Legacy*[] ClothLODData; //[Offset: 0x0, Size: 16]
	structClothLODDataCommon[] LODData; //[Offset: 0x0, Size: 16]
	int[] LodMap; //[Offset: 0x0, Size: 16]
	FName[] UsedBoneNames; //[Offset: 0x0, Size: 16]
	int[] UsedBoneIndices; //[Offset: 0x0, Size: 16]
	int ReferenceBoneIndex; 	//[Offset: 0x0, Size: 4]
	ClothingAssetCustomData* CustomData; 	//[Offset: 0x0, Size: 8]
	ClothConfig_Legacy StructProperty; 	//[Offset: 0x0, Size: 212]
Class: ClothLODDataCommon_Legacy.Object, Addr: 0x76903a2900
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData; 	//[Offset: 0x0, Size: 8]
	ClothPhysicalMeshData StructProperty; 	//[Offset: 0x0, Size: 248]
	ClothCollisionData StructProperty; 	//[Offset: 0x0, Size: 64]
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object, Addr: 0x76903a2680
	enum EClothingWindMethodNv ClothingWindMethod { //[Offset: 0x0, Size: 1]
		Legacy = 0
		Accurate = 6500000000
		EClothingWindMethodNv_MAX = 0
	};
	ClothConstraintSetupNv StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetupNv StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetupNv StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetupNv StructProperty; 	//[Offset: 0x0, Size: 16]
	float SelfCollisionRadius; 	//[Offset: 0x0, Size: 4]
	float SelfCollisionStiffness; 	//[Offset: 0x0, Size: 4]
	float SelfCollisionCullScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Friction; 	//[Offset: 0x0, Size: 4]
	float WindDragCoefficient; 	//[Offset: 0x0, Size: 4]
	float WindLiftCoefficient; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float SolverFrequency; 	//[Offset: 0x0, Size: 4]
	float StiffnessFrequency; 	//[Offset: 0x0, Size: 4]
	float GravityScale; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bUseGravityOverride; 	//[Offset: 0x0, Size: 1]
	float TetherStiffness; 	//[Offset: 0x0, Size: 4]
	float TetherLimit; 	//[Offset: 0x0, Size: 4]
	float CollisionThickness; 	//[Offset: 0x0, Size: 4]
	float AnimDriveSpringStiffness; 	//[Offset: 0x0, Size: 4]
	float AnimDriveDamperStiffness; 	//[Offset: 0x0, Size: 4]
	enum EClothingWindMethod_Legacy WindMethod { //[Offset: 0x0, Size: 1]
		Legacy = 0
		Accurate = 6500000000
		EClothingWindMethod_MAX = 0
	};
	ClothConstraintSetup_Legacy StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetup_Legacy StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetup_Legacy StructProperty; 	//[Offset: 0x0, Size: 16]
	ClothConstraintSetup_Legacy StructProperty; 	//[Offset: 0x0, Size: 16]
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object, Addr: 0x76903a2400
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object, Addr: 0x76903a2180
	Void SetAnimDriveDamperStiffness(float InStiffness); //Addr 0x75ee349a68 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf3700
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object, Addr: 0x76903a1f00
	float[] MaxDistances; //[Offset: 0x0, Size: 16]
	float[] BackstopDistances; //[Offset: 0x0, Size: 16]
	float[] BackstopRadiuses; //[Offset: 0x0, Size: 16]
	float[] AnimDriveMultipliers; //[Offset: 0x0, Size: 16]
Class: AndroidRuntimeSettings.Object, Addr: 0x76903a1c80
	StrProperty PackageName; 	//[Offset: 0x0, Size: 16]
	int StoreVersion; 	//[Offset: 0x0, Size: 4]
	int StoreVersionOffsetArmV7; 	//[Offset: 0x0, Size: 4]
	int StoreVersionOffsetArm64; 	//[Offset: 0x0, Size: 4]
	int StoreVersionOffsetX8664; 	//[Offset: 0x0, Size: 4]
	StrProperty ApplicationDisplayName; 	//[Offset: 0x0, Size: 16]
	StrProperty VersionDisplayName; 	//[Offset: 0x0, Size: 16]
	int MinSDKVersion; 	//[Offset: 0x0, Size: 4]
	int TargetSDKVersion; 	//[Offset: 0x0, Size: 4]
	enum EAndroidInstallLocation InstallLocation { //[Offset: 0x0, Size: 1]
		InternalOnly = 0
		PreferExternal = 67006f00000000
		Auto = 58004100000000
		EAndroidInstallLocation_MAX = 0
	};
	bool bEnableGradle; 	//[Offset: 0x0, Size: 1]
	bool bEnableLint; 	//[Offset: 0x0, Size: 1]
	bool bPackageDataInsideApk; 	//[Offset: 0x0, Size: 1]
	bool bCreateAllPlatformsInstall; 	//[Offset: 0x0, Size: 1]
	bool bDisableVerifyOBBOnStartUp; 	//[Offset: 0x0, Size: 1]
	bool bForceSmallOBBFiles; 	//[Offset: 0x0, Size: 1]
	bool bAllowLargeOBBFiles; 	//[Offset: 0x0, Size: 1]
	bool bAllowPatchOBBFile; 	//[Offset: 0x0, Size: 1]
	bool bAllowOverflowOBBFiles; 	//[Offset: 0x0, Size: 1]
	bool bUseExternalFilesDir; 	//[Offset: 0x0, Size: 1]
	bool bPublicLogFiles; 	//[Offset: 0x0, Size: 1]
	enum EAndroidScreenOrientation Orientation { //[Offset: 0x0, Size: 1]
		Portrait = 0
		ReversePortrait = 6e007900000000
		SensorPortrait = 6e006f00000000
		Landscape = 65006d00000000
		ReverseLandscape = 72006500000000
		SensorLandscape = 74006100000000
		Sensor = 58004100000000
		FullSensor = 58004100000000
		EAndroidScreenOrientation_MAX = 0
	};
	float MaxAspectRatio; 	//[Offset: 0x0, Size: 4]
	bool bUseDisplayCutout; 	//[Offset: 0x0, Size: 1]
	bool bRestoreNotificationsOnReboot; 	//[Offset: 0x0, Size: 1]
	bool bFullScreen; 	//[Offset: 0x0, Size: 1]
	bool bEnableNewKeyboard; 	//[Offset: 0x0, Size: 1]
	enum EAndroidDepthBufferPreference DepthBufferPreference { //[Offset: 0x0, Size: 1]
		Default = 0
		Bits16 = 3a006500000000
		Bits24 = 69006200000000
		Bits32 = 58004100000000
		EAndroidDepthBufferPreference_MAX = 0
	};
	bool bValidateTextureFormats; 	//[Offset: 0x0, Size: 1]
	bool bEnableBundle; 	//[Offset: 0x0, Size: 1]
	bool bEnableUniversalAPK; 	//[Offset: 0x0, Size: 1]
	bool bBundleABISplit; 	//[Offset: 0x0, Size: 1]
	bool bBundleLanguageSplit; 	//[Offset: 0x0, Size: 1]
	bool bBundleDensitySplit; 	//[Offset: 0x0, Size: 1]
	FString[] ExtraManifestNodeTags; //[Offset: 0x0, Size: 16]
	FString[] ExtraApplicationNodeTags; //[Offset: 0x0, Size: 16]
	StrProperty ExtraApplicationSettings; 	//[Offset: 0x0, Size: 16]
	FString[] ExtraActivityNodeTags; //[Offset: 0x0, Size: 16]
	StrProperty ExtraActivitySettings; 	//[Offset: 0x0, Size: 16]
	FString[] ExtraPermissions; //[Offset: 0x0, Size: 16]
	bool bAndroidVoiceEnabled; 	//[Offset: 0x0, Size: 1]
	PackageForOculusMobile(ByteProperty)[] PackageForOculusMobile; //[Offset: 0x0, Size: 16]
	bool bRemoveOSIG; 	//[Offset: 0x0, Size: 1]
	GoogleVRCaps(ByteProperty)[] GoogleVRCaps; //[Offset: 0x0, Size: 16]
	bool bGoogleVRSustainedPerformance; 	//[Offset: 0x0, Size: 1]
	StrProperty KeyStore; 	//[Offset: 0x0, Size: 16]
	StrProperty KeyAlias; 	//[Offset: 0x0, Size: 16]
	StrProperty KeyStorePassword; 	//[Offset: 0x0, Size: 16]
	StrProperty KeyPassword; 	//[Offset: 0x0, Size: 16]
	bool bBuildForArmV7; 	//[Offset: 0x0, Size: 1]
	bool bBuildForArm64; 	//[Offset: 0x0, Size: 1]
	bool bBuildForX8664; 	//[Offset: 0x0, Size: 1]
	bool bBuildForES31; 	//[Offset: 0x0, Size: 1]
	bool bSupportsVulkan; 	//[Offset: 0x0, Size: 1]
	bool bSupportsVulkanSM5; 	//[Offset: 0x0, Size: 1]
	enum EClangSanitizer ClangSanitizer { //[Offset: 0x0, Size: 1]
		None = 0
		Address = 74007300000000
		HwAddress = 6d006f00000000
		UndefinedBehavior = 4d007400000000
		UndefinedBehaviorMinimal = 6d006d00000000
		EClangSanitizer_MAX = 0
	};
	bool bAndroidOpenGLSupportsBackbufferSampling; 	//[Offset: 0x0, Size: 1]
	bool bDetectVulkanByDefault; 	//[Offset: 0x0, Size: 1]
	bool bBuildWithHiddenSymbolVisibility; 	//[Offset: 0x0, Size: 1]
	bool bSaveSymbols; 	//[Offset: 0x0, Size: 1]
	bool bForceLDLinker; 	//[Offset: 0x0, Size: 1]
	bool bEnableGooglePlaySupport; 	//[Offset: 0x0, Size: 1]
	bool bUseGetAccounts; 	//[Offset: 0x0, Size: 1]
	StrProperty GamesAppID; 	//[Offset: 0x0, Size: 16]
	structGooglePlayAchievementMapping[] AchievementMap; //[Offset: 0x0, Size: 16]
	structGooglePlayLeaderboardMapping[] LeaderboardMap; //[Offset: 0x0, Size: 16]
	bool bEnableSnapshots; 	//[Offset: 0x0, Size: 1]
	bool bSupportAdMob; 	//[Offset: 0x0, Size: 1]
	StrProperty AdMobAdUnitID; 	//[Offset: 0x0, Size: 16]
	FString[] AdMobAdUnitIDs; //[Offset: 0x0, Size: 16]
	StrProperty GooglePlayLicenseKey; 	//[Offset: 0x0, Size: 16]
	StrProperty GCMClientSenderID; 	//[Offset: 0x0, Size: 16]
	bool bShowLaunchImage; 	//[Offset: 0x0, Size: 1]
	bool bAllowIMU; 	//[Offset: 0x0, Size: 1]
	bool bAllowControllers; 	//[Offset: 0x0, Size: 1]
	bool bBlockAndroidKeysOnControllers; 	//[Offset: 0x0, Size: 1]
	bool bControllersBlockDeviceFeedback; 	//[Offset: 0x0, Size: 1]
	enum EAndroidAudio AndroidAudio { //[Offset: 0x0, Size: 1]
		Default = 0
		OGG = 67006f00000000
		ADPCM = 58004100000000
		EAndroidAudio_MAX = 0
	};
	int AudioSampleRate; 	//[Offset: 0x0, Size: 4]
	int AudioCallbackBufferFrameSize; 	//[Offset: 0x0, Size: 4]
	int AudioNumBuffersToEnqueue; 	//[Offset: 0x0, Size: 4]
	int AudioMaxChannels; 	//[Offset: 0x0, Size: 4]
	int AudioNumSourceWorkers; 	//[Offset: 0x0, Size: 4]
	StrProperty SpatializationPlugin; 	//[Offset: 0x0, Size: 16]
	StrProperty ReverbPlugin; 	//[Offset: 0x0, Size: 16]
	StrProperty OcclusionPlugin; 	//[Offset: 0x0, Size: 16]
	PlatformRuntimeAudioCompressionOverrides StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bUseAudioStreamCaching; 	//[Offset: 0x0, Size: 1]
	int CacheSizeKB; 	//[Offset: 0x0, Size: 4]
	int MaxChunkSizeOverrideKB; 	//[Offset: 0x0, Size: 4]
	bool bResampleForDevice; 	//[Offset: 0x0, Size: 1]
	int SoundCueCookQualityIndex; 	//[Offset: 0x0, Size: 4]
	float MaxSampleRate; 	//[Offset: 0x0, Size: 4]
	float HighSampleRate; 	//[Offset: 0x0, Size: 4]
	float MedSampleRate; 	//[Offset: 0x0, Size: 4]
	float LowSampleRate; 	//[Offset: 0x0, Size: 4]
	float MinSampleRate; 	//[Offset: 0x0, Size: 4]
	float CompressionQualityModifier; 	//[Offset: 0x0, Size: 4]
	float AutoStreamingThreshold; 	//[Offset: 0x0, Size: 4]
	enum EAndroidGraphicsDebugger AndroidGraphicsDebugger { //[Offset: 0x0, Size: 1]
		None = 0
		Mali = 6c004300000000
		Adreno = 72006500000000
		EAndroidGraphicsDebugger_MAX = 0
	};
	DirectoryPath StructProperty; 	//[Offset: 0x0, Size: 16]
	bool bMultiTargetFormat_ETC2; 	//[Offset: 0x0, Size: 1]
	bool bMultiTargetFormat_DXT; 	//[Offset: 0x0, Size: 1]
	bool bMultiTargetFormat_ASTC; 	//[Offset: 0x0, Size: 1]
	float TextureFormatPriority_ETC2; 	//[Offset: 0x0, Size: 4]
	float TextureFormatPriority_DXT; 	//[Offset: 0x0, Size: 4]
	float TextureFormatPriority_ASTC; 	//[Offset: 0x0, Size: 4]
	StrProperty SDKAPILevelOverride; 	//[Offset: 0x0, Size: 16]
	StrProperty NDKAPILevelOverride; 	//[Offset: 0x0, Size: 16]
	bool bStreamLandscapeMeshLODs; 	//[Offset: 0x0, Size: 1]
Class: InputBehavior.Object, Addr: 0x76903a1780
Class: AnyButtonInputBehavior.InputBehavior.Object, Addr: 0x76903a1a00
Class: InteractiveGizmoBuilder.Object, Addr: 0x76903a1280
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903a1500
Class: InteractiveGizmo.Object, Addr: 0x76903a0d80
	InputBehaviorSet* InputBehaviors; 	//[Offset: 0x0, Size: 8]
Class: InputBehaviorSet.Object, Addr: 0x76903a5880
	structBehaviorInfo[] Behaviors; //[Offset: 0x0, Size: 16]
Class: AxisAngleGizmo.InteractiveGizmo.Object, Addr: 0x76903a1000
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoFloatParameterSource* AngleSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoClickTarget* HitTarget; 	//[Offset: 0x0, Size: 16]
	interface class GizmoStateTarget* StateTarget; 	//[Offset: 0x0, Size: 16]
	bool bInInteraction; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float InteractionStartAngle; 	//[Offset: 0x0, Size: 4]
	float InteractionCurAngle; 	//[Offset: 0x0, Size: 4]
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903a0b00
Class: AxisPositionGizmo.InteractiveGizmo.Object, Addr: 0x76903a0880
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoFloatParameterSource* ParameterSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoClickTarget* HitTarget; 	//[Offset: 0x0, Size: 16]
	interface class GizmoStateTarget* StateTarget; 	//[Offset: 0x0, Size: 16]
	bool bEnableSignedAxis; 	//[Offset: 0x0, Size: 1]
	bool bInInteraction; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float InteractionStartParameter; 	//[Offset: 0x0, Size: 4]
	float InteractionCurParameter; 	//[Offset: 0x0, Size: 4]
	float ParameterSign; 	//[Offset: 0x0, Size: 4]
Class: GizmoConstantAxisSource.Object, Addr: 0x76903a0600
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: GizmoConstantFrameAxisSource.Object, Addr: 0x76903a0380
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
Class: GizmoWorldAxisSource.Object, Addr: 0x76903a0100
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	int AxisIndex; 	//[Offset: 0x0, Size: 4]
Class: GizmoComponentAxisSource.Object, Addr: 0x76903aa380
	SceneComponent* Component; 	//[Offset: 0x0, Size: 8]
	int AxisIndex; 	//[Offset: 0x0, Size: 4]
	bool bLocalAxes; 	//[Offset: 0x0, Size: 1]
Class: InteractiveToolPropertySet.Object, Addr: 0x76903a9e80
	InteractiveToolPropertySet* CachedProperties; 	//[Offset: 0x0, Size: 8]
	bool bIsPropertySetEnabled; 	//[Offset: 0x0, Size: 1]
Class: BrushBaseProperties.InteractiveToolPropertySet.Object, Addr: 0x76903aa100
	float BrushSize; 	//[Offset: 0x0, Size: 4]
	bool bSpecifyRadius; 	//[Offset: 0x0, Size: 1]
	float BrushRadius; 	//[Offset: 0x0, Size: 4]
	float BrushStrength; 	//[Offset: 0x0, Size: 4]
	float BrushFalloffAmount; 	//[Offset: 0x0, Size: 4]
	bool bShowStrength; 	//[Offset: 0x0, Size: 1]
	bool bShowFalloff; 	//[Offset: 0x0, Size: 1]
Class: InteractiveTool.Object, Addr: 0x76903a9480
	InputBehaviorSet* InputBehaviors; 	//[Offset: 0x0, Size: 8]
	Object*[] ToolPropertyObjects; //[Offset: 0x0, Size: 16]
Class: SingleSelectionTool.InteractiveTool.Object, Addr: 0x76903a9700
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object, Addr: 0x76903a9980
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object, Addr: 0x76903a9c00
	BrushBaseProperties* BrushProperties; 	//[Offset: 0x0, Size: 8]
	bool bInBrushStroke; 	//[Offset: 0x0, Size: 1]
	float WorldToLocalScale; 	//[Offset: 0x0, Size: 4]
	BrushStampData StructProperty; 	//[Offset: 0x0, Size: 192]
	BrushBaseProperties* PropertyClass; 	//[Offset: 0x0, Size: 48]
	BrushStampIndicator* BrushStampIndicator; 	//[Offset: 0x0, Size: 8]
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903a9200
Class: BrushStampIndicator.InteractiveGizmo.Object, Addr: 0x76903a8f80
	float BrushRadius; 	//[Offset: 0x0, Size: 4]
	float BrushFalloff; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bDrawIndicatorLines; 	//[Offset: 0x0, Size: 1]
	bool bDrawRadiusCircle; 	//[Offset: 0x0, Size: 1]
	int SampleStepCount; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	bool bDepthTested; 	//[Offset: 0x0, Size: 1]
	bool bDrawSecondaryLines; 	//[Offset: 0x0, Size: 1]
	float SecondaryLineThickness; 	//[Offset: 0x0, Size: 4]
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	PrimitiveComponent* AttachedComponent; 	//[Offset: 0x0, Size: 8]
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object, Addr: 0x76903a8d00
	bool bUpdateModifiersDuringDrag; 	//[Offset: 0x0, Size: 1]
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object, Addr: 0x76903a8a80
Class: InteractiveToolBuilder.Object, Addr: 0x76903a8580
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object, Addr: 0x76903a8800
Class: ClickDragTool.InteractiveTool.Object, Addr: 0x76903a8300
Class: InternalToolFrameworkActor.Actor.Object, Addr: 0x76903a7e00
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object, Addr: 0x76903a8080
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a7900
	LinearColor StructProperty; 	//[Offset: 0x0, Size: 16]
	float HoverSizeMultiplier; 	//[Offset: 0x0, Size: 4]
	float PixelHitDistanceThreshold; 	//[Offset: 0x0, Size: 4]
	Void UpdateWorldLocalState(bool bWorldIn); //Addr 0x75ee40b1a8 [Final|Native] // UFieldProperty addr: 0x75abbf3500
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a7b80
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Gap; 	//[Offset: 0x0, Size: 4]
	float Length; 	//[Offset: 0x0, Size: 4]
	float Thickness; 	//[Offset: 0x0, Size: 4]
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a7680
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Quat StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	bool bRemoveHiddenLines; 	//[Offset: 0x0, Size: 1]
	bool bEnableAxisFlip; 	//[Offset: 0x0, Size: 1]
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a7400
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Radius; 	//[Offset: 0x0, Size: 4]
	float Thickness; 	//[Offset: 0x0, Size: 4]
	int NumSides; 	//[Offset: 0x0, Size: 4]
	bool bViewAligned; 	//[Offset: 0x0, Size: 1]
	bool bOnlyAllowFrontFacingHits; 	//[Offset: 0x0, Size: 1]
Class: GizmoTransformSource.Interface.Object, Addr: 0x76903a7180
	Void SetTransform(constoutrefstructTransform NewTransform); //Addr 0x75ee40bb34 [Native] // UFieldProperty addr: 0x75abbf3300
Class: GizmoAxisSource.Interface.Object, Addr: 0x76903a6f00
	bool HasTangentVectors(); //Addr 0x75ee40c1ac [Native|Const] // UFieldProperty addr: 0x75abbf2f00
Class: GizmoClickTarget.Interface.Object, Addr: 0x76903a6c80
	Void UpdateHoverState(bool bHovering); //Addr 0x75ee40c66c [Native|Const] // UFieldProperty addr: 0x75abbf2e00
Class: GizmoStateTarget.Interface.Object, Addr: 0x76903a6a00
	Void EndUpdate(); //Addr 0x75ee40ca40 [Native] // UFieldProperty addr: 0x75abbf2c00
Class: GizmoFloatParameterSource.Interface.Object, Addr: 0x76903a6780
	Void SetParameter(float NewValue); //Addr 0x75ee40cdf0 [Native] // UFieldProperty addr: 0x75abbf2800
Class: GizmoVec2ParameterSource.Interface.Object, Addr: 0x76903a6500
	Void SetParameter(constoutrefstructVector2D NewValue); //Addr 0x75ee40d308 [Native] // UFieldProperty addr: 0x75abbf2400
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a6280
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float HandleSize; 	//[Offset: 0x0, Size: 4]
	float Thickness; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float Length; 	//[Offset: 0x0, Size: 4]
	bool bImageScale; 	//[Offset: 0x0, Size: 1]
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903a6000
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float OffsetX; 	//[Offset: 0x0, Size: 4]
	float offsetY; 	//[Offset: 0x0, Size: 4]
	float LengthX; 	//[Offset: 0x0, Size: 4]
	float LengthY; 	//[Offset: 0x0, Size: 4]
	float Thickness; 	//[Offset: 0x0, Size: 4]
	byte SegmentFlags; //[Offset: 0x0, Size: 1]
Class: GizmoLambdaHitTarget.Object, Addr: 0x76903a5d80
Class: GizmoComponentHitTarget.Object, Addr: 0x76903a5b00
	PrimitiveComponent* Component; 	//[Offset: 0x0, Size: 8]
Class: InputBehaviorSource.Interface.Object, Addr: 0x76903a5600
Class: InputRouter.Object, Addr: 0x76903a5380
	bool bAutoInvalidateOnHover; 	//[Offset: 0x0, Size: 1]
	bool bAutoInvalidateOnCapture; 	//[Offset: 0x0, Size: 1]
	InputBehaviorSet* ActiveInputBehaviors; 	//[Offset: 0x0, Size: 8]
Class: InteractionMechanic.Object, Addr: 0x76903af600
Class: InteractiveGizmoManager.Object, Addr: 0x76903af380
	structActiveGizmo[] ActiveGizmos; //[Offset: 0x0, Size: 16]
	<FString, InteractiveGizmoBuilder*> GizmoBuilders; //[Offset: 0x0, Size: 80]
Class: ToolContextTransactionProvider.Interface.Object, Addr: 0x76903af100
Class: InteractiveToolManager.Object, Addr: 0x76903aee80
	InteractiveTool* ActiveLeftTool; 	//[Offset: 0x0, Size: 8]
	InteractiveTool* ActiveRightTool; 	//[Offset: 0x0, Size: 8]
	<FString, InteractiveToolBuilder*> ToolBuilders; //[Offset: 0x0, Size: 80]
Class: ToolFrameworkComponent.Interface.Object, Addr: 0x76903aec00
Class: InteractiveToolsContext.Object, Addr: 0x76903ae980
	InputRouter* InputRouter; 	//[Offset: 0x0, Size: 8]
	InteractiveToolManager* ToolManager; 	//[Offset: 0x0, Size: 8]
	InteractiveGizmoManager* GizmoManager; 	//[Offset: 0x0, Size: 8]
	InteractiveToolManager* ToolManagerClass; 	//[Offset: 0x0, Size: 48]
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object, Addr: 0x76903ae700
	GizmoLineHandleComponent* UpIntervalComponent; 	//[Offset: 0x0, Size: 8]
	GizmoLineHandleComponent* DownIntervalComponent; 	//[Offset: 0x0, Size: 8]
	GizmoLineHandleComponent* ForwardIntervalComponent; 	//[Offset: 0x0, Size: 8]
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903ae480
Class: IntervalGizmo.InteractiveGizmo.Object, Addr: 0x76903ae200
	GizmoTransformChangeStateTarget* StateTarget; 	//[Offset: 0x0, Size: 8]
	TransformProxy* TransformProxy; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent*[] ActiveComponents; //[Offset: 0x0, Size: 16]
	InteractiveGizmo*[] ActiveGizmos; //[Offset: 0x0, Size: 16]
	GizmoComponentAxisSource* AxisYSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* AxisZSource; 	//[Offset: 0x0, Size: 8]
Class: GizmoBaseFloatParameterSource.Object, Addr: 0x76903add00
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object, Addr: 0x76903adf80
	interface class GizmoFloatParameterSource* FloatParameterSource; 	//[Offset: 0x0, Size: 16]
	float MinParameter; 	//[Offset: 0x0, Size: 4]
	float MaxParameter; 	//[Offset: 0x0, Size: 4]
Class: KeyAsModifierInputBehavior.InputBehavior.Object, Addr: 0x76903ada80
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object, Addr: 0x76903ad800
Class: MouseHoverBehavior.InputBehavior.Object, Addr: 0x76903ad580
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object, Addr: 0x76903ad300
Class: MultiSelectionTool.InteractiveTool.Object, Addr: 0x76903ad080
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object, Addr: 0x76903ace00
	float Value; 	//[Offset: 0x0, Size: 4]
	GizmoFloatParameterChange StructProperty; 	//[Offset: 0x0, Size: 8]
Class: GizmoBaseVec2ParameterSource.Object, Addr: 0x76903acb80
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object, Addr: 0x76903ac900
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	GizmoVec2ParameterChange StructProperty; 	//[Offset: 0x0, Size: 16]
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object, Addr: 0x76903ac680
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	float Parameter; 	//[Offset: 0x0, Size: 4]
	GizmoFloatParameterChange StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object, Addr: 0x76903ac400
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	GizmoVec2ParameterChange StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object, Addr: 0x76903ac180
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	float Angle; 	//[Offset: 0x0, Size: 4]
	GizmoFloatParameterChange StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object, Addr: 0x76903abf00
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	float ScaleMultiplier; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	GizmoVec2ParameterChange StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object, Addr: 0x76903abc80
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	float ScaleMultiplier; 	//[Offset: 0x0, Size: 4]
	float Parameter; 	//[Offset: 0x0, Size: 4]
	GizmoFloatParameterChange StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object, Addr: 0x76903aba00
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoTransformSource* TransformSource; 	//[Offset: 0x0, Size: 16]
	float ScaleMultiplier; 	//[Offset: 0x0, Size: 4]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	GizmoVec2ParameterChange StructProperty; 	//[Offset: 0x0, Size: 16]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903ab780
Class: PlanePositionGizmo.InteractiveGizmo.Object, Addr: 0x76903ab500
	interface class GizmoAxisSource* AxisSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoVec2ParameterSource* ParameterSource; 	//[Offset: 0x0, Size: 16]
	interface class GizmoClickTarget* HitTarget; 	//[Offset: 0x0, Size: 16]
	interface class GizmoStateTarget* StateTarget; 	//[Offset: 0x0, Size: 16]
	bool bEnableSignedAxis; 	//[Offset: 0x0, Size: 1]
	bool bFlipX; 	//[Offset: 0x0, Size: 1]
	bool bFlipY; 	//[Offset: 0x0, Size: 1]
	bool bInInteraction; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
Class: SelectionSet.Object, Addr: 0x76903ab280
Class: MeshSelectionSet.SelectionSet.Object, Addr: 0x76903ab000
	int[] Vertices; //[Offset: 0x0, Size: 16]
	int[] Edges; //[Offset: 0x0, Size: 16]
	int[] Faces; //[Offset: 0x0, Size: 16]
	int[] Groups; //[Offset: 0x0, Size: 16]
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object, Addr: 0x76903aad80
	bool HitTestOnRelease; 	//[Offset: 0x0, Size: 1]
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object, Addr: 0x76903aab00
Class: SingleClickTool.InteractiveTool.Object, Addr: 0x76903aa880
Class: GizmoNilStateTarget.Object, Addr: 0x76903aa600
Class: GizmoLambdaStateTarget.Object, Addr: 0x76903afd80
Class: GizmoObjectModifyStateTarget.Object, Addr: 0x76903afb00
Class: GizmoTransformChangeStateTarget.Object, Addr: 0x76903af880
	interface class ToolContextTransactionProvider* TransactionManager; 	//[Offset: 0x0, Size: 16]
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object, Addr: 0x76903b5100
	PrimitiveComponent* TranslateX; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TranslateY; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TranslateZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TranslateYZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TranslateXZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TranslateXY; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* RotateX; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* RotateY; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* RotateZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* UniformScale; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* AxisScaleX; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* AxisScaleY; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* AxisScaleZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* PlaneScaleYZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* PlaneScaleXZ; 	//[Offset: 0x0, Size: 8]
	PrimitiveComponent* PlaneScaleXY; 	//[Offset: 0x0, Size: 8]
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object, Addr: 0x76903b4e80
Class: TransformGizmo.InteractiveGizmo.Object, Addr: 0x76903b4c00
	TransformProxy* ActiveTarget; 	//[Offset: 0x0, Size: 8]
	bool bSnapToWorldGrid; 	//[Offset: 0x0, Size: 1]
	bool bGridSizeIsExplicit; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bRotationGridSizeIsExplicit; 	//[Offset: 0x0, Size: 1]
	Rotator StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bSnapToWorldRotGrid; 	//[Offset: 0x0, Size: 1]
	bool bUseContextCoordinateSystem; 	//[Offset: 0x0, Size: 1]
	enum EToolContextCoordinateSystem CurrentCoordinateSystem { //[Offset: 0x0, Size: 4]
		World = 0
		Local = 4d003a00000000
		EToolContextCoordinateSystem_MAX = 0
	};
	PrimitiveComponent*[] ActiveComponents; //[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] NonuniformScaleComponents; //[Offset: 0x0, Size: 16]
	InteractiveGizmo*[] ActiveGizmos; //[Offset: 0x0, Size: 16]
	GizmoConstantFrameAxisSource* CameraAxisSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* AxisXSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* AxisYSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* AxisZSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* UnitAxisXSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* UnitAxisYSource; 	//[Offset: 0x0, Size: 8]
	GizmoComponentAxisSource* UnitAxisZSource; 	//[Offset: 0x0, Size: 8]
	GizmoTransformChangeStateTarget* StateTarget; 	//[Offset: 0x0, Size: 8]
	GizmoScaledTransformSource* ScaledTransformSource; 	//[Offset: 0x0, Size: 8]
Class: TransformProxy.Object, Addr: 0x76903b4980
	bool bRotatePerObject; 	//[Offset: 0x0, Size: 1]
	bool bSetPivotMode; 	//[Offset: 0x0, Size: 1]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
Class: GizmoBaseTransformSource.Object, Addr: 0x76903b4700
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object, Addr: 0x76903b4480
	SceneComponent* Component; 	//[Offset: 0x0, Size: 8]
	bool bModifyComponentOnTransform; 	//[Offset: 0x0, Size: 1]
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object, Addr: 0x76903b4200
	interface class GizmoTransformSource* ChildTransformSource; 	//[Offset: 0x0, Size: 16]
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object, Addr: 0x76903b3f80
	TransformProxy* Proxy; 	//[Offset: 0x0, Size: 8]
Class: GameplayTask.Object, Addr: 0x76903b3d00
	FName InstanceName; 	//[Offset: 0x0, Size: 12]
	enum ETaskResourceOverlapPolicy ResourceOverlapPolicy { //[Offset: 0x0, Size: 1]
		StartOnTop = 0
		StartAtEnd = 3a000000000000
		ETaskResourceOverlapPolicy_MAX = 0
	};
	GameplayTask* ChildTask; 	//[Offset: 0x0, Size: 8]
	Void ReadyForActivation(); //Addr 0x75ee472a5c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0b9ef00
Class: GameplayTask_ClaimResource.GameplayTask.Object, Addr: 0x76903b3a80
	GameplayTask_ClaimResource* ClaimResources(interface classGameplayTaskOwnerInterface InTaskOwner, classGameplayTaskResource[] ResourceClasses, constPriority(ByteProperty) Priority, constFName TaskInstanceName); //Addr 0x75ee472e00 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf2200
Class: GameplayTask_SpawnActor.GameplayTask.Object, Addr: 0x76903b3800
	delegate Success; 	//[Offset: 0x0, Size: 16]
	delegate DidNotSpawn; 	//[Offset: 0x0, Size: 16]
	Actor* ClassToSpawn; 	//[Offset: 0x0, Size: 8]
	GameplayTask_SpawnActor* SpawnActor(interface classGameplayTaskOwnerInterface TaskOwner, structVector SpawnLocation, structRotator SpawnRotation, classActor Class, bool bSpawnOnlyOnAuthority); //Addr 0x75ee4738a8 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf6100
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object, Addr: 0x76903b3580
	delegate OnFinished; 	//[Offset: 0x0, Size: 16]
	delegate OnTimeExpired; 	//[Offset: 0x0, Size: 16]
Class: GameplayTask_WaitDelay.GameplayTask.Object, Addr: 0x76903b3300
	delegate OnFinish; 	//[Offset: 0x0, Size: 16]
	GameplayTask_WaitDelay* TaskWaitDelay(interface classGameplayTaskOwnerInterface TaskOwner, float Time, constPriority(ByteProperty) Priority); //Addr 0x75ee474144 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75b0b9ea00
Class: GameplayTaskOwnerInterface.Interface.Object, Addr: 0x76903b3080
Class: GameplayTaskResource.Object, Addr: 0x76903b2e00
	int ManualResourceID; 	//[Offset: 0x0, Size: 4]
	int8 AutoResourceID; 	//[Offset: 0x0, Size: 1]
	bool bManuallySetID; 	//[Offset: 0x0, Size: 1]
Class: GameplayTasksComponent.ActorComponent.Object, Addr: 0x76903b2b80
	bool bIsNetDirty; 	//[Offset: 0x0, Size: 1]
	GameplayTask*[] SimulatedTasks; //[Offset: 0x44128, Size: 16]
	GameplayTask*[] TaskPriorityQueue; //[Offset: 0x0, Size: 16]
	GameplayTask*[] TickingTasks; //[Offset: 0x0, Size: 16]
	GameplayTask*[] KnownTasks; //[Offset: 0x0, Size: 16]
	delegate OnClaimedResourcesChange; 	//[Offset: 0x0, Size: 16]
	Void OnRep_SimulatedTasks(); //Addr 0x75ee474ce8 [Final|Native] // UFieldProperty addr: 0x75abbf5f00
Class: NavigationData.Actor.Object, Addr: 0x76903b2680
	PrimitiveComponent* RenderingComp; 	//[Offset: 0x0, Size: 8]
	NavDataConfig StructProperty; 	//[Offset: 0x0, Size: 144]
	bool bEnableDrawing; 	//[Offset: 0x0, Size: 1]
	bool bForceRebuildOnLoad; 	//[Offset: 0x0, Size: 1]
	bool bAutoDestroyWhenNoNavigation; 	//[Offset: 0x0, Size: 1]
	bool bCanBeMainNavData; 	//[Offset: 0x0, Size: 1]
	bool bCanSpawnOnRebuild; 	//[Offset: 0x0, Size: 1]
	bool bRebuildAtRuntime; 	//[Offset: 0x0, Size: 1]
	enum ERuntimeGenerationType RuntimeGeneration { //[Offset: 0x0, Size: 1]
		Static = 0
		DynamicModifiersOnly = 79005300000000
		Dynamic = 6d006900000000
		LegacyGeneration = 54006e00000000
		ERuntimeGenerationType_MAX = 0
	};
	float ObservedPathsTickInterval; 	//[Offset: 0x0, Size: 4]
	uint32 DataVersion; 	//[Offset: 0x0, Size: 4]
	structSupportedAreaData[] SupportedAreas; //[Offset: 0x0, Size: 16]
Class: AbstractNavData.NavigationData.Actor.Object, Addr: 0x76903b2900
Class: CrowdManagerBase.Object, Addr: 0x76903b2400
Class: NavArea.NavAreaBase.Object, Addr: 0x76903b2180
	float DefaultCost; 	//[Offset: 0x0, Size: 4]
	float FixedAreaEnteringCost; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	NavAgentSelector StructProperty; 	//[Offset: 0x0, Size: 4]
	bool bSupportsAgent0; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent1; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent2; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent3; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent4; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent5; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent6; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent7; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent8; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent9; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent10; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent11; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent12; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent13; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent14; 	//[Offset: 0x0, Size: 1]
	bool bSupportsAgent15; 	//[Offset: 0x0, Size: 1]
Class: NavArea_Default.NavArea.NavAreaBase.Object, Addr: 0x76903b1f00
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object, Addr: 0x76903b1c80
Class: NavArea_Null.NavArea.NavAreaBase.Object, Addr: 0x76903b1a00
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object, Addr: 0x76903b1780
Class: NavAreaMeta.NavArea.NavAreaBase.Object, Addr: 0x76903b1500
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object, Addr: 0x76903b1280
	NavArea* Agent0Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent1Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent2Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent3Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent4Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent5Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent6Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent7Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent8Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent9Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent10Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent11Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent12Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent13Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent14Area; 	//[Offset: 0x0, Size: 8]
	NavArea* Agent15Area; 	//[Offset: 0x0, Size: 8]
Class: NavigationGraph.NavigationData.Actor.Object, Addr: 0x76903b0d80
Class: NavigationGraphNode.Actor.Object, Addr: 0x76903b0b00
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903b0880
	NavGraphNode StructProperty; 	//[Offset: 0x0, Size: 24]
	NavigationGraphNodeComponent* NextNodeComponent; 	//[Offset: 0x0, Size: 8]
	NavigationGraphNodeComponent* PrevNodeComponent; 	//[Offset: 0x0, Size: 8]
Class: NavigationInvokerComponent.ActorComponent.Object, Addr: 0x76903b0600
	float TileGenerationRadius; 	//[Offset: 0x0, Size: 4]
	float TileRemovalRadius; 	//[Offset: 0x0, Size: 4]
Class: NavigationPath.Object, Addr: 0x76903b0380
	delegate PathUpdatedNotifier; 	//[Offset: 0x0, Size: 16]
	structVector[] PathPoints; //[Offset: 0x0, Size: 16]
	enum ENavigationOptionFlag RecalculateOnInvalidation { //[Offset: 0x0, Size: 1]
		Default = 0
		Enable = 44007600000000
		Disable = 67006e00000000
		MAX = 64000000000000
	};
	bool IsValid(); //Addr 0x75ee4e5438 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abbf5700
Class: NavigationPathGenerator.Interface.Object, Addr: 0x76903b0100
Class: NavigationQueryFilter.Object, Addr: 0x76903ba380
	structNavigationFilterArea[] Areas; //[Offset: 0x0, Size: 16]
	NavigationFilterFlags StructProperty; 	//[Offset: 0x0, Size: 4]
	NavigationFilterFlags StructProperty; 	//[Offset: 0x0, Size: 4]
Class: NavigationSystemV1.NavigationSystemBase.Object, Addr: 0x76903ba100
	NavigationData* MainNavData; 	//[Offset: 0x0, Size: 8]
	NavigationData* AbstractNavData; 	//[Offset: 0x0, Size: 8]
	FName DefaultAgentName; 	//[Offset: 0x0, Size: 12]
	CrowdManagerBase* CrowdManagerClass; 	//[Offset: 0x0, Size: 48]
	bool bAutoCreateNavigationData; 	//[Offset: 0x0, Size: 1]
	bool bSpawnNavDataInNavBoundsLevel; 	//[Offset: 0x0, Size: 1]
	bool bAllowClientSideNavigation; 	//[Offset: 0x0, Size: 1]
	bool bShouldDiscardSubLevelNavData; 	//[Offset: 0x0, Size: 1]
	bool bTickWhilePaused; 	//[Offset: 0x0, Size: 1]
	bool bSupportRebuilding; 	//[Offset: 0x0, Size: 1]
	bool bInitialBuildingLocked; 	//[Offset: 0x0, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData; 	//[Offset: 0x0, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers; 	//[Offset: 0x0, Size: 1]
	float ActiveTilesUpdateInterval; 	//[Offset: 0x0, Size: 4]
	enum ENavDataGatheringModeConfig DataGatheringMode { //[Offset: 0x0, Size: 1]
		Invalid = 0
		Instant = 50007600000000
		Lazy = 58004100000000
		ENavDataGatheringModeConfig_MAX = 0
	};
	float DirtyAreaWarningSizeThreshold; 	//[Offset: 0x0, Size: 4]
	structNavDataConfig[] SupportedAgents; //[Offset: 0x0, Size: 16]
	NavAgentSelector StructProperty; 	//[Offset: 0x0, Size: 4]
	NavigationData*[] NavDataSet; //[Offset: 0x0, Size: 16]
	NavigationData*[] NavDataRegistrationQueue; //[Offset: 0x0, Size: 16]
	delegate OnNavDataRegisteredEvent; 	//[Offset: 0x0, Size: 16]
	delegate OnNavigationGenerationFinishedDelegate; 	//[Offset: 0x0, Size: 16]
	enum FNavigationSystemRunMode OperationMode { //[Offset: 0x0, Size: 1]
		InvalidMode = 0
		GameMode = 74006100000000
		EditorMode = 45003a00000000
		SimulationMode = 43006c00000000
		PIEMode = 65004d00000000
		InferFromWorldMode = 4d005f00000000
		FNavigationSystemRunMode_MAX = 0
	};
	float DirtyAreasUpdateFreq; 	//[Offset: 0x0, Size: 4]
	Void UnregisterNavigationInvoker(Actor* Invoker); //Addr 0x75ee4e6f44 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf8100
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object, Addr: 0x76903b9e80
	bool bStrictlyStatic; 	//[Offset: 0x0, Size: 1]
	bool bCreateOnClient; 	//[Offset: 0x0, Size: 1]
	bool bAutoSpawnMissingNavData; 	//[Offset: 0x0, Size: 1]
	bool bSpawnNavDataInNavBoundsLevel; 	//[Offset: 0x0, Size: 1]
Class: NavigationTestingActor.Actor.Object, Addr: 0x76903b9c00
	CapsuleComponent* CapsuleComponent; 	//[Offset: 0x0, Size: 8]
	NavigationInvokerComponent* InvokerComponent; 	//[Offset: 0x0, Size: 8]
	bool bActAsNavigationInvoker; 	//[Offset: 0x0, Size: 1]
	NavAgentProperties StructProperty; 	//[Offset: 0x0, Size: 56]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	NavigationData* MyNavData; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bProjectedLocationValid; 	//[Offset: 0x0, Size: 1]
	bool bSearchStart; 	//[Offset: 0x0, Size: 1]
	float CostLimitFactor; 	//[Offset: 0x0, Size: 4]
	float MinimumCostLimit; 	//[Offset: 0x0, Size: 4]
	bool bBacktracking; 	//[Offset: 0x0, Size: 1]
	bool bUseHierarchicalPathfinding; 	//[Offset: 0x0, Size: 1]
	bool bGatherDetailedInfo; 	//[Offset: 0x0, Size: 1]
	bool bDrawDistanceToWall; 	//[Offset: 0x0, Size: 1]
	bool bShowNodePool; 	//[Offset: 0x0, Size: 1]
	bool bShowBestPath; 	//[Offset: 0x0, Size: 1]
	bool bShowDiffWithPreviousStep; 	//[Offset: 0x0, Size: 1]
	bool bShouldBeVisibleInGame; 	//[Offset: 0x0, Size: 1]
	enum ENavCostDisplay CostDisplayMode { //[Offset: 0x0, Size: 1]
		TotalCost = 0
		HeuristicOnly = 75007300000000
		RealCostOnly = 5f007300000000
		ENavCostDisplay_MAX = 0
	};
	Vector2D StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bPathExist; 	//[Offset: 0x0, Size: 1]
	bool bPathIsPartial; 	//[Offset: 0x0, Size: 1]
	bool bPathSearchOutOfNodes; 	//[Offset: 0x0, Size: 1]
	float PathfindingTime; 	//[Offset: 0x0, Size: 4]
	float PathCost; 	//[Offset: 0x0, Size: 4]
	int PathfindingSteps; 	//[Offset: 0x0, Size: 4]
	NavigationTestingActor* OtherActor; 	//[Offset: 0x0, Size: 8]
	NavigationQueryFilter* FilterClass; 	//[Offset: 0x0, Size: 8]
	int ShowStepIndex; 	//[Offset: 0x0, Size: 4]
	float OffsetFromCornersDistance; 	//[Offset: 0x0, Size: 4]
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903b9980
	structNavigationLink[] Links; //[Offset: 0x0, Size: 16]
Class: NavRelevantComponent.ActorComponent.Object, Addr: 0x76903b9480
	bool bAttachToOwnersRoot; 	//[Offset: 0x0, Size: 1]
	Object* CachedNavParent; 	//[Offset: 0x0, Size: 8]
	Void SetNavigationRelevancy(bool bRelevant); //Addr 0x75ee4edb5c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf8000
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object, Addr: 0x76903b9700
	uint32 NavLinkUserId; 	//[Offset: 0x0, Size: 4]
	NavArea* EnabledAreaClass; 	//[Offset: 0x0, Size: 8]
	NavArea* DisabledAreaClass; 	//[Offset: 0x0, Size: 8]
	NavAgentSelector StructProperty; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum ENavLinkDirection LinkDirection { //[Offset: 0x0, Size: 1]
		BothWays = 0
		LeftToRight = 4c007600000000
		RightToLeft = 6e006f00000000
		ENavLinkDirection_MAX = 0
	};
	bool bLinkEnabled; 	//[Offset: 0x0, Size: 1]
	bool bNotifyWhenEnabled; 	//[Offset: 0x0, Size: 1]
	bool bNotifyWhenDisabled; 	//[Offset: 0x0, Size: 1]
	bool bCreateBoxObstacle; 	//[Offset: 0x0, Size: 1]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	NavArea* ObstacleAreaClass; 	//[Offset: 0x0, Size: 8]
	float BroadcastRadius; 	//[Offset: 0x0, Size: 4]
	float BroadcastInterval; 	//[Offset: 0x0, Size: 4]
	enum ECollisionChannel BroadcastChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
Class: NavLinkCustomInterface.Interface.Object, Addr: 0x76903b9200
Class: NavLinkHostInterface.Interface.Object, Addr: 0x76903b8f80
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903b8d00
Class: NavLinkTrivial.NavLinkDefinition.Object, Addr: 0x76903b8a80
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object, Addr: 0x76903b8800
	NavAgentSelector StructProperty; 	//[Offset: 0x0, Size: 4]
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903b8580
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object, Addr: 0x76903b8300
	NavArea* AreaClass; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bIncludeAgentHeight; 	//[Offset: 0x0, Size: 1]
	Void SetAreaClass(classNavArea NewAreaClass); //Addr 0x75ee4ed47c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf7f00
Class: NavModifierVolume.Volume.Brush.Actor.Object, Addr: 0x76903b8080
	NavArea* AreaClass; 	//[Offset: 0x0, Size: 8]
	bool bMaskFillCollisionUnderneathForNavmesh; 	//[Offset: 0x0, Size: 1]
	Void SetAreaClass(classNavArea NewAreaClass); //Addr 0x75ee4ed75c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf7e00
Class: NavNodeInterface.Interface.Object, Addr: 0x76903b7e00
Class: NavSystemConfigOverride.Actor.Object, Addr: 0x76903b7b80
	NavigationSystemConfig* NavigationSystemConfig; 	//[Offset: 0x0, Size: 8]
	enum ENavSystemOverridePolicy OverridePolicy { //[Offset: 0x0, Size: 1]
		Override = 0
		Append = 75007300000000
		Skip = 5f007300000000
		ENavSystemOverridePolicy_MAX = 0
	};
	bool bLoadOnClient; 	//[Offset: 0x0, Size: 1]
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903b7900
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object, Addr: 0x76903b7680
Class: RecastNavMesh.NavigationData.Actor.Object, Addr: 0x76903b7400
	bool bDrawTriangleEdges; 	//[Offset: 0x0, Size: 1]
	bool bDrawPolyEdges; 	//[Offset: 0x0, Size: 1]
	bool bDrawFilledPolys; 	//[Offset: 0x0, Size: 1]
	bool bDrawNavMeshEdges; 	//[Offset: 0x0, Size: 1]
	bool bDrawTileBounds; 	//[Offset: 0x0, Size: 1]
	bool bDrawPathCollidingGeometry; 	//[Offset: 0x0, Size: 1]
	bool bDrawTileLabels; 	//[Offset: 0x0, Size: 1]
	bool bDrawPolygonLabels; 	//[Offset: 0x0, Size: 1]
	bool bDrawDefaultPolygonCost; 	//[Offset: 0x0, Size: 1]
	bool bDrawLabelsOnPathNodes; 	//[Offset: 0x0, Size: 1]
	bool bDrawNavLinks; 	//[Offset: 0x0, Size: 1]
	bool bDrawFailedNavLinks; 	//[Offset: 0x0, Size: 1]
	bool bDrawClusters; 	//[Offset: 0x0, Size: 1]
	bool bDrawOctree; 	//[Offset: 0x0, Size: 1]
	bool bDrawOctreeDetails; 	//[Offset: 0x0, Size: 1]
	bool bDrawMarkedForbiddenPolys; 	//[Offset: 0x0, Size: 1]
	bool bDistinctlyDrawTilesBeingBuilt; 	//[Offset: 0x0, Size: 1]
	float DrawOffset; 	//[Offset: 0x0, Size: 4]
	bool bFixedTilePoolSize; 	//[Offset: 0x0, Size: 1]
	int TilePoolSize; 	//[Offset: 0x0, Size: 4]
	float TileSizeUU; 	//[Offset: 0x0, Size: 4]
	float CellSize; 	//[Offset: 0x0, Size: 4]
	float CellHeight; 	//[Offset: 0x0, Size: 4]
	float AgentRadius; 	//[Offset: 0x0, Size: 4]
	float AgentHeight; 	//[Offset: 0x0, Size: 4]
	float AgentMaxSlope; 	//[Offset: 0x0, Size: 4]
	float AgentMaxStepHeight; 	//[Offset: 0x0, Size: 4]
	float MinRegionArea; 	//[Offset: 0x0, Size: 4]
	float MergeRegionSize; 	//[Offset: 0x0, Size: 4]
	float MaxSimplificationError; 	//[Offset: 0x0, Size: 4]
	int MaxSimultaneousTileGenerationJobsCount; 	//[Offset: 0x0, Size: 4]
	int TileNumberHardLimit; 	//[Offset: 0x0, Size: 4]
	int PolyRefTileBits; 	//[Offset: 0x0, Size: 4]
	int PolyRefNavPolyBits; 	//[Offset: 0x0, Size: 4]
	int PolyRefSaltBits; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float DefaultDrawDistance; 	//[Offset: 0x0, Size: 4]
	float DefaultMaxSearchNodes; 	//[Offset: 0x0, Size: 4]
	float DefaultMaxHierarchicalSearchNodes; 	//[Offset: 0x0, Size: 4]
	enum ERecastPartitioning RegionPartitioning { //[Offset: 0x0, Size: 1]
		Monotone = 0
		Watershed = 75007300000000
		ChunkyMonotone = 5f007300000000
		ERecastPartitioning_MAX = 0
	};
	enum ERecastPartitioning LayerPartitioning { //[Offset: 0x0, Size: 1]
		Monotone = 0
		Watershed = 75007300000000
		ChunkyMonotone = 5f007300000000
		ERecastPartitioning_MAX = 0
	};
	int RegionChunkSplits; 	//[Offset: 0x0, Size: 4]
	int LayerChunkSplits; 	//[Offset: 0x0, Size: 4]
	bool bSortNavigationAreasByCost; 	//[Offset: 0x0, Size: 1]
	bool bPerformVoxelFiltering; 	//[Offset: 0x0, Size: 1]
	bool bMarkLowHeightAreas; 	//[Offset: 0x0, Size: 1]
	bool bUseExtraTopCellWhenMarkingAreas; 	//[Offset: 0x0, Size: 1]
	bool bFilterLowSpanSequences; 	//[Offset: 0x0, Size: 1]
	bool bFilterLowSpanFromTileCache; 	//[Offset: 0x0, Size: 1]
	bool bDoFullyAsyncNavDataGathering; 	//[Offset: 0x0, Size: 1]
	bool bUseBetterOffsetsFromCorners; 	//[Offset: 0x0, Size: 1]
	bool bStoreEmptyTileLayers; 	//[Offset: 0x0, Size: 1]
	bool bUseVirtualFilters; 	//[Offset: 0x0, Size: 1]
	bool bAllowNavLinkAsPathEnd; 	//[Offset: 0x0, Size: 1]
	bool bUseVoxelCache; 	//[Offset: 0x0, Size: 1]
	float TileSetUpdateInterval; 	//[Offset: 0x0, Size: 4]
	float HeuristicScale; 	//[Offset: 0x0, Size: 4]
	float VerticalDeviationFromGroundCompensation; 	//[Offset: 0x0, Size: 4]
	bool K2_ReplaceAreaInTileBounds(structBox Bounds, classNavArea OldArea, classNavArea NewArea, bool ReplaceLinks); //Addr 0x75ee4ee39c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf7d00
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object, Addr: 0x76903b7180
Class: AIAsyncTaskBlueprintProxy.Object, Addr: 0x76903b6f00
	delegate OnSuccess; 	//[Offset: 0x0, Size: 16]
	delegate OnFail; 	//[Offset: 0x0, Size: 16]
	Void OnMoveCompleted(structAIRequestID RequestID, MovementResult(ByteProperty) MovementResult); //Addr 0x75ee59f97c [Final|Native] // UFieldProperty addr: 0x75abbf7c00
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76903b6c80
	Void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic); //Addr 0x75ee5a04b8 [Final|BlueprintAuthorityOly|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf6c00
Class: AIController.Controller.Actor.Object, Addr: 0x76903b6a00
	bool bStartAILogicOnPossess; 	//[Offset: 0x0, Size: 1]
	bool bStopAILogicOnUnposses; 	//[Offset: 0x0, Size: 1]
	bool bLOSflag; 	//[Offset: 0x0, Size: 1]
	bool bSkipExtraLOSChecks; 	//[Offset: 0x0, Size: 1]
	bool bAllowStrafe; 	//[Offset: 0x0, Size: 1]
	bool bWantsPlayerState; 	//[Offset: 0x0, Size: 1]
	bool bSetControlRotationFromPawnOrientation; 	//[Offset: 0x0, Size: 1]
	PathFollowingComponent* PathFollowingComponent; 	//[Offset: 0x0, Size: 8]
	BrainComponent* BrainComponent; 	//[Offset: 0x0, Size: 8]
	AIPerceptionComponent* PerceptionComponent; 	//[Offset: 0x0, Size: 8]
	PawnActionsComponent* ActionsComp; 	//[Offset: 0x0, Size: 8]
	BlackboardComponent* Blackboard; 	//[Offset: 0x0, Size: 8]
	GameplayTasksComponent* CachedGameplayTasksComponent; 	//[Offset: 0x0, Size: 8]
	NavigationQueryFilter* DefaultNavigationFilterClass; 	//[Offset: 0x0, Size: 8]
	delegate ReceiveMoveCompleted; 	//[Offset: 0x0, Size: 16]
	bool UseBlackboard(BlackboardData* BlackboardAsset, outBlackboardComponent* BlackboardComponent); //Addr 0x75ee5a1d0c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf9900
Class: PathFollowingComponent.ActorComponent.Object, Addr: 0x76903c5380
	NavMovementComponent* MovementComp; 	//[Offset: 0x0, Size: 8]
	NavigationData* MyNavData; 	//[Offset: 0x0, Size: 8]
	Void OnNavDataRegistered(NavigationData* NavData); //Addr 0x75ee5da83c [Final|Native] // UFieldProperty addr: 0x75abc50b00
Class: PawnActionsComponent.ActorComponent.Object, Addr: 0x76903d1c80
	Pawn* ControlledPawn; 	//[Offset: 0x0, Size: 8]
	structPawnActionStack[] ActionStacks; //[Offset: 0x0, Size: 16]
	structPawnActionEvent[] ActionEvents; //[Offset: 0x0, Size: 16]
	PawnAction* CurrentAction; 	//[Offset: 0x0, Size: 8]
	bool K2_PushAction(PawnAction* NewAction, Priority(ByteProperty) Priority, Object* Instigator); //Addr 0x75ee5dc9a4 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc52b00
Class: AIDataProvider.Object, Addr: 0x76903b6780
Class: AIDataProvider_QueryParams.AIDataProvider.Object, Addr: 0x76903b6500
	FName ParamName; 	//[Offset: 0x0, Size: 12]
	float FloatValue; 	//[Offset: 0x0, Size: 4]
	int IntValue; 	//[Offset: 0x0, Size: 4]
	bool BoolValue; 	//[Offset: 0x0, Size: 1]
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object, Addr: 0x76903b6280
	float Min; 	//[Offset: 0x0, Size: 4]
	float Max; 	//[Offset: 0x0, Size: 4]
	bool bInteger; 	//[Offset: 0x0, Size: 1]
Class: AIHotSpotManager.Object, Addr: 0x76903b6000
Class: AIPerceptionComponent.ActorComponent.Object, Addr: 0x76903b5d80
	AISenseConfig*[] SensesConfig; //[Offset: 0x0, Size: 16]
	AISense* DominantSense; 	//[Offset: 0x0, Size: 8]
	AIController* AIOwner; 	//[Offset: 0x0, Size: 8]
	delegate OnPerceptionUpdated; 	//[Offset: 0x0, Size: 16]
	delegate OnTargetPerceptionUpdated; 	//[Offset: 0x0, Size: 16]
	delegate OnTargetPerceptionInfoUpdated; 	//[Offset: 0x0, Size: 16]
	Void SetSenseEnabled(classAISense SenseClass, constbool bEnable); //Addr 0x75ee5a4278 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf8f00
Class: AISystem.AISystemBase.Object, Addr: 0x76903bba00
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
	float AcceptanceRadius; 	//[Offset: 0x0, Size: 4]
	float PathfollowingRegularPathPointAcceptanceRadius; 	//[Offset: 0x0, Size: 4]
	float PathfollowingNavLinkAcceptanceRadius; 	//[Offset: 0x0, Size: 4]
	bool bFinishMoveOnGoalOverlap; 	//[Offset: 0x0, Size: 1]
	bool bAcceptPartialPaths; 	//[Offset: 0x0, Size: 1]
	bool bAllowStrafing; 	//[Offset: 0x0, Size: 1]
	bool bEnableBTAITasks; 	//[Offset: 0x0, Size: 1]
	bool bAllowControllersAsEQSQuerier; 	//[Offset: 0x0, Size: 1]
	bool bEnableDebuggerPlugin; 	//[Offset: 0x0, Size: 1]
	bool bForgetStaleActors; 	//[Offset: 0x0, Size: 1]
	bool bAddBlackboardSelfKey; 	//[Offset: 0x0, Size: 1]
	enum ECollisionChannel DefaultSightCollisionChannel { //[Offset: 0x0, Size: 1]
		ECC_WorldStatic = 0
		ECC_WorldDynamic = 7500000000
		ECC_Pawn = 800000000
		ECC_Visibility = 7500000000
		ECC_Camera = b00000000
		ECC_PhysicsBody = 7500000000
		ECC_Vehicle = 3e00000000
		ECC_Destructible = 7500000000
		ECC_EngineTraceChannel1 = 3d00000000
		ECC_EngineTraceChannel2 = 7500000000
		ECC_EngineTraceChannel3 = 2900000000
		ECC_EngineTraceChannel4 = 7500000000
		ECC_EngineTraceChannel5 = 3d00000000
		ECC_EngineTraceChannel6 = 7500000000
		ECC_GameTraceChannel1 = d00000000
		ECC_GameTraceChannel2 = 7500000000
		ECC_GameTraceChannel3 = f00000000
		ECC_GameTraceChannel4 = 7500000000
		ECC_GameTraceChannel5 = 3800000000
		ECC_GameTraceChannel6 = 7500000000
		ECC_GameTraceChannel7 = 1a00000000
		ECC_GameTraceChannel8 = 7500000000
		ECC_GameTraceChannel9 = 3900000000
		ECC_GameTraceChannel10 = 7500000000
		ECC_GameTraceChannel11 = 300000000
		ECC_GameTraceChannel12 = 7500000000
		ECC_GameTraceChannel13 = 3900000000
		ECC_GameTraceChannel14 = 7500000000
		ECC_GameTraceChannel15 = 2700000000
		ECC_GameTraceChannel16 = 7500000000
		ECC_GameTraceChannel17 = 1000000000
		ECC_GameTraceChannel18 = 7500000000
		ECC_OverlapAll_Deprecated = 2f00000000
		ECC_MAX = 7500000000
	};
	BehaviorTreeManager* BehaviorTreeManager; 	//[Offset: 0x0, Size: 8]
	EnvQueryManager* EnvironmentQueryManager; 	//[Offset: 0x0, Size: 8]
	AIPerceptionSystem* PerceptionSystem; 	//[Offset: 0x0, Size: 8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects; //[Offset: 0x0, Size: 16]
	AIHotSpotManager* HotSpotManager; 	//[Offset: 0x0, Size: 8]
	NavLocalGridManager* NavLocalGrids; 	//[Offset: 0x0, Size: 8]
	Void AILoggingVerbose(); //Addr 0x75ee5ad240 [Native] // UFieldProperty addr: 0x75abbfbb00
Class: AIPerceptionListenerInterface.Interface.Object, Addr: 0x76903b5b00
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object, Addr: 0x76903b5880
	bool bAutoRegisterAsSource; 	//[Offset: 0x0, Size: 1]
	classAISense[] RegisterAsSourceForSenses; //[Offset: 0x0, Size: 16]
	Void UnregisterFromSense(classAISense SenseClass); //Addr 0x75ee5a522c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbf8b00
Class: AISubsystem.Object, Addr: 0x76903b5380
	AISystem* AISystem; 	//[Offset: 0x0, Size: 8]
Class: AIPerceptionSystem.AISubsystem.Object, Addr: 0x76903b5600
	AISense*[] Senses; //[Offset: 0x0, Size: 16]
	float PerceptionAgingRate; 	//[Offset: 0x0, Size: 4]
	Void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent); //Addr 0x75ee5a7cd4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbf8600
Class: AIResourceInterface.Interface.Object, Addr: 0x76903bf600
Class: AIResource_Movement.GameplayTaskResource.Object, Addr: 0x76903bf380
Class: AIResource_Logic.GameplayTaskResource.Object, Addr: 0x76903bf100
Class: AISense.Object, Addr: 0x76903bee80
	float DefaultExpirationAge; 	//[Offset: 0x0, Size: 4]
	enum EAISenseNotifyType NotifyType { //[Offset: 0x0, Size: 1]
		OnEveryPerception = 0
		OnPerceptionChange = 58004100000000
		EAISenseNotifyType_MAX = 0
	};
	bool bWantsNewPawnNotification; 	//[Offset: 0x0, Size: 1]
	bool bAutoRegisterAllPawnsAsSources; 	//[Offset: 0x0, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance; 	//[Offset: 0x0, Size: 8]
Class: AISense_Blueprint.AISense.Object, Addr: 0x76903bec00
	UserDefinedStruct* ListenerDataType; 	//[Offset: 0x0, Size: 8]
	AIPerceptionComponent*[] ListenerContainer; //[Offset: 0x0, Size: 16]
	AISenseEvent*[] UnprocessedEvents; //[Offset: 0x0, Size: 16]
	float OnUpdate(constoutrefAISenseEvent*[] EventsToProcess); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abbfc100
Class: AISense_Damage.AISense.Object, Addr: 0x76903be980
	structAIDamageEvent[] RegisteredEvents; //[Offset: 0x0, Size: 16]
	Void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, structVector EventLocation, structVector HitLocation); //Addr 0x75ee5a9b84 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfc000
Class: AISense_Hearing.AISense.Object, Addr: 0x76903be700
	structAINoiseEvent[] NoiseEvents; //[Offset: 0x0, Size: 16]
	float SpeedOfSoundSq; 	//[Offset: 0x0, Size: 4]
	Void ReportNoiseEvent(Object* WorldContextObject, structVector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag); //Addr 0x75ee5aa208 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfbf00
Class: AISense_Prediction.AISense.Object, Addr: 0x76903be480
	structAIPredictionEvent[] RegisteredEvents; //[Offset: 0x0, Size: 16]
	Void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime); //Addr 0x75ee5aa894 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfbd00
Class: AISense_Sight.AISense.Object, Addr: 0x76903be200
	int MaxTracesPerTick; 	//[Offset: 0x0, Size: 4]
	int MinQueriesPerTimeSliceCheck; 	//[Offset: 0x0, Size: 4]
	double MaxTimeSlicePerTick; 	//[Offset: 0x0, Size: 8]
	float HighImportanceQueryDistanceThreshold; 	//[Offset: 0x0, Size: 4]
	float MaxQueryImportance; 	//[Offset: 0x0, Size: 4]
	float SightLimitQueryImportance; 	//[Offset: 0x0, Size: 4]
Class: AISense_Team.AISense.Object, Addr: 0x76903bdf80
	structAITeamStimulusEvent[] RegisteredEvents; //[Offset: 0x0, Size: 16]
Class: AISense_Touch.AISense.Object, Addr: 0x76903bdd00
	structAITouchEvent[] RegisteredEvents; //[Offset: 0x0, Size: 16]
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object, Addr: 0x76903bda80
Class: AISenseConfig.Object, Addr: 0x76903bd800
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float MaxAge; 	//[Offset: 0x0, Size: 4]
	bool bStartsEnabled; 	//[Offset: 0x0, Size: 1]
Class: AISenseConfig_Blueprint.AISenseConfig.Object, Addr: 0x76903bd580
	AISense_Blueprint* Implementation; 	//[Offset: 0x0, Size: 8]
Class: AISenseConfig_Damage.AISenseConfig.Object, Addr: 0x76903bd300
	AISense_Damage* Implementation; 	//[Offset: 0x0, Size: 8]
Class: AISenseConfig_Hearing.AISenseConfig.Object, Addr: 0x76903bd080
	AISense_Hearing* Implementation; 	//[Offset: 0x0, Size: 8]
	float HearingRange; 	//[Offset: 0x0, Size: 4]
	float LoSHearingRange; 	//[Offset: 0x0, Size: 4]
	bool bUseLoSHearing; 	//[Offset: 0x0, Size: 1]
	AISenseAffiliationFilter StructProperty; 	//[Offset: 0x0, Size: 4]
Class: AISenseConfig_Prediction.AISenseConfig.Object, Addr: 0x76903bce00
Class: AISenseConfig_Sight.AISenseConfig.Object, Addr: 0x76903bcb80
	AISense_Sight* Implementation; 	//[Offset: 0x0, Size: 8]
	float SightRadius; 	//[Offset: 0x0, Size: 4]
	float LoseSightRadius; 	//[Offset: 0x0, Size: 4]
	float PeripheralVisionAngleDegrees; 	//[Offset: 0x0, Size: 4]
	AISenseAffiliationFilter StructProperty; 	//[Offset: 0x0, Size: 4]
	float AutoSuccessRangeFromLastSeenLocation; 	//[Offset: 0x0, Size: 4]
	float PointOfViewBackwardOffset; 	//[Offset: 0x0, Size: 4]
	float NearClippingRadius; 	//[Offset: 0x0, Size: 4]
Class: AISenseConfig_Team.AISenseConfig.Object, Addr: 0x76903bc900
Class: AISenseConfig_Touch.AISenseConfig.Object, Addr: 0x76903bc680
Class: AISenseEvent.Object, Addr: 0x76903bc400
Class: AISenseEvent_Damage.AISenseEvent.Object, Addr: 0x76903bc180
	AIDamageEvent StructProperty; 	//[Offset: 0x0, Size: 48]
Class: AISenseEvent_Hearing.AISenseEvent.Object, Addr: 0x76903bbf00
	AINoiseEvent StructProperty; 	//[Offset: 0x0, Size: 48]
Class: AISightTargetInterface.Interface.Object, Addr: 0x76903bbc80
Class: AITask.GameplayTask.Object, Addr: 0x76903bb780
	AIController* OwnerController; 	//[Offset: 0x0, Size: 8]
Class: AITask_LockLogic.AITask.GameplayTask.Object, Addr: 0x76903bb500
Class: AITask_MoveTo.AITask.GameplayTask.Object, Addr: 0x76903bb280
	delegate OnRequestFailed; 	//[Offset: 0x0, Size: 16]
	delegate OnMoveFinished; 	//[Offset: 0x0, Size: 16]
	AIMoveRequest StructProperty; 	//[Offset: 0x0, Size: 64]
	AITask_MoveTo* AIMoveTo(AIController* Controller, structVector GoalLocation, Actor* GoalActor, float AcceptanceRadius, StopOnOverlap(ByteProperty) StopOnOverlap, AcceptPartialPath(ByteProperty) AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, ProjectGoalOnNavigation(ByteProperty) ProjectGoalOnNavigation); //Addr 0x75ee5adabc [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfba00
Class: AITask_RunEQS.AITask.GameplayTask.Object, Addr: 0x76903bb000
	AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate); //Addr 0x75ee5ae26c [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfb900
Class: BehaviorTree.Object, Addr: 0x76903bad80
	BTCompositeNode* RootNode; 	//[Offset: 0x0, Size: 8]
	BlackboardData* BlackboardAsset; 	//[Offset: 0x0, Size: 8]
	BTDecorator*[] RootDecorators; //[Offset: 0x0, Size: 16]
	structBTDecoratorLogic[] RootDecoratorOps; //[Offset: 0x0, Size: 16]
Class: BrainComponent.ActorComponent.Object, Addr: 0x76903ba880
	BlackboardComponent* BlackboardComp; 	//[Offset: 0x0, Size: 8]
	AIController* AIOwner; 	//[Offset: 0x0, Size: 8]
	Void StopLogic(FString Reason); //Addr 0x75ee5b8848 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbfb400
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object, Addr: 0x76903bab00
	BTNode*[] NodeInstances; //[Offset: 0x0, Size: 16]
	BehaviorTree* DefaultBehaviorTreeAsset; 	//[Offset: 0x0, Size: 8]
	Void SetDynamicSubtree(structGameplayTag InjectTag, BehaviorTree* BehaviorAsset); //Addr 0x75ee5b37c8 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbfb100
Class: BehaviorTreeManager.Object, Addr: 0x76903ba600
	int MaxDebuggerSteps; 	//[Offset: 0x0, Size: 4]
	structBehaviorTreeTemplateInfo[] LoadedTemplates; //[Offset: 0x0, Size: 16]
	BehaviorTreeComponent*[] ActiveComponents; //[Offset: 0x0, Size: 16]
Class: BehaviorTreeTypes.Object, Addr: 0x76903bfd80
Class: BlackboardAssetProvider.Interface.Object, Addr: 0x76903bfb00
	BlackboardData* GetBlackboardAsset(); //Addr 0x75ee5b4860 [Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abbfb000
Class: BlackboardComponent.ActorComponent.Object, Addr: 0x76903bf880
	BrainComponent* BrainComp; 	//[Offset: 0x0, Size: 8]
	BlackboardData* DefaultBlackboardAsset; 	//[Offset: 0x0, Size: 8]
	BlackboardData* BlackboardAsset; 	//[Offset: 0x0, Size: 8]
	BlackboardKeyType*[] KeyInstances; //[Offset: 0x0, Size: 16]
	Void SetValueAsVector(constoutrefFName KeyName, structVector VectorValue); //Addr 0x75ee5b502c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abbfda00
Class: BlackboardData.DataAsset.Object, Addr: 0x76903c5100
	BlackboardData* Parent; 	//[Offset: 0x0, Size: 8]
	structBlackboardEntry[] Keys; //[Offset: 0x0, Size: 16]
	bool bHasSynchronizedKeys; 	//[Offset: 0x0, Size: 1]
Class: BlackboardKeyType.Object, Addr: 0x76903c4e80
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object, Addr: 0x76903c4c00
Class: BlackboardKeyType_Class.BlackboardKeyType.Object, Addr: 0x76903c4980
	Object* BaseClass; 	//[Offset: 0x0, Size: 8]
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object, Addr: 0x76903c4700
	Enum* EnumType; 	//[Offset: 0x0, Size: 8]
	StrProperty EnumName; 	//[Offset: 0x0, Size: 16]
	bool bIsEnumNameValid; 	//[Offset: 0x0, Size: 1]
Class: BlackboardKeyType_Float.BlackboardKeyType.Object, Addr: 0x76903c4480
Class: BlackboardKeyType_Int.BlackboardKeyType.Object, Addr: 0x76903c4200
Class: BlackboardKeyType_Name.BlackboardKeyType.Object, Addr: 0x76903c3f80
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object, Addr: 0x76903c3d00
	StrProperty EnumName; 	//[Offset: 0x0, Size: 16]
	Enum* EnumType; 	//[Offset: 0x0, Size: 8]
Class: BlackboardKeyType_Object.BlackboardKeyType.Object, Addr: 0x76903c3a80
	Object* BaseClass; 	//[Offset: 0x0, Size: 8]
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object, Addr: 0x76903c3800
Class: BlackboardKeyType_String.BlackboardKeyType.Object, Addr: 0x76903c3580
	StrProperty StringValue; 	//[Offset: 0x0, Size: 16]
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object, Addr: 0x76903c3300
Class: BTNode.Object, Addr: 0x76903c2e00
	StrProperty NodeName; 	//[Offset: 0x0, Size: 16]
	BehaviorTree* TreeAsset; 	//[Offset: 0x0, Size: 8]
	BTCompositeNode* ParentNode; 	//[Offset: 0x0, Size: 8]
Class: BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c3080
Class: BTCompositeNode.BTNode.Object, Addr: 0x76903c2900
	structBTCompositeChild[] Children; //[Offset: 0x0, Size: 16]
	BTService*[] Services; //[Offset: 0x0, Size: 16]
	bool bApplyDecoratorScope; 	//[Offset: 0x0, Size: 1]
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object, Addr: 0x76903c2b80
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object, Addr: 0x76903c2680
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object, Addr: 0x76903c2400
	enum EBTParallelMode FinishMode { //[Offset: 0x0, Size: 1]
		AbortBackground = 0
		WaitForBackground = 74006100000000
		EBTParallelMode_MAX = 0
	};
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c2180
	bool bInverseCondition; 	//[Offset: 0x0, Size: 1]
	enum EBTFlowAbortMode FlowAbortMode { //[Offset: 0x0, Size: 1]
		None = 0
		LowerPriority = 45003a00000000
		Self = 65005200000000
		Both = 4d005f00000000
		EBTFlowAbortMode_MAX = 0
	};
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1c80
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1f00
	int IntValue; 	//[Offset: 0x0, Size: 4]
	float FloatValue; 	//[Offset: 0x0, Size: 4]
	StrProperty StringValue; 	//[Offset: 0x0, Size: 16]
	StrProperty CachedDescription; 	//[Offset: 0x0, Size: 16]
	byte OperationType; //[Offset: 0x0, Size: 1]
	enum EBTBlackboardRestart NotifyObserver { //[Offset: 0x0, Size: 1]
		ValueChange = 0
		ResultChange = 4d003a00000000
		EBTBlackboardRestart_MAX = 0
	};
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1a00
	AIController* AIOwner; 	//[Offset: 0x0, Size: 8]
	Actor* ActorOwner; 	//[Offset: 0x0, Size: 8]
	FName[] ObservedKeyNames; //[Offset: 0x0, Size: 16]
	bool bShowPropertyDetails; 	//[Offset: 0x0, Size: 1]
	bool bCheckConditionOnlyBlackBoardChanges; 	//[Offset: 0x0, Size: 1]
	bool bIsObservingBB; 	//[Offset: 0x0, Size: 1]
	Void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abbfcc00
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1780
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EGameplayContainerMatchType TagsToMatch { //[Offset: 0x0, Size: 1]
		Any = 0
		All = 73006700000000
		EGameplayContainerMatchType_MAX = 0
	};
	GameplayTagContainer StructProperty; 	//[Offset: 0x0, Size: 32]
	StrProperty CachedDescription; 	//[Offset: 0x0, Size: 16]
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1500
	enum EBlackBoardEntryComparison Operator { //[Offset: 0x0, Size: 1]
		Equal = 0
		NotEqual = 4d003a00000000
		EBlackBoardEntryComparison_MAX = 0
	};
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1280
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c1000
	float ConeHalfAngle; 	//[Offset: 0x0, Size: 4]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0d80
	float CoolDownTime; 	//[Offset: 0x0, Size: 4]
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0b00
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bUseSelf; 	//[Offset: 0x0, Size: 1]
	enum EPathExistanceQueryType PathQueryType { //[Offset: 0x0, Size: 1]
		NavmeshRaycast2D = 0
		HierarchicalQuery = 70006d00000000
		RegularPathFinding = 45007400000000
		EPathExistanceQueryType_MAX = 0
	};
	NavigationQueryFilter* FilterClass; 	//[Offset: 0x0, Size: 8]
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0880
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0600
	float AcceptableRadius; 	//[Offset: 0x0, Size: 4]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	enum FAIDistanceType GeometricDistanceType { //[Offset: 0x0, Size: 1]
		Distance3D = 0
		Distance2D = 45003a00000000
		DistanceZ = 65005200000000
		MAX = 4d005f00000000
	};
	bool bUseParametrizedRadius; 	//[Offset: 0x0, Size: 1]
	bool bUseNavAgentGoalLocation; 	//[Offset: 0x0, Size: 1]
	bool bPathFindingBasedTest; 	//[Offset: 0x0, Size: 1]
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0380
	Object* TestClass; 	//[Offset: 0x0, Size: 8]
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c0100
	float ConeHalfAngle; 	//[Offset: 0x0, Size: 4]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bUseSelfAsOrigin; 	//[Offset: 0x0, Size: 1]
	bool bUseSelfAsObserved; 	//[Offset: 0x0, Size: 1]
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903ca380
	int NumLoops; 	//[Offset: 0x0, Size: 4]
	bool bInfiniteLoop; 	//[Offset: 0x0, Size: 1]
	float InfiniteLoopTimeoutTime; 	//[Offset: 0x0, Size: 4]
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903ca100
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c9e80
	GameplayTag StructProperty; 	//[Offset: 0x0, Size: 12]
	float CooldownDuration; 	//[Offset: 0x0, Size: 4]
	bool bAddToExistingDuration; 	//[Offset: 0x0, Size: 1]
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c9c00
	GameplayTag StructProperty; 	//[Offset: 0x0, Size: 12]
	float CooldownDuration; 	//[Offset: 0x0, Size: 4]
	bool bAddToExistingDuration; 	//[Offset: 0x0, Size: 1]
	bool bActivatesCooldown; 	//[Offset: 0x0, Size: 1]
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c9980
	float TimeLimit; 	//[Offset: 0x0, Size: 4]
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76903c9700
	Void StopUsingExternalEvent(BTNode* NodeOwner); //Addr 0x75ee5bfe28 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abbfea00
Class: BTService.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c9480
	float Interval; 	//[Offset: 0x0, Size: 4]
	float RandomDeviation; 	//[Offset: 0x0, Size: 4]
	bool bCallTickOnSearchStart; 	//[Offset: 0x0, Size: 1]
	bool bRestartTimerOnEachActivation; 	//[Offset: 0x0, Size: 1]
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c9200
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c8f80
	AIController* AIOwner; 	//[Offset: 0x0, Size: 8]
	Actor* ActorOwner; 	//[Offset: 0x0, Size: 8]
	bool bShowPropertyDetails; 	//[Offset: 0x0, Size: 1]
	bool bShowEventDetails; 	//[Offset: 0x0, Size: 1]
	Void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abc51b00
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c8d00
	byte FocusPriority; //[Offset: 0x0, Size: 1]
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object, Addr: 0x76903c8a80
	EQSParametrizedQueryExecutionRequest StructProperty; 	//[Offset: 0x0, Size: 80]
Class: BTTaskNode.BTNode.Object, Addr: 0x76903c8580
	BTService*[] Services; //[Offset: 0x0, Size: 16]
	bool bIgnoreRestartSelf; 	//[Offset: 0x0, Size: 1]
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object, Addr: 0x76903c8800
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object, Addr: 0x76903c8300
	AIController* AIOwner; 	//[Offset: 0x0, Size: 8]
	Actor* ActorOwner; 	//[Offset: 0x0, Size: 8]
	IntervalCountdown StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bShowPropertyDetails; 	//[Offset: 0x0, Size: 1]
	Void SetFinishOnMessageWithId(FName MessageName, int RequestID); //Addr 0x75ee5c3ea8 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc50f00
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object, Addr: 0x76903c8080
	enum EBTNodeResult Result { //[Offset: 0x0, Size: 1]
		Succeeded = 0
		Failed = 45003a00000000
		Aborted = 65005200000000
		InProgress = 4d005f00000000
		EBTNodeResult_MAX = 0
	};
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object, Addr: 0x76903c7e00
	bool bWaitForGameplayTask; 	//[Offset: 0x0, Size: 1]
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object, Addr: 0x76903c7b80
	float Loudnes; 	//[Offset: 0x0, Size: 4]
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object, Addr: 0x76903c7680
	float AcceptableRadius; 	//[Offset: 0x0, Size: 4]
	NavigationQueryFilter* FilterClass; 	//[Offset: 0x0, Size: 8]
	float ObservedBlackboardValueTolerance; 	//[Offset: 0x0, Size: 4]
	bool bObserveBlackboardValue; 	//[Offset: 0x0, Size: 1]
	bool bAllowStrafe; 	//[Offset: 0x0, Size: 1]
	bool bAllowPartialPath; 	//[Offset: 0x0, Size: 1]
	bool bTrackMovingGoal; 	//[Offset: 0x0, Size: 1]
	bool bProjectGoalLocation; 	//[Offset: 0x0, Size: 1]
	bool bReachTestIncludesAgentRadius; 	//[Offset: 0x0, Size: 1]
	bool bReachTestIncludesGoalRadius; 	//[Offset: 0x0, Size: 1]
	bool bStopOnOverlap; 	//[Offset: 0x0, Size: 1]
	bool bStopOnOverlapNeedsUpdate; 	//[Offset: 0x0, Size: 1]
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object, Addr: 0x76903c7900
	bool bDisablePathUpdateOnGoalLocationChange; 	//[Offset: 0x0, Size: 1]
	bool bProjectVectorGoalToNavigation; 	//[Offset: 0x0, Size: 1]
	bool bUpdatedDeprecatedProperties; 	//[Offset: 0x0, Size: 1]
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object, Addr: 0x76903c7400
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object, Addr: 0x76903c7180
	AnimationAsset* AnimationToPlay; 	//[Offset: 0x0, Size: 8]
	bool bLooping; 	//[Offset: 0x0, Size: 1]
	bool bNonBlocking; 	//[Offset: 0x0, Size: 1]
	BehaviorTreeComponent* MyOwnerComp; 	//[Offset: 0x0, Size: 8]
	SkeletalMeshComponent* CachedSkelMesh; 	//[Offset: 0x0, Size: 8]
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object, Addr: 0x76903c6f00
	SoundCue* SoundToPlay; 	//[Offset: 0x0, Size: 8]
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object, Addr: 0x76903c6c80
	PawnAction* Action; 	//[Offset: 0x0, Size: 8]
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object, Addr: 0x76903c6a00
	float Precision; 	//[Offset: 0x0, Size: 4]
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object, Addr: 0x76903c6780
	BehaviorTree* BehaviorAsset; 	//[Offset: 0x0, Size: 8]
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object, Addr: 0x76903c6500
	GameplayTag StructProperty; 	//[Offset: 0x0, Size: 12]
	BehaviorTree* DefaultBehaviorAsset; 	//[Offset: 0x0, Size: 8]
	BehaviorTree* BehaviorAsset; 	//[Offset: 0x0, Size: 8]
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object, Addr: 0x76903c6280
	EnvQuery* QueryTemplate; 	//[Offset: 0x0, Size: 8]
	structEnvNamedValue[] QueryParams; //[Offset: 0x0, Size: 16]
	structAIDynamicParam[] QueryConfig; //[Offset: 0x0, Size: 16]
	enum EEnvQueryRunMode RunMode { //[Offset: 0x0, Size: 1]
		SingleResult = 0
		RandomBest5Pct = 3a006700000000
		RandomBest25Pct = 74006100000000
		AllMatching = 58004100000000
		EEnvQueryRunMode_MAX = 0
	};
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bUseBBKey; 	//[Offset: 0x0, Size: 1]
	EQSParametrizedQueryExecutionRequest StructProperty; 	//[Offset: 0x0, Size: 80]
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object, Addr: 0x76903c6000
	GameplayTag StructProperty; 	//[Offset: 0x0, Size: 12]
	bool bAddToExistingDuration; 	//[Offset: 0x0, Size: 1]
	float CooldownDuration; 	//[Offset: 0x0, Size: 4]
Class: BTTask_Wait.BTTaskNode.BTNode.Object, Addr: 0x76903c5d80
	float WaitTime; 	//[Offset: 0x0, Size: 4]
	float RandomDeviation; 	//[Offset: 0x0, Size: 4]
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object, Addr: 0x76903c5b00
	BlackboardKeySelector StructProperty; 	//[Offset: 0x0, Size: 48]
Class: CrowdAgentInterface.Interface.Object, Addr: 0x76903c5880
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object, Addr: 0x76903c5600
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Void SuspendCrowdSteering(bool bSuspend); //Addr 0x75ee5c8fd8 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc50a00
Class: CrowdManager.CrowdManagerBase.Object, Addr: 0x76903cf600
	NavigationData* MyNavData; 	//[Offset: 0x0, Size: 8]
	structCrowdAvoidanceConfig[] AvoidanceConfig; //[Offset: 0x0, Size: 16]
	structCrowdAvoidanceSamplingPattern[] SamplingPatterns; //[Offset: 0x0, Size: 16]
	int MaxAgents; 	//[Offset: 0x0, Size: 4]
	float MaxAgentRadius; 	//[Offset: 0x0, Size: 4]
	int MaxAvoidedAgents; 	//[Offset: 0x0, Size: 4]
	int MaxAvoidedWalls; 	//[Offset: 0x0, Size: 4]
	float NavmeshCheckInterval; 	//[Offset: 0x0, Size: 4]
	float PathOptimizationInterval; 	//[Offset: 0x0, Size: 4]
	float SeparationDirClamp; 	//[Offset: 0x0, Size: 4]
	float PathOffsetRadiusMultiplier; 	//[Offset: 0x0, Size: 4]
	bool bResolveCollisions; 	//[Offset: 0x0, Size: 1]
Class: DetourCrowdAIController.AIController.Controller.Actor.Object, Addr: 0x76903cf380
Class: EnvQuery.DataAsset.Object, Addr: 0x76903cf100
	FName QueryName; 	//[Offset: 0x0, Size: 12]
	EnvQueryOption*[] Options; //[Offset: 0x0, Size: 16]
Class: EnvQueryContext.Object, Addr: 0x76903cee80
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object, Addr: 0x76903cec00
	Void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, outstructVector ResultingLocation); //Addr 0x75ec080c04 [Event|BlueprintEvent|Const] // UFieldProperty addr: 0x75abc50600
Class: EnvQueryContext_Item.EnvQueryContext.Object, Addr: 0x76903ce980
Class: EnvQueryContext_Querier.EnvQueryContext.Object, Addr: 0x76903ce700
Class: EnvQueryDebugHelpers.Object, Addr: 0x76903ce480
Class: EnvQueryNode.Object, Addr: 0x76903cdf80
	int VerNum; 	//[Offset: 0x0, Size: 4]
Class: EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903ce200
	StrProperty OptionName; 	//[Offset: 0x0, Size: 16]
	EnvQueryItemType* ItemType; 	//[Offset: 0x0, Size: 8]
	bool bAutoSortTests; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cdd00
	Actor* SearchedActorClass; 	//[Offset: 0x0, Size: 8]
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvQueryContext* SearchCenter; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cda80
	FText GeneratorsActionDescription; 	//[Offset: 0x0, Size: 24]
	EnvQueryContext* Context; 	//[Offset: 0x0, Size: 8]
	EnvQueryItemType* GeneratedItemType; 	//[Offset: 0x0, Size: 8]
	Object* GetQuerier(); //Addr 0x75ee5cadac [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abc50200
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cd800
	EnvQueryGenerator*[] Generators; //[Offset: 0x0, Size: 16]
	bool bAllowDifferentItemTypes; 	//[Offset: 0x0, Size: 1]
	bool bHasMatchingItemType; 	//[Offset: 0x0, Size: 1]
	EnvQueryItemType* ForcedItemType; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cd300
	EnvTraceData StructProperty; 	//[Offset: 0x0, Size: 48]
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cd580
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvQueryContext* CenterActor; 	//[Offset: 0x0, Size: 8]
	bool bIncludeContextLocation; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cd080
	EnvQueryContext* QueryContext; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cce00
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderIntValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderIntValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvDirection StructProperty; 	//[Offset: 0x0, Size: 32]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	bool bUseSpiralPattern; 	//[Offset: 0x0, Size: 1]
	EnvQueryContext* Center; 	//[Offset: 0x0, Size: 8]
	bool bDefineArc; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903ccb80
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderIntValue StructProperty; 	//[Offset: 0x0, Size: 64]
	enum EPointOnCircleSpacingMethod PointOnCircleSpacingMethod { //[Offset: 0x0, Size: 1]
		BySpaceBetween = 0
		ByNumberOfPoints = 54007900000000
		EPointOnCircleSpacingMethod_MAX = 0
	};
	EnvDirection StructProperty; 	//[Offset: 0x0, Size: 32]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	float AngleRadians; 	//[Offset: 0x0, Size: 4]
	EnvQueryContext* CircleCenter; 	//[Offset: 0x0, Size: 8]
	bool bIgnoreAnyContextActorsWhenGeneratingCircle; 	//[Offset: 0x0, Size: 1]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvTraceData StructProperty; 	//[Offset: 0x0, Size: 48]
	bool bDefineArc; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cc680
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvQueryContext* GenerateAround; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object, Addr: 0x76903cc900
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	NavigationQueryFilter* NavigationFilter; 	//[Offset: 0x0, Size: 8]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
Class: EnvQueryInstanceBlueprintWrapper.Object, Addr: 0x76903cc400
	int QueryID; 	//[Offset: 0x0, Size: 4]
	EnvQueryItemType* ItemType; 	//[Offset: 0x0, Size: 8]
	int OptionIndex; 	//[Offset: 0x0, Size: 4]
	delegate OnQueryFinishedEvent; 	//[Offset: 0x0, Size: 16]
	Void SetNamedParam(FName ParamName, float Value); //Addr 0x75ee5cfbb0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0ca1900
Class: EnvQueryItemType.Object, Addr: 0x76903cc180
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object, Addr: 0x76903cba00
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object, Addr: 0x76903cbc80
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object, Addr: 0x76903cbf00
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object, Addr: 0x76903cb780
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object, Addr: 0x76903cb500
Class: EnvQueryManager.AISubsystem.Object, Addr: 0x76903cb280
	structEnvQueryInstanceCache[] InstanceCache; //[Offset: 0x0, Size: 16]
	EnvQueryContext*[] LocalContexts; //[Offset: 0x0, Size: 16]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers; //[Offset: 0x0, Size: 16]
	float MaxAllowedTestingTime; 	//[Offset: 0x0, Size: 4]
	bool bTestQueriesUsingBreadth; 	//[Offset: 0x0, Size: 1]
	int QueryCountWarningThreshold; 	//[Offset: 0x0, Size: 4]
	double QueryCountWarningInterval; 	//[Offset: 0x0, Size: 8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, RunMode(ByteProperty) RunMode, classEnvQueryInstanceBlueprintWrapper WrapperClass); //Addr 0x75ee5d1310 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abc50100
Class: EnvQueryOption.Object, Addr: 0x76903cb000
	EnvQueryGenerator* Generator; 	//[Offset: 0x0, Size: 8]
	EnvQueryTest*[] Tests; //[Offset: 0x0, Size: 16]
Class: EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903cad80
	int TestOrder; 	//[Offset: 0x0, Size: 4]
	enum EEnvTestPurpose TestPurpose { //[Offset: 0x0, Size: 1]
		Filter = 0
		Score = 6e004500000000
		FilterAndScore = 65007300000000
		EEnvTestPurpose_MAX = 0
	};
	StrProperty TestComment; 	//[Offset: 0x0, Size: 16]
	enum EEnvTestFilterOperator MultipleContextFilterOp { //[Offset: 0x0, Size: 1]
		AllPass = 0
		AnyPass = 6f007400000000
		EEnvTestFilterOperator_MAX = 0
	};
	enum EEnvTestScoreOperator MultipleContextScoreOp { //[Offset: 0x0, Size: 1]
		AverageScore = 0
		MinScore = 3a006700000000
		MaxScore = 74006100000000
		Multiply = 58004100000000
		EEnvTestScoreOperator_MAX = 0
	};
	enum EEnvTestFilterType FilterType { //[Offset: 0x0, Size: 1]
		Minimum = 0
		Maximum = 3a006700000000
		Range = 74006100000000
		Match = 58004100000000
		EEnvTestFilterType_MAX = 0
	};
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	enum EEnvTestScoreEquation ScoringEquation { //[Offset: 0x0, Size: 1]
		Linear = 0
		Square = 6e006900000000
		InverseLinear = 6f005000000000
		SquareRoot = 53006500000000
		Constant = 64006f00000000
		EEnvTestScoreEquation_MAX = 0
	};
	enum EEnvQueryTestClamping ClampMinType { //[Offset: 0x0, Size: 1]
		None = 0
		SpecifiedValue = 6e004500000000
		FilterThreshold = 6c004300000000
		EEnvQueryTestClamping_MAX = 0
	};
	enum EEnvQueryTestClamping ClampMaxType { //[Offset: 0x0, Size: 1]
		None = 0
		SpecifiedValue = 6e004500000000
		FilterThreshold = 6c004300000000
		EEnvQueryTestClamping_MAX = 0
	};
	enum EEQSNormalizationType NormalizationType { //[Offset: 0x0, Size: 1]
		Absolute = 0
		RelativeToScores = 54007900000000
		EEQSNormalizationType_MAX = 0
	};
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	bool bDefineReferenceValue; 	//[Offset: 0x0, Size: 1]
	bool bWorkOnFloatValues; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903cab00
	enum EEnvTestDistance TestMode { //[Offset: 0x0, Size: 1]
		Distance3D = 0
		Distance2D = 6f005000000000
		DistanceZ = 53006500000000
		DistanceAbsoluteZ = 64006f00000000
		EEnvTestDistance_MAX = 0
	};
	EnvQueryContext* DistanceTo; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903ca880
	EnvDirection StructProperty; 	//[Offset: 0x0, Size: 32]
	EnvDirection StructProperty; 	//[Offset: 0x0, Size: 32]
	enum EEnvTestDot TestMode { //[Offset: 0x0, Size: 1]
		Dot3D = 0
		Dot2D = 41004d00000000
		EEnvTestDot_MAX = 0
	};
	bool bAbsoluteValue; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903ca600
	GameplayTagQuery StructProperty; 	//[Offset: 0x0, Size: 72]
	bool bUpdatedToUseQuery; 	//[Offset: 0x0, Size: 1]
	enum EGameplayContainerMatchType TagsToMatch { //[Offset: 0x0, Size: 1]
		Any = 0
		All = 73006700000000
		EGameplayContainerMatchType_MAX = 0
	};
	GameplayTagContainer StructProperty; 	//[Offset: 0x0, Size: 32]
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903cfd80
	EnvOverlapData StructProperty; 	//[Offset: 0x0, Size: 28]
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903cfb00
	enum EEnvTestPathfinding TestMode { //[Offset: 0x0, Size: 1]
		PathExist = 0
		PathCost = 6e004500000000
		PathLength = 6e006900000000
		EEnvTestPathfinding_MAX = 0
	};
	EnvQueryContext* Context; 	//[Offset: 0x0, Size: 8]
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	NavigationQueryFilter* FilterClass; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903cf880
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903d5100
	EnvTraceData StructProperty; 	//[Offset: 0x0, Size: 48]
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903d4e80
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903d4c00
	EnvTraceData StructProperty; 	//[Offset: 0x0, Size: 48]
	AIDataProviderBoolValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	AIDataProviderFloatValue StructProperty; 	//[Offset: 0x0, Size: 64]
	EnvQueryContext* Context; 	//[Offset: 0x0, Size: 8]
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object, Addr: 0x76903d4980
	EnvQueryContext* VolumeContext; 	//[Offset: 0x0, Size: 8]
	Volume* VolumeClass; 	//[Offset: 0x0, Size: 8]
	bool bDoComplexVolumeTest; 	//[Offset: 0x0, Size: 1]
Class: EnvQueryTypes.Object, Addr: 0x76903d4700
Class: EQSQueryResultSourceInterface.Interface.Object, Addr: 0x76903d4480
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903d4200
Class: EQSTestingPawn.Character.Pawn.Actor.Object, Addr: 0x76903d3f80
	EnvQuery* QueryTemplate; 	//[Offset: 0x0, Size: 8]
	structEnvNamedValue[] QueryParams; //[Offset: 0x0, Size: 16]
	structAIDynamicParam[] QueryConfig; //[Offset: 0x0, Size: 16]
	float TimeLimitPerStep; 	//[Offset: 0x0, Size: 4]
	int StepToDebugDraw; 	//[Offset: 0x0, Size: 4]
	enum EEnvQueryHightlightMode HighlightMode { //[Offset: 0x0, Size: 1]
		All = 0
		Best5Pct = 6e004500000000
		Best25Pct = 65007300000000
		EEnvQueryHightlightMode_MAX = 0
	};
	bool bDrawLabels; 	//[Offset: 0x0, Size: 1]
	bool bDrawFailedItems; 	//[Offset: 0x0, Size: 1]
	bool bReRunQueryOnlyOnFinishedMove; 	//[Offset: 0x0, Size: 1]
	bool bShouldBeVisibleInGame; 	//[Offset: 0x0, Size: 1]
	bool bTickDuringGame; 	//[Offset: 0x0, Size: 1]
	enum EEnvQueryRunMode QueryingMode { //[Offset: 0x0, Size: 1]
		SingleResult = 0
		RandomBest5Pct = 3a006700000000
		RandomBest25Pct = 74006100000000
		AllMatching = 58004100000000
		EEnvQueryRunMode_MAX = 0
	};
	NavAgentProperties StructProperty; 	//[Offset: 0x0, Size: 56]
Class: GenericTeamAgentInterface.Interface.Object, Addr: 0x76903d3d00
Class: GridPathAIController.AIController.Controller.Actor.Object, Addr: 0x76903d3a80
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object, Addr: 0x76903d3800
	NavLocalGridManager* GridManager; 	//[Offset: 0x0, Size: 8]
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object, Addr: 0x76903d3580
Class: NavLinkProxy.Actor.Object, Addr: 0x76903d3300
	structNavigationLink[] PointLinks; //[Offset: 0x0, Size: 16]
	structNavigationSegmentLink[] SegmentLinks; //[Offset: 0x0, Size: 16]
	NavLinkCustomComponent* SmartLinkComp; 	//[Offset: 0x0, Size: 8]
	bool bSmartLinkIsRelevant; 	//[Offset: 0x0, Size: 1]
	delegate OnSmartLinkReached; 	//[Offset: 0x0, Size: 16]
	Void SetSmartLinkEnabled(bool bEnabled); //Addr 0x75ee5d8dbc [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc53e00
Class: NavLocalGridManager.Object, Addr: 0x76903d3080
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize); //Addr 0x75ee5d9fa4 [Final|Native|Static|BlueprintCallabl] // UFieldProperty addr: 0x75abc53700
Class: PathFollowingManager.Object, Addr: 0x76903d2e00
Class: PawnAction.Object, Addr: 0x76903d2b80
	PawnAction* ChildAction; 	//[Offset: 0x0, Size: 8]
	PawnAction* ParentAction; 	//[Offset: 0x0, Size: 8]
	PawnActionsComponent* OwnerComponent; 	//[Offset: 0x0, Size: 8]
	Object* Instigator; 	//[Offset: 0x0, Size: 8]
	BrainComponent* BrainComp; 	//[Offset: 0x0, Size: 8]
	bool bAllowNewSameClassInstance; 	//[Offset: 0x0, Size: 1]
	bool bReplaceActiveSameClassInstance; 	//[Offset: 0x0, Size: 1]
	bool bShouldPauseMovement; 	//[Offset: 0x0, Size: 1]
	bool bAlwaysNotifyOnFinished; 	//[Offset: 0x0, Size: 1]
	ReturnValue(ByteProperty) GetActionPriority(); //Addr 0x75ee5db31c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc53400
Class: PawnAction_BlueprintBase.PawnAction.Object, Addr: 0x76903d2900
	Void ActionTick(Pawn* ControlledPawn, float DeltaSeconds); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abc52f00
Class: PawnAction_Move.PawnAction.Object, Addr: 0x76903d2680
	Actor* GoalActor; 	//[Offset: 0x0, Size: 8]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float AcceptableRadius; 	//[Offset: 0x0, Size: 4]
	NavigationQueryFilter* FilterClass; 	//[Offset: 0x0, Size: 8]
	bool bAllowStrafe; 	//[Offset: 0x0, Size: 1]
	bool bFinishOnOverlap; 	//[Offset: 0x0, Size: 1]
	bool bUsePathfinding; 	//[Offset: 0x0, Size: 1]
	bool bAllowPartialPath; 	//[Offset: 0x0, Size: 1]
	bool bProjectGoalToNavigation; 	//[Offset: 0x0, Size: 1]
	bool bUpdatePathToGoal; 	//[Offset: 0x0, Size: 1]
	bool bAbortChildActionOnPathChange; 	//[Offset: 0x0, Size: 1]
Class: PawnAction_Repeat.PawnAction.Object, Addr: 0x76903d2400
	PawnAction* ActionToRepeat; 	//[Offset: 0x0, Size: 8]
	PawnAction* RecentActionCopy; 	//[Offset: 0x0, Size: 8]
	enum EPawnActionFailHandling ChildFailureHandlingMode { //[Offset: 0x0, Size: 1]
		RequireSuccess = 0
		IgnoreFailure = 73007500000000
		EPawnActionFailHandling_MAX = 0
	};
Class: PawnAction_Sequence.PawnAction.Object, Addr: 0x76903d2180
	PawnAction*[] ActionSequence; //[Offset: 0x0, Size: 16]
	enum EPawnActionFailHandling ChildFailureHandlingMode { //[Offset: 0x0, Size: 1]
		RequireSuccess = 0
		IgnoreFailure = 73007500000000
		EPawnActionFailHandling_MAX = 0
	};
	PawnAction* RecentActionCopy; 	//[Offset: 0x0, Size: 8]
Class: PawnAction_Wait.PawnAction.Object, Addr: 0x76903d1f00
	float TimeToWait; 	//[Offset: 0x0, Size: 4]
Class: PawnSensingComponent.ActorComponent.Object, Addr: 0x76903d1a00
	float HearingThreshold; 	//[Offset: 0x0, Size: 4]
	float LOSHearingThreshold; 	//[Offset: 0x0, Size: 4]
	float SightRadius; 	//[Offset: 0x0, Size: 4]
	float SensingInterval; 	//[Offset: 0x0, Size: 4]
	float HearingMaxSoundAge; 	//[Offset: 0x0, Size: 4]
	bool bEnableSensingUpdates; 	//[Offset: 0x0, Size: 1]
	bool bOnlySensePlayers; 	//[Offset: 0x0, Size: 1]
	bool bSeePawns; 	//[Offset: 0x0, Size: 1]
	bool bHearNoises; 	//[Offset: 0x0, Size: 1]
	delegate OnSeePawn; 	//[Offset: 0x0, Size: 16]
	delegate OnHearNoise; 	//[Offset: 0x0, Size: 16]
	float PeripheralVisionAngle; 	//[Offset: 0x0, Size: 4]
	float PeripheralVisionCosine; 	//[Offset: 0x0, Size: 4]
	Void SetSensingUpdatesEnabled(constbool bEnabled); //Addr 0x75ee5dd1e0 [BlueprintAuthorityOly|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0ca0e00
Class: VisualLoggerExtension.Object, Addr: 0x76903d1780
Class: WebBrowserTexture.Texture.StreamableRenderAsset.Object, Addr: 0x76903d1500
Class: GPMPluginSettings.DeveloperSettings.Object, Addr: 0x76903d1280
	StrProperty ProjectName; 	//[Offset: 0x0, Size: 16]
	StrProperty EngineVersion; 	//[Offset: 0x0, Size: 16]
	StrProperty CodeVersion; 	//[Offset: 0x0, Size: 16]
	StrProperty GameVersion; 	//[Offset: 0x0, Size: 16]
Class: LiveLinkRole.Object, Addr: 0x76903d0b00
Class: LiveLinkBasicRole.LiveLinkRole.Object, Addr: 0x76903d0d80
Class: LiveLinkAnimationRole.LiveLinkBasicRole.LiveLinkRole.Object, Addr: 0x76903d1000
Class: LiveLinkTransformRole.LiveLinkBasicRole.LiveLinkRole.Object, Addr: 0x76903d0600
Class: LiveLinkCameraRole.LiveLinkTransformRole.LiveLinkBasicRole.LiveLinkRole.Object, Addr: 0x76903d0880
Class: LiveLinkController.Object, Addr: 0x76903d0380
Class: LiveLinkCurveRemapSettings.LiveLinkSourceSettings.Object, Addr: 0x76903d0100
	LiveLinkCurveConversionSettings StructProperty; 	//[Offset: 0x0, Size: 80]
Class: LiveLinkLightRole.LiveLinkTransformRole.LiveLinkBasicRole.LiveLinkRole.Object, Addr: 0x76903da380
Class: LiveLinkSubjectSettings.Object, Addr: 0x76903da100
	LiveLinkFramePreProcessor*[] PreProcessors; //[Offset: 0x0, Size: 16]
	LiveLinkFrameInterpolationProcessor* InterpolationProcessor; 	//[Offset: 0x0, Size: 8]
	LiveLinkFrameTranslator*[] Translators; //[Offset: 0x0, Size: 16]
	LiveLinkRole* Role; 	//[Offset: 0x0, Size: 8]
	FrameRate StructProperty; 	//[Offset: 0x0, Size: 8]
	bool bRebroadcastSubject; 	//[Offset: 0x0, Size: 1]
Class: ChaosDebugDrawComponent.ActorComponent.Object, Addr: 0x76903d9e80
Class: ChaosEventListenerComponent.ActorComponent.Object, Addr: 0x76903d9c00
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object, Addr: 0x76903d9980
	<PrimitiveComponent*, structChaosHandlerSet> CollisionEventRegistrations; //[Offset: 0x0, Size: 80]
	<PrimitiveComponent*, structBreakEventCallbackWrapper> BreakEventRegistrations; //[Offset: 0x0, Size: 80]
Class: ChaosNotifyHandlerInterface.Interface.Object, Addr: 0x76903d9700
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object, Addr: 0x76903d9480
	structHitResult ConvertPhysicsCollisionToHitResult(constoutrefstructChaosPhysicsCollisionInfo PhysicsCollision); //Addr 0x75ee63ae00 [Final|Native|Static|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc52a00
Class: ChaosSolver.Object, Addr: 0x76903d9200
Class: ChaosSolverActor.Actor.Object, Addr: 0x76903d8f80
	ChaosSolverConfiguration StructProperty; 	//[Offset: 0x0, Size: 104]
	float TimeStepMultiplier; 	//[Offset: 0x0, Size: 4]
	int CollisionIterations; 	//[Offset: 0x0, Size: 4]
	int PushOutIterations; 	//[Offset: 0x0, Size: 4]
	int PushOutPairIterations; 	//[Offset: 0x0, Size: 4]
	float ClusterConnectionFactor; 	//[Offset: 0x0, Size: 4]
	enum EClusterConnectionTypeEnum ClusterUnionConnectionType { //[Offset: 0x0, Size: 1]
		Chaos_PointImplicit = 0
		Chaos_DelaunayTriangulation = 0
		Chaos_MinimalSpanningSubsetDelaunayTriangulation = 0
		Chaos_PointImplicitAugmentedWithMinimalDelaunay = 0
		Chaos_None = 0
		Chaos_EClsuterCreationParameters_Max = 0
		Chaos_MAX = 0
	};
	bool DoGenerateCollisionData; 	//[Offset: 0x0, Size: 1]
	SolverCollisionFilterSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	bool DoGenerateBreakingData; 	//[Offset: 0x0, Size: 1]
	SolverBreakingFilterSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	bool DoGenerateTrailingData; 	//[Offset: 0x0, Size: 1]
	SolverTrailingFilterSettings StructProperty; 	//[Offset: 0x0, Size: 16]
	float MassScale; 	//[Offset: 0x0, Size: 4]
	bool bGenerateContactGraph; 	//[Offset: 0x0, Size: 1]
	bool bHasFloor; 	//[Offset: 0x0, Size: 1]
	float FloorHeight; 	//[Offset: 0x0, Size: 4]
	ChaosDebugSubstepControl StructProperty; 	//[Offset: 0x0, Size: 3]
	BillboardComponent* SpriteComponent; 	//[Offset: 0x0, Size: 8]
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent; 	//[Offset: 0x0, Size: 8]
	Void SetSolverActive(bool bActive); //Addr 0x75ee63b424 [Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc52800
Class: ChaosSolverSettings.DeveloperSettings.Object, Addr: 0x76903d8d00
	SoftClassPath StructProperty; 	//[Offset: 0x0, Size: 32]
Class: FieldSystemActor.Actor.Object, Addr: 0x76903d8a80
	FieldSystemComponent* FieldSystemComponent; 	//[Offset: 0x0, Size: 8]
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903d8580
	FieldSystem* FieldSystem; 	//[Offset: 0x0, Size: 8]
	ChaosSolverActor*[] SupportedSolvers; //[Offset: 0x0, Size: 16]
	Void ResetFieldSystem(); //Addr 0x75ee643220 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc56100
Class: FieldSystem.Object, Addr: 0x76903d8800
Class: FieldSystemMetaData.ActorComponent.Object, Addr: 0x76903d8300
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object, Addr: 0x76903d8080
	int Iterations; 	//[Offset: 0x0, Size: 4]
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations); //Addr 0x75ee644550 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc56000
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object, Addr: 0x76903d7e00
	enum EFieldResolutionType ResolutionType { //[Offset: 0x0, Size: 1]
		Field_Resolution_Minimal = 0
		Field_Resolution_DisabledParents = 64006c00000000
		Field_Resolution_Maximum = 75006100000000
		Field_Resolution_Max = 58004100000000
		Field_Resolution_Max = 0
	};
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(ResolutionType(ByteProperty) ResolutionType); //Addr 0x75ee64491c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55f00
Class: FieldNodeBase.ActorComponent.Object, Addr: 0x76903d7b80
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d7900
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d7680
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d7400
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d7180
	int Magnitude; 	//[Offset: 0x0, Size: 4]
	UniformInteger* SetUniformInteger(int Magnitude); //Addr 0x75ee6453b8 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55e00
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6f00
	float Radius; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	int InteriorValue; 	//[Offset: 0x0, Size: 4]
	int ExteriorValue; 	//[Offset: 0x0, Size: 4]
	enum ESetMaskConditionType SetMaskCondition { //[Offset: 0x0, Size: 1]
		Field_Set_Always = 0
		Field_Set_IFF_NOT_Interior = 64006c00000000
		Field_Set_IFF_NOT_Exterior = 61007200000000
		Field_MaskCondition_Max = 58004100000000
	};
	RadialIntMask* SetRadialIntMask(float Radius, structVector position, int InteriorValue, int ExteriorValue, SetMaskConditionIn(ByteProperty) SetMaskConditionIn); //Addr 0x75ee64578c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55d00
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6c80
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	UniformScalar* SetUniformScalar(float Magnitude); //Addr 0x75ee645c94 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55c00
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6a00
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	float MinRange; 	//[Offset: 0x0, Size: 4]
	float MaxRange; 	//[Offset: 0x0, Size: 4]
	float Default; 	//[Offset: 0x0, Size: 4]
	float Radius; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum EFieldFalloffType Falloff { //[Offset: 0x0, Size: 1]
		Field_FallOff_None = 0
		Field_Falloff_Linear = 56007500000000
		Field_Falloff_Inverse = 45003a00000000
		Field_Falloff_Squared = 6f005400000000
		Field_Falloff_Logarithmic = 69006200000000
		Field_Falloff_Max = 58000000000000
	};
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, structVector position, Falloff(ByteProperty) Falloff); //Addr 0x75ee64606c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55b00
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6780
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	float MinRange; 	//[Offset: 0x0, Size: 4]
	float MaxRange; 	//[Offset: 0x0, Size: 4]
	float Default; 	//[Offset: 0x0, Size: 4]
	float Distance; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	enum EFieldFalloffType Falloff { //[Offset: 0x0, Size: 1]
		Field_FallOff_None = 0
		Field_Falloff_Linear = 56007500000000
		Field_Falloff_Inverse = 45003a00000000
		Field_Falloff_Squared = 6f005400000000
		Field_Falloff_Logarithmic = 69006200000000
		Field_Falloff_Max = 58000000000000
	};
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, structVector position, structVector Normal, Falloff(ByteProperty) Falloff); //Addr 0x75ee64661c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55a00
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6500
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	float MinRange; 	//[Offset: 0x0, Size: 4]
	float MaxRange; 	//[Offset: 0x0, Size: 4]
	float Default; 	//[Offset: 0x0, Size: 4]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	enum EFieldFalloffType Falloff { //[Offset: 0x0, Size: 1]
		Field_FallOff_None = 0
		Field_Falloff_Linear = 56007500000000
		Field_Falloff_Inverse = 45003a00000000
		Field_Falloff_Squared = 6f005400000000
		Field_Falloff_Logarithmic = 69006200000000
		Field_Falloff_Max = 58000000000000
	};
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, structTransform Transform, Falloff(ByteProperty) Falloff); //Addr 0x75ee646c28 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55900
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6280
	float MinRange; 	//[Offset: 0x0, Size: 4]
	float MaxRange; 	//[Offset: 0x0, Size: 4]
	Transform StructProperty; 	//[Offset: 0x0, Size: 48]
	NoiseField* SetNoiseField(float MinRange, float MaxRange, structTransform Transform); //Addr 0x75ee6471c4 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55800
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d6000
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	UniformVector* SetUniformVector(float Magnitude, structVector Direction); //Addr 0x75ee64768c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55700
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d5d80
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	RadialVector* SetRadialVector(float Magnitude, structVector position); //Addr 0x75ee647aac [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55600
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d5b00
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	RandomVector* SetRandomVector(float Magnitude); //Addr 0x75ee647ecc [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55500
Class: OperatorField.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d5880
	float Magnitude; 	//[Offset: 0x0, Size: 4]
	FieldNodeBase* RightField; 	//[Offset: 0x0, Size: 8]
	FieldNodeBase* LeftField; 	//[Offset: 0x0, Size: 8]
	enum EFieldOperationType Operation { //[Offset: 0x0, Size: 1]
		Field_Multiply = 0
		Field_Divide = 65006500000000
		Field_Add = 50006f00000000
		Field_Substract = 63005300000000
		Field_Operation_Max = 58004100000000
	};
	OperatorField* SetOperatorField(float Magnitude, constFieldNodeBase* RightField, constFieldNodeBase* LeftField, Operation(ByteProperty) Operation); //Addr 0x75ee6482a4 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55400
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d5600
	FieldNodeFloat* FloatField; 	//[Offset: 0x0, Size: 8]
	ToIntegerField* SetToIntegerField(constFieldNodeFloat* FloatField); //Addr 0x75ee648764 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55300
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object, Addr: 0x76903d5380
	FieldNodeInt* IntField; 	//[Offset: 0x0, Size: 8]
	ToFloatField* SetToFloatField(constFieldNodeInt* IntegerField); //Addr 0x75ee648b38 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55200
Class: CullingField.FieldNodeBase.ActorComponent.Object, Addr: 0x76903df600
	FieldNodeBase* Culling; 	//[Offset: 0x0, Size: 8]
	FieldNodeBase* Field; 	//[Offset: 0x0, Size: 8]
	enum EFieldCullingOperationType Operation { //[Offset: 0x0, Size: 1]
		Field_Culling_Inside = 0
		Field_Culling_Outside = 64006c00000000
		Field_Culling_Operation_Max = 79005400000000
		Field_Culling_MAX = 7500000000
	};
	CullingField* SetCullingField(constFieldNodeBase* Culling, constFieldNodeBase* Field, Operation(ByteProperty) Operation); //Addr 0x75ee648f0c [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55100
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object, Addr: 0x76903df380
	ReturnResultsTerminal* SetReturnResultsTerminal(); //Addr 0x75ee649378 [Final|Native|BlueprintCallabl|BlueprintPure] // UFieldProperty addr: 0x75abc55000
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object, Addr: 0x76903df100
	bool bIsCollisionEventListeningEnabled; 	//[Offset: 0x0, Size: 1]
	bool bIsBreakingEventListeningEnabled; 	//[Offset: 0x0, Size: 1]
	bool bIsTrailingEventListeningEnabled; 	//[Offset: 0x0, Size: 1]
	ChaosCollisionEventRequestSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	ChaosBreakingEventRequestSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	ChaosTrailingEventRequestSettings StructProperty; 	//[Offset: 0x0, Size: 24]
	ChaosSolverActor* ChaosSolverActors; //[Offset: 0x0, Size: 80]
	GeometryCollectionActor* GeometryCollectionActors; //[Offset: 0x0, Size: 80]
	delegate OnCollisionEvents; 	//[Offset: 0x0, Size: 16]
	delegate OnBreakingEvents; 	//[Offset: 0x0, Size: 16]
	delegate OnTrailingEvents; 	//[Offset: 0x0, Size: 16]
	Void SortTrailingEvents(outrefstructChaosTrailingEventData[] TrailingEvents, enum EChaosTrailingSortMethod SortMethod); //Addr 0x75ee66c5a0 [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75abc58400
Class: GeometryCollectionActor.Actor.Object, Addr: 0x76903dee80
	GeometryCollectionComponent* GeometryCollectionComponent; 	//[Offset: 0x0, Size: 8]
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent; 	//[Offset: 0x0, Size: 8]
	bool RaycastSingle(structVector Start, structVector End, outstructHitResult OutHit); //Addr 0x75ee66de18 [Final|Native|BlueprintCallabl|BlueprintPure|Const] // UFieldProperty addr: 0x75abc58300
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object, Addr: 0x76903de980
	ChaosSolverActor* ChaosSolverActor; 	//[Offset: 0x0, Size: 8]
	GeometryCollection* RestCollection; 	//[Offset: 0x0, Size: 8]
	FieldSystemActor*[] InitializationFields; //[Offset: 0x0, Size: 16]
	bool Simulating; 	//[Offset: 0x0, Size: 1]
	enum EObjectStateTypeEnum ObjectType { //[Offset: 0x0, Size: 1]
		Chaos_NONE = 0
		Chaos_Object_Sleeping = 75006c00000000
		Chaos_Object_Kinematic = 6c004200000000
		Chaos_Object_Static = 75005300000000
		Chaos_Object_Dynamic = 6f004300000000
		Chaos_Object_UserDefined = 76006500000000
		Chaos_Max = 65007a00000000
		Chaos_Max = 0
	};
	bool EnableClustering; 	//[Offset: 0x0, Size: 1]
	int ClusterGroupIndex; 	//[Offset: 0x0, Size: 4]
	int MaxClusterLevel; 	//[Offset: 0x0, Size: 4]
	float[] DamageThreshold; //[Offset: 0x0, Size: 16]
	enum EClusterConnectionTypeEnum ClusterConnectionType { //[Offset: 0x0, Size: 1]
		Chaos_PointImplicit = 0
		Chaos_DelaunayTriangulation = 0
		Chaos_MinimalSpanningSubsetDelaunayTriangulation = 0
		Chaos_PointImplicitAugmentedWithMinimalDelaunay = 0
		Chaos_None = 0
		Chaos_EClsuterCreationParameters_Max = 0
		Chaos_MAX = 0
	};
	int CollisionGroup; 	//[Offset: 0x0, Size: 4]
	float CollisionSampleFraction; 	//[Offset: 0x0, Size: 4]
	float LinearEtherDrag; 	//[Offset: 0x0, Size: 4]
	float AngularEtherDrag; 	//[Offset: 0x0, Size: 4]
	ChaosPhysicalMaterial* PhysicalMaterial; 	//[Offset: 0x0, Size: 8]
	enum EInitialVelocityTypeEnum InitialVelocityType { //[Offset: 0x0, Size: 1]
		Chaos_Initial_Velocity_User_Defined = 0
		Chaos_Initial_Velocity_None = 69007400000000
		Chaos_Max = 79005400000000
		Chaos_Max = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	PhysicalMaterial* PhysicalMaterialOverride; 	//[Offset: 0x0, Size: 8]
	GeomComponentCacheParameters StructProperty; 	//[Offset: 0x0, Size: 80]
	delegate NotifyGeometryCollectionPhysicsStateChange; 	//[Offset: 0x0, Size: 16]
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange; 	//[Offset: 0x0, Size: 16]
	delegate OnChaosBreakEvent; 	//[Offset: 0x0, Size: 16]
	float DesiredCacheTime; 	//[Offset: 0x0, Size: 4]
	bool CachePlayback; 	//[Offset: 0x0, Size: 1]
	delegate OnChaosPhysicsCollision; 	//[Offset: 0x0, Size: 16]
	bool bNotifyBreaks; 	//[Offset: 0x0, Size: 1]
	bool bNotifyCollisions; 	//[Offset: 0x0, Size: 1]
	bool bEnableReplication; 	//[Offset: 0x0, Size: 1]
	bool bEnableAbandonAfterLevel; 	//[Offset: 0x0, Size: 1]
	int ReplicationAbandonClusterLevel; 	//[Offset: 0x0, Size: 4]
	GeometryCollectionRepData StructProperty; 	//[Offset: 0x44eb4, Size: 24]
	BodySetup* DummyBodySetup; 	//[Offset: 0x0, Size: 8]
	Void SetNotifyBreaks(bool bNewNotifyBreaks); //Addr 0x75ee66eb8c [Final|Native|BlueprintCallabl] // UFieldProperty addr: 0x75b0cac000
Class: GeometryCollectionCache.Object, Addr: 0x76903dec00
	RecordedTransformTrack StructProperty; 	//[Offset: 0x0, Size: 16]
	GeometryCollection* SupportedCollection; 	//[Offset: 0x0, Size: 8]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
Class: GeometryCollectionDebugDrawActor.Actor.Object, Addr: 0x76903de700
	GeometryCollectionDebugDrawWarningMessage StructProperty; 	//[Offset: 0x0, Size: 1]
	GeometryCollectionDebugDrawActorSelectedRigidBody StructProperty; 	//[Offset: 0x0, Size: 24]
	bool bDebugDrawWholeCollection; 	//[Offset: 0x0, Size: 1]
	bool bDebugDrawHierarchy; 	//[Offset: 0x0, Size: 1]
	bool bDebugDrawClustering; 	//[Offset: 0x0, Size: 1]
	enum EGeometryCollectionDebugDrawActorHideGeometry HideGeometry { //[Offset: 0x0, Size: 1]
		HideNone = 0
		HideWithCollision = 6c006c00000000
		HideSelected = 65006e00000000
		HideWholeCollection = 6c006900000000
		HideAll = 6f006800000000
		EGeometryCollectionDebugDrawActorHideGeometry_MAX = 0
	};
	bool bShowRigidBodyId; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyCollision; 	//[Offset: 0x0, Size: 1]
	bool bCollisionAtOrigin; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyTransform; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyInertia; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyVelocity; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyForce; 	//[Offset: 0x0, Size: 1]
	bool bShowRigidBodyInfos; 	//[Offset: 0x0, Size: 1]
	bool bShowTransformIndex; 	//[Offset: 0x0, Size: 1]
	bool bShowTransform; 	//[Offset: 0x0, Size: 1]
	bool bShowParent; 	//[Offset: 0x0, Size: 1]
	bool bShowLevel; 	//[Offset: 0x0, Size: 1]
	bool bShowConnectivityEdges; 	//[Offset: 0x0, Size: 1]
	bool bShowGeometryIndex; 	//[Offset: 0x0, Size: 1]
	bool bShowGeometryTransform; 	//[Offset: 0x0, Size: 1]
	bool bShowBoundingBox; 	//[Offset: 0x0, Size: 1]
	bool bShowFaces; 	//[Offset: 0x0, Size: 1]
	bool bShowFaceIndices; 	//[Offset: 0x0, Size: 1]
	bool bShowFaceNormals; 	//[Offset: 0x0, Size: 1]
	bool bShowSingleFace; 	//[Offset: 0x0, Size: 1]
	int SingleFaceIndex; 	//[Offset: 0x0, Size: 4]
	bool bShowVertices; 	//[Offset: 0x0, Size: 1]
	bool bShowVertexIndices; 	//[Offset: 0x0, Size: 1]
	bool bShowVertexNormals; 	//[Offset: 0x0, Size: 1]
	bool bUseActiveVisualization; 	//[Offset: 0x0, Size: 1]
	float PointThickness; 	//[Offset: 0x0, Size: 4]
	float LineThickness; 	//[Offset: 0x0, Size: 4]
	bool bTextShadow; 	//[Offset: 0x0, Size: 1]
	float TextScale; 	//[Offset: 0x0, Size: 4]
	float NormalScale; 	//[Offset: 0x0, Size: 4]
	float AxisScale; 	//[Offset: 0x0, Size: 4]
	float ArrowScale; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float RigidBodyTransformScale; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float TransformScale; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float ConnectivityEdgeThickness; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	float GeometryTransformScale; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	Color StructProperty; 	//[Offset: 0x0, Size: 4]
	BillboardComponent* SpriteComponent; 	//[Offset: 0x0, Size: 8]
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object, Addr: 0x76903de480
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor; 	//[Offset: 0x0, Size: 8]
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor; 	//[Offset: 0x0, Size: 8]
Class: GeometryCollection.Object, Addr: 0x76903de200
	structGeometryCollectionSource[] GeometrySource; //[Offset: 0x0, Size: 16]
	MaterialInterface*[] Materials; //[Offset: 0x0, Size: 16]
	enum ECollisionTypeEnum CollisionType { //[Offset: 0x0, Size: 1]
		Chaos_Volumetric = 0
		Chaos_Surface_Volumetric = 69006c00000000
		Chaos_Max = 6d007500000000
		Chaos_Max = 7500000000
	};
	enum EImplicitTypeEnum ImplicitType { //[Offset: 0x0, Size: 1]
		Chaos_Implicit_Box = 0
		Chaos_Implicit_Sphere = 50006e00000000
		Chaos_Implicit_Capsule = 6e004500000000
		Chaos_Implicit_LevelSet = 6e004900000000
		Chaos_Implicit_None = 72006100000000
		Chaos_Max = 58000000000000
		Chaos_Max = 0
	};
	int MinLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int MaxLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int MinClusterLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int MaxClusterLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	float CollisionObjectReductionPercentage; 	//[Offset: 0x0, Size: 4]
	bool bMassAsDensity; 	//[Offset: 0x0, Size: 1]
	float Mass; 	//[Offset: 0x0, Size: 4]
	float MinimumMassClamp; 	//[Offset: 0x0, Size: 4]
	float CollisionParticlesFraction; 	//[Offset: 0x0, Size: 4]
	int MaximumCollisionParticles; 	//[Offset: 0x0, Size: 4]
	structGeometryCollectionSizeSpecificData[] SizeSpecificData; //[Offset: 0x0, Size: 16]
	bool EnableRemovePiecesOnFracture; 	//[Offset: 0x0, Size: 1]
	MaterialInterface*[] RemoveOnFractureMaterials; //[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	Guid StructProperty; 	//[Offset: 0x0, Size: 16]
	int BoneSelectedMaterialIndex; 	//[Offset: 0x0, Size: 4]
Class: GeometryCollectionRenderLevelSetActor.Actor.Object, Addr: 0x76903ddf80
	VolumeTexture* TargetVolumeTexture; 	//[Offset: 0x0, Size: 8]
	Material* RayMarchMaterial; 	//[Offset: 0x0, Size: 8]
	float SurfaceTolerance; 	//[Offset: 0x0, Size: 4]
	float Isovalue; 	//[Offset: 0x0, Size: 4]
	bool Enabled; 	//[Offset: 0x0, Size: 1]
	bool RenderVolumeBoundingBox; 	//[Offset: 0x0, Size: 1]
Class: SkeletalMeshSimulationComponent.ActorComponent.Object, Addr: 0x76903ddd00
	ChaosPhysicalMaterial* PhysicalMaterial; 	//[Offset: 0x0, Size: 8]
	ChaosSolverActor* ChaosSolverActor; 	//[Offset: 0x0, Size: 8]
	PhysicsAsset* OverridePhysicsAsset; 	//[Offset: 0x0, Size: 8]
	bool bSimulating; 	//[Offset: 0x0, Size: 1]
	bool bNotifyCollisions; 	//[Offset: 0x0, Size: 1]
	enum EObjectStateTypeEnum ObjectType { //[Offset: 0x0, Size: 1]
		Chaos_NONE = 0
		Chaos_Object_Sleeping = 75006c00000000
		Chaos_Object_Kinematic = 6c004200000000
		Chaos_Object_Static = 75005300000000
		Chaos_Object_Dynamic = 6f004300000000
		Chaos_Object_UserDefined = 76006500000000
		Chaos_Max = 65007a00000000
		Chaos_Max = 0
	};
	float Density; 	//[Offset: 0x0, Size: 4]
	float MinMass; 	//[Offset: 0x0, Size: 4]
	float MaxMass; 	//[Offset: 0x0, Size: 4]
	enum ECollisionTypeEnum CollisionType { //[Offset: 0x0, Size: 1]
		Chaos_Volumetric = 0
		Chaos_Surface_Volumetric = 69006c00000000
		Chaos_Max = 6d007500000000
		Chaos_Max = 7500000000
	};
	float ImplicitShapeParticlesPerUnitArea; 	//[Offset: 0x0, Size: 4]
	int ImplicitShapeMinNumParticles; 	//[Offset: 0x0, Size: 4]
	int ImplicitShapeMaxNumParticles; 	//[Offset: 0x0, Size: 4]
	int MinLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int MaxLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int CollisionGroup; 	//[Offset: 0x0, Size: 4]
	enum EInitialVelocityTypeEnum InitialVelocityType { //[Offset: 0x0, Size: 1]
		Chaos_Initial_Velocity_User_Defined = 0
		Chaos_Initial_Velocity_None = 69007400000000
		Chaos_Max = 79005400000000
		Chaos_Max = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	delegate OnChaosPhysicsCollision; 	//[Offset: 0x0, Size: 16]
	Void ReceivePhysicsCollision(constoutrefstructChaosPhysicsCollisionInfo CollisionInfo); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abc58200
Class: StaticMeshSimulationComponent.ActorComponent.Object, Addr: 0x76903dda80
	bool Simulating; 	//[Offset: 0x0, Size: 1]
	bool bNotifyCollisions; 	//[Offset: 0x0, Size: 1]
	enum EObjectStateTypeEnum ObjectType { //[Offset: 0x0, Size: 1]
		Chaos_NONE = 0
		Chaos_Object_Sleeping = 75006c00000000
		Chaos_Object_Kinematic = 6c004200000000
		Chaos_Object_Static = 75005300000000
		Chaos_Object_Dynamic = 6f004300000000
		Chaos_Object_UserDefined = 76006500000000
		Chaos_Max = 65007a00000000
		Chaos_Max = 0
	};
	float Mass; 	//[Offset: 0x0, Size: 4]
	enum ECollisionTypeEnum CollisionType { //[Offset: 0x0, Size: 1]
		Chaos_Volumetric = 0
		Chaos_Surface_Volumetric = 69006c00000000
		Chaos_Max = 6d007500000000
		Chaos_Max = 7500000000
	};
	enum EImplicitTypeEnum ImplicitType { //[Offset: 0x0, Size: 1]
		Chaos_Implicit_Box = 0
		Chaos_Implicit_Sphere = 50006e00000000
		Chaos_Implicit_Capsule = 6e004500000000
		Chaos_Implicit_LevelSet = 6e004900000000
		Chaos_Implicit_None = 72006100000000
		Chaos_Max = 58000000000000
		Chaos_Max = 0
	};
	int MinLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	int MaxLevelSetResolution; 	//[Offset: 0x0, Size: 4]
	enum EInitialVelocityTypeEnum InitialVelocityType { //[Offset: 0x0, Size: 1]
		Chaos_Initial_Velocity_User_Defined = 0
		Chaos_Initial_Velocity_None = 69007400000000
		Chaos_Max = 79005400000000
		Chaos_Max = 0
	};
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	Vector StructProperty; 	//[Offset: 0x0, Size: 12]
	float DamageThreshold; 	//[Offset: 0x0, Size: 4]
	ChaosPhysicalMaterial* PhysicalMaterial; 	//[Offset: 0x0, Size: 8]
	ChaosSolverActor* ChaosSolverActor; 	//[Offset: 0x0, Size: 8]
	delegate OnChaosPhysicsCollision; 	//[Offset: 0x0, Size: 16]
	PrimitiveComponent*[] SimulatedComponents; //[Offset: 0x0, Size: 16]
	Void ReceivePhysicsCollision(constoutrefstructChaosPhysicsCollisionInfo CollisionInfo); //Addr 0x75ec080c04 [Event|BlueprintEvent] // UFieldProperty addr: 0x75abc58000
Class: DatasmithMesh.Object, Addr: 0x76903dd800
	StrProperty MeshName; 	//[Offset: 0x0, Size: 16]
	bool bIsCollisionMesh; 	//[Offset: 0x0, Size: 1]
	structDatasmithMeshSourceModel[] SourceModels; //[Offset: 0x0, Size: 16]
